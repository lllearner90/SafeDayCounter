
Software.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000758c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000140  0800764c  0800764c  0001764c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800778c  0800778c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800778c  0800778c  0001778c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007794  08007794  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007794  08007794  00017794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007798  08007798  00017798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  0800779c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d00  20000060  080077fc  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001d60  080077fc  00021d60  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   00020df5  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004448  00000000  00000000  00040ec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001d10  00000000  00000000  00045308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016bb  00000000  00000000  00047018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00005802  00000000  00000000  000486d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fbe9  00000000  00000000  0004ded5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b6495  00000000  00000000  0006dabe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d40  00000000  00000000  00123f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0012ac94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08007634 	.word	0x08007634

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08007634 	.word	0x08007634

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000624:	f000 fd52 	bl	80010cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000628:	f000 f82e 	bl	8000688 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800062c:	f000 f9ee 	bl	8000a0c <_ZL12MX_GPIO_Initv>
  MX_SPI1_Init();
 8000630:	f000 f91e 	bl	8000870 <_ZL12MX_SPI1_Initv>
  MX_USART1_IRDA_Init();
 8000634:	f000 f95e 	bl	80008f4 <_ZL19MX_USART1_IRDA_Initv>
  MX_USART2_UART_Init();
 8000638:	f000 f98a 	bl	8000950 <_ZL19MX_USART2_UART_Initv>
  MX_RTC_Init();
 800063c:	f000 f892 	bl	8000764 <_ZL11MX_RTC_Initv>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000640:	f004 fc9c 	bl	8004f7c <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of IdleTask */
  IdleTaskHandle = osThreadNew(StartIdleTask, NULL, &IdleTask_attributes);
 8000644:	4a0a      	ldr	r2, [pc, #40]	; (8000670 <main+0x50>)
 8000646:	4b0b      	ldr	r3, [pc, #44]	; (8000674 <main+0x54>)
 8000648:	2100      	movs	r1, #0
 800064a:	0018      	movs	r0, r3
 800064c:	f004 fcde 	bl	800500c <osThreadNew>
 8000650:	0002      	movs	r2, r0
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <main+0x58>)
 8000654:	601a      	str	r2, [r3, #0]

  /* creation of DisplayTask */
  DisplayTaskHandle = osThreadNew(StartDisplayTask, NULL, &DisplayTask_attributes);
 8000656:	4a09      	ldr	r2, [pc, #36]	; (800067c <main+0x5c>)
 8000658:	4b09      	ldr	r3, [pc, #36]	; (8000680 <main+0x60>)
 800065a:	2100      	movs	r1, #0
 800065c:	0018      	movs	r0, r3
 800065e:	f004 fcd5 	bl	800500c <osThreadNew>
 8000662:	0002      	movs	r2, r0
 8000664:	4b07      	ldr	r3, [pc, #28]	; (8000684 <main+0x64>)
 8000666:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000668:	f004 fcaa 	bl	8004fc0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800066c:	e7fe      	b.n	800066c <main+0x4c>
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	0800767c 	.word	0x0800767c
 8000674:	08000b61 	.word	0x08000b61
 8000678:	200001e8 	.word	0x200001e8
 800067c:	080076a0 	.word	0x080076a0
 8000680:	08000b71 	.word	0x08000b71
 8000684:	200001ec 	.word	0x200001ec

08000688 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000688:	b590      	push	{r4, r7, lr}
 800068a:	b093      	sub	sp, #76	; 0x4c
 800068c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068e:	2410      	movs	r4, #16
 8000690:	193b      	adds	r3, r7, r4
 8000692:	0018      	movs	r0, r3
 8000694:	2338      	movs	r3, #56	; 0x38
 8000696:	001a      	movs	r2, r3
 8000698:	2100      	movs	r1, #0
 800069a:	f006 fedb 	bl	8007454 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800069e:	003b      	movs	r3, r7
 80006a0:	0018      	movs	r0, r3
 80006a2:	2310      	movs	r3, #16
 80006a4:	001a      	movs	r2, r3
 80006a6:	2100      	movs	r1, #0
 80006a8:	f006 fed4 	bl	8007454 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f001 fc93 	bl	8001fdc <HAL_PWREx_ControlVoltageScaling>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80006b6:	f001 fc83 	bl	8001fc0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80006ba:	4b29      	ldr	r3, [pc, #164]	; (8000760 <_Z18SystemClock_Configv+0xd8>)
 80006bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80006be:	4b28      	ldr	r3, [pc, #160]	; (8000760 <_Z18SystemClock_Configv+0xd8>)
 80006c0:	2118      	movs	r1, #24
 80006c2:	438a      	bics	r2, r1
 80006c4:	65da      	str	r2, [r3, #92]	; 0x5c

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80006c6:	193b      	adds	r3, r7, r4
 80006c8:	2205      	movs	r2, #5
 80006ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006cc:	193b      	adds	r3, r7, r4
 80006ce:	2280      	movs	r2, #128	; 0x80
 80006d0:	0252      	lsls	r2, r2, #9
 80006d2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006d4:	0021      	movs	r1, r4
 80006d6:	187b      	adds	r3, r7, r1
 80006d8:	2201      	movs	r2, #1
 80006da:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006dc:	187b      	adds	r3, r7, r1
 80006de:	2202      	movs	r2, #2
 80006e0:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	187b      	adds	r3, r7, r1
 80006e4:	2203      	movs	r2, #3
 80006e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80006e8:	187b      	adds	r3, r7, r1
 80006ea:	2200      	movs	r2, #0
 80006ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006ee:	187b      	adds	r3, r7, r1
 80006f0:	2210      	movs	r2, #16
 80006f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	187b      	adds	r3, r7, r1
 80006f6:	2280      	movs	r2, #128	; 0x80
 80006f8:	0292      	lsls	r2, r2, #10
 80006fa:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006fc:	187b      	adds	r3, r7, r1
 80006fe:	2280      	movs	r2, #128	; 0x80
 8000700:	0492      	lsls	r2, r2, #18
 8000702:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000704:	187b      	adds	r3, r7, r1
 8000706:	2280      	movs	r2, #128	; 0x80
 8000708:	0592      	lsls	r2, r2, #22
 800070a:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800070c:	187b      	adds	r3, r7, r1
 800070e:	0018      	movs	r0, r3
 8000710:	f001 fcb0 	bl	8002074 <HAL_RCC_OscConfig>
 8000714:	0003      	movs	r3, r0
 8000716:	1e5a      	subs	r2, r3, #1
 8000718:	4193      	sbcs	r3, r2
 800071a:	b2db      	uxtb	r3, r3
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <_Z18SystemClock_Configv+0x9c>
  {
    Error_Handler();
 8000720:	f000 fa40 	bl	8000ba4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000724:	003b      	movs	r3, r7
 8000726:	2207      	movs	r2, #7
 8000728:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072a:	003b      	movs	r3, r7
 800072c:	2202      	movs	r2, #2
 800072e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000730:	003b      	movs	r3, r7
 8000732:	2200      	movs	r2, #0
 8000734:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000736:	003b      	movs	r3, r7
 8000738:	2200      	movs	r2, #0
 800073a:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800073c:	003b      	movs	r3, r7
 800073e:	2102      	movs	r1, #2
 8000740:	0018      	movs	r0, r3
 8000742:	f001 ffb1 	bl	80026a8 <HAL_RCC_ClockConfig>
 8000746:	0003      	movs	r3, r0
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	4193      	sbcs	r3, r2
 800074c:	b2db      	uxtb	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	d001      	beq.n	8000756 <_Z18SystemClock_Configv+0xce>
  {
    Error_Handler();
 8000752:	f000 fa27 	bl	8000ba4 <Error_Handler>
  }
}
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	b013      	add	sp, #76	; 0x4c
 800075c:	bd90      	pop	{r4, r7, pc}
 800075e:	46c0      	nop			; (mov r8, r8)
 8000760:	40021000 	.word	0x40021000

08000764 <_ZL11MX_RTC_Initv>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b086      	sub	sp, #24
 8000768:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800076a:	1d3b      	adds	r3, r7, #4
 800076c:	0018      	movs	r0, r3
 800076e:	2314      	movs	r3, #20
 8000770:	001a      	movs	r2, r3
 8000772:	2100      	movs	r1, #0
 8000774:	f006 fe6e 	bl	8007454 <memset>
  RTC_DateTypeDef sDate = {0};
 8000778:	003b      	movs	r3, r7
 800077a:	2200      	movs	r2, #0
 800077c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800077e:	4b3a      	ldr	r3, [pc, #232]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 8000780:	4a3a      	ldr	r2, [pc, #232]	; (800086c <_ZL11MX_RTC_Initv+0x108>)
 8000782:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000784:	4b38      	ldr	r3, [pc, #224]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 8000786:	2200      	movs	r2, #0
 8000788:	609a      	str	r2, [r3, #8]
  hrtc.Init.AsynchPrediv = 127;
 800078a:	4b37      	ldr	r3, [pc, #220]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 800078c:	227f      	movs	r2, #127	; 0x7f
 800078e:	60da      	str	r2, [r3, #12]
  hrtc.Init.SynchPrediv = 255;
 8000790:	4b35      	ldr	r3, [pc, #212]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 8000792:	22ff      	movs	r2, #255	; 0xff
 8000794:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000796:	4b34      	ldr	r3, [pc, #208]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 8000798:	2200      	movs	r2, #0
 800079a:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800079c:	4b32      	ldr	r3, [pc, #200]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 800079e:	2200      	movs	r2, #0
 80007a0:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007a2:	4b31      	ldr	r3, [pc, #196]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007a8:	4b2f      	ldr	r3, [pc, #188]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 80007aa:	2280      	movs	r2, #128	; 0x80
 80007ac:	05d2      	lsls	r2, r2, #23
 80007ae:	621a      	str	r2, [r3, #32]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 80007b0:	4b2d      	ldr	r3, [pc, #180]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007b6:	4b2c      	ldr	r3, [pc, #176]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fb01 	bl	8002dc0 <HAL_RTC_Init>
 80007be:	0003      	movs	r3, r0
 80007c0:	1e5a      	subs	r2, r3, #1
 80007c2:	4193      	sbcs	r3, r2
 80007c4:	b2db      	uxtb	r3, r3
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <_ZL11MX_RTC_Initv+0x6a>
  {
    Error_Handler();
 80007ca:	f000 f9eb 	bl	8000ba4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007ce:	1d3b      	adds	r3, r7, #4
 80007d0:	2200      	movs	r2, #0
 80007d2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x0;
 80007d4:	1d3b      	adds	r3, r7, #4
 80007d6:	2200      	movs	r2, #0
 80007d8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2200      	movs	r2, #0
 80007e4:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	2200      	movs	r2, #0
 80007ea:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	2200      	movs	r2, #0
 80007f0:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007f2:	1d39      	adds	r1, r7, #4
 80007f4:	4b1c      	ldr	r3, [pc, #112]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 80007f6:	2201      	movs	r2, #1
 80007f8:	0018      	movs	r0, r3
 80007fa:	f002 fb83 	bl	8002f04 <HAL_RTC_SetTime>
 80007fe:	0003      	movs	r3, r0
 8000800:	1e5a      	subs	r2, r3, #1
 8000802:	4193      	sbcs	r3, r2
 8000804:	b2db      	uxtb	r3, r3
 8000806:	2b00      	cmp	r3, #0
 8000808:	d001      	beq.n	800080e <_ZL11MX_RTC_Initv+0xaa>
  {
    Error_Handler();
 800080a:	f000 f9cb 	bl	8000ba4 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800080e:	003b      	movs	r3, r7
 8000810:	2201      	movs	r2, #1
 8000812:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000814:	003b      	movs	r3, r7
 8000816:	2201      	movs	r2, #1
 8000818:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x1;
 800081a:	003b      	movs	r3, r7
 800081c:	2201      	movs	r2, #1
 800081e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x0;
 8000820:	003b      	movs	r3, r7
 8000822:	2200      	movs	r2, #0
 8000824:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000826:	0039      	movs	r1, r7
 8000828:	4b0f      	ldr	r3, [pc, #60]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 800082a:	2201      	movs	r2, #1
 800082c:	0018      	movs	r0, r3
 800082e:	f002 fc11 	bl	8003054 <HAL_RTC_SetDate>
 8000832:	0003      	movs	r3, r0
 8000834:	1e5a      	subs	r2, r3, #1
 8000836:	4193      	sbcs	r3, r2
 8000838:	b2db      	uxtb	r3, r3
 800083a:	2b00      	cmp	r3, #0
 800083c:	d001      	beq.n	8000842 <_ZL11MX_RTC_Initv+0xde>
  {
    Error_Handler();
 800083e:	f000 f9b1 	bl	8000ba4 <Error_Handler>
  }

  /** Enable Calibration
  */
  if (HAL_RTCEx_SetCalibrationOutPut(&hrtc, RTC_CALIBOUTPUT_1HZ) != HAL_OK)
 8000842:	2380      	movs	r3, #128	; 0x80
 8000844:	031a      	lsls	r2, r3, #12
 8000846:	4b08      	ldr	r3, [pc, #32]	; (8000868 <_ZL11MX_RTC_Initv+0x104>)
 8000848:	0011      	movs	r1, r2
 800084a:	0018      	movs	r0, r3
 800084c:	f002 fd6a 	bl	8003324 <HAL_RTCEx_SetCalibrationOutPut>
 8000850:	0003      	movs	r3, r0
 8000852:	1e5a      	subs	r2, r3, #1
 8000854:	4193      	sbcs	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	2b00      	cmp	r3, #0
 800085a:	d001      	beq.n	8000860 <_ZL11MX_RTC_Initv+0xfc>
  {
    Error_Handler();
 800085c:	f000 f9a2 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8000860:	46c0      	nop			; (mov r8, r8)
 8000862:	46bd      	mov	sp, r7
 8000864:	b006      	add	sp, #24
 8000866:	bd80      	pop	{r7, pc}
 8000868:	2000007c 	.word	0x2000007c
 800086c:	40002800 	.word	0x40002800

08000870 <_ZL12MX_SPI1_Initv>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000874:	4b1d      	ldr	r3, [pc, #116]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 8000876:	4a1e      	ldr	r2, [pc, #120]	; (80008f0 <_ZL12MX_SPI1_Initv+0x80>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b1c      	ldr	r3, [pc, #112]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 800087c:	2282      	movs	r2, #130	; 0x82
 800087e:	0052      	lsls	r2, r2, #1
 8000880:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b1a      	ldr	r3, [pc, #104]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 8000888:	4b18      	ldr	r3, [pc, #96]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 800088a:	22c0      	movs	r2, #192	; 0xc0
 800088c:	0092      	lsls	r2, r2, #2
 800088e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000890:	4b16      	ldr	r3, [pc, #88]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 8000892:	2200      	movs	r2, #0
 8000894:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000896:	4b15      	ldr	r3, [pc, #84]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 8000898:	2200      	movs	r2, #0
 800089a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 800089c:	4b13      	ldr	r3, [pc, #76]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 800089e:	2280      	movs	r2, #128	; 0x80
 80008a0:	02d2      	lsls	r2, r2, #11
 80008a2:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a4:	4b11      	ldr	r3, [pc, #68]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008aa:	4b10      	ldr	r3, [pc, #64]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80008b0:	4b0e      	ldr	r3, [pc, #56]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b6:	4b0d      	ldr	r3, [pc, #52]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80008bc:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008be:	2207      	movs	r2, #7
 80008c0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80008c8:	4b08      	ldr	r3, [pc, #32]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008ca:	2208      	movs	r2, #8
 80008cc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <_ZL12MX_SPI1_Initv+0x7c>)
 80008d0:	0018      	movs	r0, r3
 80008d2:	f002 fd6f 	bl	80033b4 <HAL_SPI_Init>
 80008d6:	0003      	movs	r3, r0
 80008d8:	1e5a      	subs	r2, r3, #1
 80008da:	4193      	sbcs	r3, r2
 80008dc:	b2db      	uxtb	r3, r3
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <_ZL12MX_SPI1_Initv+0x76>
  {
    Error_Handler();
 80008e2:	f000 f95f 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80008e6:	46c0      	nop			; (mov r8, r8)
 80008e8:	46bd      	mov	sp, r7
 80008ea:	bd80      	pop	{r7, pc}
 80008ec:	200000a8 	.word	0x200000a8
 80008f0:	40013000 	.word	0x40013000

080008f4 <_ZL19MX_USART1_IRDA_Initv>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_IRDA_Init(void)
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  hirda1.Instance = USART1;
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 80008fa:	4a14      	ldr	r2, [pc, #80]	; (800094c <_ZL19MX_USART1_IRDA_Initv+0x58>)
 80008fc:	601a      	str	r2, [r3, #0]
  hirda1.Init.BaudRate = 115200;
 80008fe:	4b12      	ldr	r3, [pc, #72]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 8000900:	22e1      	movs	r2, #225	; 0xe1
 8000902:	0252      	lsls	r2, r2, #9
 8000904:	605a      	str	r2, [r3, #4]
  hirda1.Init.WordLength = IRDA_WORDLENGTH_8B;
 8000906:	4b10      	ldr	r3, [pc, #64]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 8000908:	2200      	movs	r2, #0
 800090a:	609a      	str	r2, [r3, #8]
  hirda1.Init.Parity = IRDA_PARITY_NONE;
 800090c:	4b0e      	ldr	r3, [pc, #56]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 800090e:	2200      	movs	r2, #0
 8000910:	60da      	str	r2, [r3, #12]
  hirda1.Init.Mode = IRDA_MODE_TX_RX;
 8000912:	4b0d      	ldr	r3, [pc, #52]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 8000914:	220c      	movs	r2, #12
 8000916:	611a      	str	r2, [r3, #16]
  hirda1.Init.Prescaler = 10;
 8000918:	4b0b      	ldr	r3, [pc, #44]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 800091a:	220a      	movs	r2, #10
 800091c:	751a      	strb	r2, [r3, #20]
  hirda1.Init.PowerMode = IRDA_POWERMODE_NORMAL;
 800091e:	4b0a      	ldr	r3, [pc, #40]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 8000920:	2200      	movs	r2, #0
 8000922:	82da      	strh	r2, [r3, #22]
  hirda1.Init.ClockPrescaler = IRDA_PRESCALER_DIV1;
 8000924:	4b08      	ldr	r3, [pc, #32]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 8000926:	2200      	movs	r2, #0
 8000928:	619a      	str	r2, [r3, #24]
  if (HAL_IRDA_Init(&hirda1) != HAL_OK)
 800092a:	4b07      	ldr	r3, [pc, #28]	; (8000948 <_ZL19MX_USART1_IRDA_Initv+0x54>)
 800092c:	0018      	movs	r0, r3
 800092e:	f000 fefd 	bl	800172c <HAL_IRDA_Init>
 8000932:	0003      	movs	r3, r0
 8000934:	1e5a      	subs	r2, r3, #1
 8000936:	4193      	sbcs	r3, r2
 8000938:	b2db      	uxtb	r3, r3
 800093a:	2b00      	cmp	r3, #0
 800093c:	d001      	beq.n	8000942 <_ZL19MX_USART1_IRDA_Initv+0x4e>
  {
    Error_Handler();
 800093e:	f000 f931 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000942:	46c0      	nop			; (mov r8, r8)
 8000944:	46bd      	mov	sp, r7
 8000946:	bd80      	pop	{r7, pc}
 8000948:	2000010c 	.word	0x2000010c
 800094c:	40013800 	.word	0x40013800

08000950 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000954:	4b2b      	ldr	r3, [pc, #172]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000956:	4a2c      	ldr	r2, [pc, #176]	; (8000a08 <_ZL19MX_USART2_UART_Initv+0xb8>)
 8000958:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 800095c:	22e1      	movs	r2, #225	; 0xe1
 800095e:	0252      	lsls	r2, r2, #9
 8000960:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000962:	4b28      	ldr	r3, [pc, #160]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000964:	2200      	movs	r2, #0
 8000966:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000968:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 800096a:	2200      	movs	r2, #0
 800096c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800096e:	4b25      	ldr	r3, [pc, #148]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000970:	2200      	movs	r2, #0
 8000972:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000974:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000976:	220c      	movs	r2, #12
 8000978:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800097a:	4b22      	ldr	r3, [pc, #136]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000980:	4b20      	ldr	r3, [pc, #128]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000982:	2200      	movs	r2, #0
 8000984:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000986:	4b1f      	ldr	r3, [pc, #124]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000988:	2200      	movs	r2, #0
 800098a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800098c:	4b1d      	ldr	r3, [pc, #116]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 800098e:	2200      	movs	r2, #0
 8000990:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000992:	4b1c      	ldr	r3, [pc, #112]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 8000994:	2200      	movs	r2, #0
 8000996:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000998:	4b1a      	ldr	r3, [pc, #104]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 800099a:	0018      	movs	r0, r3
 800099c:	f003 f868 	bl	8003a70 <HAL_UART_Init>
 80009a0:	0003      	movs	r3, r0
 80009a2:	1e5a      	subs	r2, r3, #1
 80009a4:	4193      	sbcs	r3, r2
 80009a6:	b2db      	uxtb	r3, r3
 80009a8:	2b00      	cmp	r3, #0
 80009aa:	d001      	beq.n	80009b0 <_ZL19MX_USART2_UART_Initv+0x60>
  {
    Error_Handler();
 80009ac:	f000 f8fa 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009b0:	4b14      	ldr	r3, [pc, #80]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80009b2:	2100      	movs	r1, #0
 80009b4:	0018      	movs	r0, r3
 80009b6:	f004 f977 	bl	8004ca8 <HAL_UARTEx_SetTxFifoThreshold>
 80009ba:	0003      	movs	r3, r0
 80009bc:	1e5a      	subs	r2, r3, #1
 80009be:	4193      	sbcs	r3, r2
 80009c0:	b2db      	uxtb	r3, r3
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d001      	beq.n	80009ca <_ZL19MX_USART2_UART_Initv+0x7a>
  {
    Error_Handler();
 80009c6:	f000 f8ed 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80009cc:	2100      	movs	r1, #0
 80009ce:	0018      	movs	r0, r3
 80009d0:	f004 f9aa 	bl	8004d28 <HAL_UARTEx_SetRxFifoThreshold>
 80009d4:	0003      	movs	r3, r0
 80009d6:	1e5a      	subs	r2, r3, #1
 80009d8:	4193      	sbcs	r3, r2
 80009da:	b2db      	uxtb	r3, r3
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d001      	beq.n	80009e4 <_ZL19MX_USART2_UART_Initv+0x94>
  {
    Error_Handler();
 80009e0:	f000 f8e0 	bl	8000ba4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009e4:	4b07      	ldr	r3, [pc, #28]	; (8000a04 <_ZL19MX_USART2_UART_Initv+0xb4>)
 80009e6:	0018      	movs	r0, r3
 80009e8:	f004 f924 	bl	8004c34 <HAL_UARTEx_DisableFifoMode>
 80009ec:	0003      	movs	r3, r0
 80009ee:	1e5a      	subs	r2, r3, #1
 80009f0:	4193      	sbcs	r3, r2
 80009f2:	b2db      	uxtb	r3, r3
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d001      	beq.n	80009fc <_ZL19MX_USART2_UART_Initv+0xac>
  {
    Error_Handler();
 80009f8:	f000 f8d4 	bl	8000ba4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80009fc:	46c0      	nop			; (mov r8, r8)
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	46c0      	nop			; (mov r8, r8)
 8000a04:	20000154 	.word	0x20000154
 8000a08:	40004400 	.word	0x40004400

08000a0c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a0c:	b590      	push	{r4, r7, lr}
 8000a0e:	b08b      	sub	sp, #44	; 0x2c
 8000a10:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a12:	2414      	movs	r4, #20
 8000a14:	193b      	adds	r3, r7, r4
 8000a16:	0018      	movs	r0, r3
 8000a18:	2314      	movs	r3, #20
 8000a1a:	001a      	movs	r2, r3
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	f006 fd19 	bl	8007454 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a22:	4b46      	ldr	r3, [pc, #280]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a26:	4b45      	ldr	r3, [pc, #276]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a28:	2104      	movs	r1, #4
 8000a2a:	430a      	orrs	r2, r1
 8000a2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a2e:	4b43      	ldr	r3, [pc, #268]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a32:	2204      	movs	r2, #4
 8000a34:	4013      	ands	r3, r2
 8000a36:	613b      	str	r3, [r7, #16]
 8000a38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3a:	4b40      	ldr	r3, [pc, #256]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a3e:	4b3f      	ldr	r3, [pc, #252]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a40:	2120      	movs	r1, #32
 8000a42:	430a      	orrs	r2, r1
 8000a44:	635a      	str	r2, [r3, #52]	; 0x34
 8000a46:	4b3d      	ldr	r3, [pc, #244]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4a:	2220      	movs	r2, #32
 8000a4c:	4013      	ands	r3, r2
 8000a4e:	60fb      	str	r3, [r7, #12]
 8000a50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a52:	4b3a      	ldr	r3, [pc, #232]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a54:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a56:	4b39      	ldr	r3, [pc, #228]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a58:	2101      	movs	r1, #1
 8000a5a:	430a      	orrs	r2, r1
 8000a5c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a5e:	4b37      	ldr	r3, [pc, #220]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a60:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a62:	2201      	movs	r2, #1
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
 8000a68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a6a:	4b34      	ldr	r3, [pc, #208]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a6c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6e:	4b33      	ldr	r3, [pc, #204]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a70:	2102      	movs	r1, #2
 8000a72:	430a      	orrs	r2, r1
 8000a74:	635a      	str	r2, [r3, #52]	; 0x34
 8000a76:	4b31      	ldr	r3, [pc, #196]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	607b      	str	r3, [r7, #4]
 8000a80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a82:	4b2e      	ldr	r3, [pc, #184]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a84:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a86:	4b2d      	ldr	r3, [pc, #180]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a88:	2108      	movs	r1, #8
 8000a8a:	430a      	orrs	r2, r1
 8000a8c:	635a      	str	r2, [r3, #52]	; 0x34
 8000a8e:	4b2b      	ldr	r3, [pc, #172]	; (8000b3c <_ZL12MX_GPIO_Initv+0x130>)
 8000a90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a92:	2208      	movs	r2, #8
 8000a94:	4013      	ands	r3, r2
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PC11 PC12 PC13 PC0
                           PC1 PC2 PC3 PC6
                           PC7 PC8 PC9 PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_0
 8000a9a:	193b      	adds	r3, r7, r4
 8000a9c:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <_ZL12MX_GPIO_Initv+0x134>)
 8000a9e:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_6
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aa0:	193b      	adds	r3, r7, r4
 8000aa2:	2203      	movs	r2, #3
 8000aa4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa6:	193b      	adds	r3, r7, r4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aac:	193b      	adds	r3, r7, r4
 8000aae:	4a25      	ldr	r2, [pc, #148]	; (8000b44 <_ZL12MX_GPIO_Initv+0x138>)
 8000ab0:	0019      	movs	r1, r3
 8000ab2:	0010      	movs	r0, r2
 8000ab4:	f000 fcd6 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000ab8:	193b      	adds	r3, r7, r4
 8000aba:	2204      	movs	r2, #4
 8000abc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	2203      	movs	r2, #3
 8000ac2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ac4:	193b      	adds	r3, r7, r4
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000aca:	193b      	adds	r3, r7, r4
 8000acc:	4a1e      	ldr	r2, [pc, #120]	; (8000b48 <_ZL12MX_GPIO_Initv+0x13c>)
 8000ace:	0019      	movs	r1, r3
 8000ad0:	0010      	movs	r0, r2
 8000ad2:	f000 fcc7 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA5 PA6
                           PA7 PA8 PA9 PA10
                           PA11 PA12 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_5|GPIO_PIN_6
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	4a1c      	ldr	r2, [pc, #112]	; (8000b4c <_ZL12MX_GPIO_Initv+0x140>)
 8000ada:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
                          |GPIO_PIN_11|GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000adc:	193b      	adds	r3, r7, r4
 8000ade:	2203      	movs	r2, #3
 8000ae0:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae2:	193b      	adds	r3, r7, r4
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae8:	193a      	adds	r2, r7, r4
 8000aea:	23a0      	movs	r3, #160	; 0xa0
 8000aec:	05db      	lsls	r3, r3, #23
 8000aee:	0011      	movs	r1, r2
 8000af0:	0018      	movs	r0, r3
 8000af2:	f000 fcb7 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB11 PB12 PB13 PB14
                           PB15 PB6 PB7 PB8
                           PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000af6:	193b      	adds	r3, r7, r4
 8000af8:	4a15      	ldr	r2, [pc, #84]	; (8000b50 <_ZL12MX_GPIO_Initv+0x144>)
 8000afa:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15|GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8
                          |GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	2203      	movs	r2, #3
 8000b00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b02:	193b      	adds	r3, r7, r4
 8000b04:	2200      	movs	r2, #0
 8000b06:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b08:	193b      	adds	r3, r7, r4
 8000b0a:	4a12      	ldr	r2, [pc, #72]	; (8000b54 <_ZL12MX_GPIO_Initv+0x148>)
 8000b0c:	0019      	movs	r1, r3
 8000b0e:	0010      	movs	r0, r2
 8000b10:	f000 fca8 	bl	8001464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 PD0 PD1
                           PD2 PD3 PD4 PD5
                           PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_0|GPIO_PIN_1
 8000b14:	0021      	movs	r1, r4
 8000b16:	187b      	adds	r3, r7, r1
 8000b18:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <_ZL12MX_GPIO_Initv+0x14c>)
 8000b1a:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b1c:	187b      	adds	r3, r7, r1
 8000b1e:	2203      	movs	r2, #3
 8000b20:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b28:	187b      	adds	r3, r7, r1
 8000b2a:	4a0c      	ldr	r2, [pc, #48]	; (8000b5c <_ZL12MX_GPIO_Initv+0x150>)
 8000b2c:	0019      	movs	r1, r3
 8000b2e:	0010      	movs	r0, r2
 8000b30:	f000 fc98 	bl	8001464 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b34:	46c0      	nop			; (mov r8, r8)
 8000b36:	46bd      	mov	sp, r7
 8000b38:	b00b      	add	sp, #44	; 0x2c
 8000b3a:	bd90      	pop	{r4, r7, pc}
 8000b3c:	40021000 	.word	0x40021000
 8000b40:	00003fcf 	.word	0x00003fcf
 8000b44:	50000800 	.word	0x50000800
 8000b48:	50001400 	.word	0x50001400
 8000b4c:	00001fe3 	.word	0x00001fe3
 8000b50:	0000ffc7 	.word	0x0000ffc7
 8000b54:	50000400 	.word	0x50000400
 8000b58:	0000037f 	.word	0x0000037f
 8000b5c:	50000c00 	.word	0x50000c00

08000b60 <_Z13StartIdleTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartIdleTask */
void StartIdleTask(void *argument)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b68:	2001      	movs	r0, #1
 8000b6a:	f004 fae5 	bl	8005138 <osDelay>
 8000b6e:	e7fb      	b.n	8000b68 <_Z13StartIdleTaskPv+0x8>

08000b70 <_Z16StartDisplayTaskPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartDisplayTask */
void StartDisplayTask(void *argument)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b082      	sub	sp, #8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDisplayTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b78:	2001      	movs	r0, #1
 8000b7a:	f004 fadd 	bl	8005138 <osDelay>
 8000b7e:	e7fb      	b.n	8000b78 <_Z16StartDisplayTaskPv+0x8>

08000b80 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	681b      	ldr	r3, [r3, #0]
 8000b8c:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b8e:	4293      	cmp	r3, r2
 8000b90:	d101      	bne.n	8000b96 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b92:	f000 fabb 	bl	800110c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b96:	46c0      	nop			; (mov r8, r8)
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	b002      	add	sp, #8
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	40012c00 	.word	0x40012c00

08000ba4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ba8:	b672      	cpsid	i
}
 8000baa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bac:	e7fe      	b.n	8000bac <Error_Handler+0x8>
	...

08000bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b082      	sub	sp, #8
 8000bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bb6:	4b15      	ldr	r3, [pc, #84]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bb8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000bba:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bbc:	2101      	movs	r1, #1
 8000bbe:	430a      	orrs	r2, r1
 8000bc0:	641a      	str	r2, [r3, #64]	; 0x40
 8000bc2:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	4013      	ands	r3, r2
 8000bca:	607b      	str	r3, [r7, #4]
 8000bcc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bce:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bd4:	2180      	movs	r1, #128	; 0x80
 8000bd6:	0549      	lsls	r1, r1, #21
 8000bd8:	430a      	orrs	r2, r1
 8000bda:	63da      	str	r2, [r3, #60]	; 0x3c
 8000bdc:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <HAL_MspInit+0x5c>)
 8000bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000be0:	2380      	movs	r3, #128	; 0x80
 8000be2:	055b      	lsls	r3, r3, #21
 8000be4:	4013      	ands	r3, r2
 8000be6:	603b      	str	r3, [r7, #0]
 8000be8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8000bea:	2302      	movs	r3, #2
 8000bec:	425b      	negs	r3, r3
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2103      	movs	r1, #3
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 fb44 	bl	8001280 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000bf8:	23c0      	movs	r3, #192	; 0xc0
 8000bfa:	00db      	lsls	r3, r3, #3
 8000bfc:	0018      	movs	r0, r3
 8000bfe:	f000 faa1 	bl	8001144 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c02:	46c0      	nop			; (mov r8, r8)
 8000c04:	46bd      	mov	sp, r7
 8000c06:	b002      	add	sp, #8
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	46c0      	nop			; (mov r8, r8)
 8000c0c:	40021000 	.word	0x40021000

08000c10 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000c10:	b590      	push	{r4, r7, lr}
 8000c12:	b091      	sub	sp, #68	; 0x44
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c18:	240c      	movs	r4, #12
 8000c1a:	193b      	adds	r3, r7, r4
 8000c1c:	0018      	movs	r0, r3
 8000c1e:	2334      	movs	r3, #52	; 0x34
 8000c20:	001a      	movs	r2, r3
 8000c22:	2100      	movs	r1, #0
 8000c24:	f006 fc16 	bl	8007454 <memset>
  if(hrtc->Instance==RTC)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a15      	ldr	r2, [pc, #84]	; (8000c84 <HAL_RTC_MspInit+0x74>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d124      	bne.n	8000c7c <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000c32:	193b      	adds	r3, r7, r4
 8000c34:	2280      	movs	r2, #128	; 0x80
 8000c36:	0292      	lsls	r2, r2, #10
 8000c38:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8000c3a:	193b      	adds	r3, r7, r4
 8000c3c:	2280      	movs	r2, #128	; 0x80
 8000c3e:	0052      	lsls	r2, r2, #1
 8000c40:	631a      	str	r2, [r3, #48]	; 0x30

    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c42:	193b      	adds	r3, r7, r4
 8000c44:	0018      	movs	r0, r3
 8000c46:	f001 ff03 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000c4a:	1e03      	subs	r3, r0, #0
 8000c4c:	d001      	beq.n	8000c52 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000c4e:	f7ff ffa9 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000c52:	4b0d      	ldr	r3, [pc, #52]	; (8000c88 <HAL_RTC_MspInit+0x78>)
 8000c54:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000c56:	4b0c      	ldr	r3, [pc, #48]	; (8000c88 <HAL_RTC_MspInit+0x78>)
 8000c58:	2180      	movs	r1, #128	; 0x80
 8000c5a:	0209      	lsls	r1, r1, #8
 8000c5c:	430a      	orrs	r2, r1
 8000c5e:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000c60:	4b09      	ldr	r3, [pc, #36]	; (8000c88 <HAL_RTC_MspInit+0x78>)
 8000c62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <HAL_RTC_MspInit+0x78>)
 8000c66:	2180      	movs	r1, #128	; 0x80
 8000c68:	00c9      	lsls	r1, r1, #3
 8000c6a:	430a      	orrs	r2, r1
 8000c6c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000c6e:	4b06      	ldr	r3, [pc, #24]	; (8000c88 <HAL_RTC_MspInit+0x78>)
 8000c70:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000c72:	2380      	movs	r3, #128	; 0x80
 8000c74:	00db      	lsls	r3, r3, #3
 8000c76:	4013      	ands	r3, r2
 8000c78:	60bb      	str	r3, [r7, #8]
 8000c7a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000c7c:	46c0      	nop			; (mov r8, r8)
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	b011      	add	sp, #68	; 0x44
 8000c82:	bd90      	pop	{r4, r7, pc}
 8000c84:	40002800 	.word	0x40002800
 8000c88:	40021000 	.word	0x40021000

08000c8c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c8c:	b590      	push	{r4, r7, lr}
 8000c8e:	b08b      	sub	sp, #44	; 0x2c
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c94:	2414      	movs	r4, #20
 8000c96:	193b      	adds	r3, r7, r4
 8000c98:	0018      	movs	r0, r3
 8000c9a:	2314      	movs	r3, #20
 8000c9c:	001a      	movs	r2, r3
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	f006 fbd8 	bl	8007454 <memset>
  if(hspi->Instance==SPI1)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	4a2c      	ldr	r2, [pc, #176]	; (8000d5c <HAL_SPI_MspInit+0xd0>)
 8000caa:	4293      	cmp	r3, r2
 8000cac:	d152      	bne.n	8000d54 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000cae:	4b2c      	ldr	r3, [pc, #176]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cb0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cb2:	4b2b      	ldr	r3, [pc, #172]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cb4:	2180      	movs	r1, #128	; 0x80
 8000cb6:	0149      	lsls	r1, r1, #5
 8000cb8:	430a      	orrs	r2, r1
 8000cba:	641a      	str	r2, [r3, #64]	; 0x40
 8000cbc:	4b28      	ldr	r3, [pc, #160]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cbe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	015b      	lsls	r3, r3, #5
 8000cc4:	4013      	ands	r3, r2
 8000cc6:	613b      	str	r3, [r7, #16]
 8000cc8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cca:	4b25      	ldr	r3, [pc, #148]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000ccc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cce:	4b24      	ldr	r3, [pc, #144]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	430a      	orrs	r2, r1
 8000cd4:	635a      	str	r2, [r3, #52]	; 0x34
 8000cd6:	4b22      	ldr	r3, [pc, #136]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cda:	2201      	movs	r2, #1
 8000cdc:	4013      	ands	r3, r2
 8000cde:	60fb      	str	r3, [r7, #12]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ce2:	4b1f      	ldr	r3, [pc, #124]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000ce4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ce6:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000ce8:	2102      	movs	r1, #2
 8000cea:	430a      	orrs	r2, r1
 8000cec:	635a      	str	r2, [r3, #52]	; 0x34
 8000cee:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <HAL_SPI_MspInit+0xd4>)
 8000cf0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	60bb      	str	r3, [r7, #8]
 8000cf8:	68bb      	ldr	r3, [r7, #8]
    PA15     ------> SPI1_NSS
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cfa:	193b      	adds	r3, r7, r4
 8000cfc:	2280      	movs	r2, #128	; 0x80
 8000cfe:	0212      	lsls	r2, r2, #8
 8000d00:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	193b      	adds	r3, r7, r4
 8000d04:	2202      	movs	r2, #2
 8000d06:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d08:	193b      	adds	r3, r7, r4
 8000d0a:	2201      	movs	r2, #1
 8000d0c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d0e:	193b      	adds	r3, r7, r4
 8000d10:	2202      	movs	r2, #2
 8000d12:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d14:	193b      	adds	r3, r7, r4
 8000d16:	2200      	movs	r2, #0
 8000d18:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	193a      	adds	r2, r7, r4
 8000d1c:	23a0      	movs	r3, #160	; 0xa0
 8000d1e:	05db      	lsls	r3, r3, #23
 8000d20:	0011      	movs	r1, r2
 8000d22:	0018      	movs	r0, r3
 8000d24:	f000 fb9e 	bl	8001464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d28:	0021      	movs	r1, r4
 8000d2a:	187b      	adds	r3, r7, r1
 8000d2c:	2238      	movs	r2, #56	; 0x38
 8000d2e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d30:	187b      	adds	r3, r7, r1
 8000d32:	2202      	movs	r2, #2
 8000d34:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d36:	187b      	adds	r3, r7, r1
 8000d38:	2201      	movs	r2, #1
 8000d3a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d3c:	187b      	adds	r3, r7, r1
 8000d3e:	2202      	movs	r2, #2
 8000d40:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000d42:	187b      	adds	r3, r7, r1
 8000d44:	2200      	movs	r2, #0
 8000d46:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d48:	187b      	adds	r3, r7, r1
 8000d4a:	4a06      	ldr	r2, [pc, #24]	; (8000d64 <HAL_SPI_MspInit+0xd8>)
 8000d4c:	0019      	movs	r1, r3
 8000d4e:	0010      	movs	r0, r2
 8000d50:	f000 fb88 	bl	8001464 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000d54:	46c0      	nop			; (mov r8, r8)
 8000d56:	46bd      	mov	sp, r7
 8000d58:	b00b      	add	sp, #44	; 0x2c
 8000d5a:	bd90      	pop	{r4, r7, pc}
 8000d5c:	40013000 	.word	0x40013000
 8000d60:	40021000 	.word	0x40021000
 8000d64:	50000400 	.word	0x50000400

08000d68 <HAL_IRDA_MspInit>:
* This function configures the hardware resources used in this example
* @param hirda: IRDA handle pointer
* @retval None
*/
void HAL_IRDA_MspInit(IRDA_HandleTypeDef* hirda)
{
 8000d68:	b590      	push	{r4, r7, lr}
 8000d6a:	b097      	sub	sp, #92	; 0x5c
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d70:	2344      	movs	r3, #68	; 0x44
 8000d72:	18fb      	adds	r3, r7, r3
 8000d74:	0018      	movs	r0, r3
 8000d76:	2314      	movs	r3, #20
 8000d78:	001a      	movs	r2, r3
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	f006 fb6a 	bl	8007454 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d80:	2410      	movs	r4, #16
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	0018      	movs	r0, r3
 8000d86:	2334      	movs	r3, #52	; 0x34
 8000d88:	001a      	movs	r2, r3
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	f006 fb62 	bl	8007454 <memset>
  if(hirda->Instance==USART1)
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	681b      	ldr	r3, [r3, #0]
 8000d94:	4a26      	ldr	r2, [pc, #152]	; (8000e30 <HAL_IRDA_MspInit+0xc8>)
 8000d96:	4293      	cmp	r3, r2
 8000d98:	d145      	bne.n	8000e26 <HAL_IRDA_MspInit+0xbe>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000d9a:	193b      	adds	r3, r7, r4
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000da0:	193b      	adds	r3, r7, r4
 8000da2:	2200      	movs	r2, #0
 8000da4:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	0018      	movs	r0, r3
 8000daa:	f001 fe51 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	1e03      	subs	r3, r0, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_IRDA_MspInit+0x4e>
    {
      Error_Handler();
 8000db2:	f7ff fef7 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000db6:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <HAL_IRDA_MspInit+0xcc>)
 8000db8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dba:	4b1e      	ldr	r3, [pc, #120]	; (8000e34 <HAL_IRDA_MspInit+0xcc>)
 8000dbc:	2180      	movs	r1, #128	; 0x80
 8000dbe:	01c9      	lsls	r1, r1, #7
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	641a      	str	r2, [r3, #64]	; 0x40
 8000dc4:	4b1b      	ldr	r3, [pc, #108]	; (8000e34 <HAL_IRDA_MspInit+0xcc>)
 8000dc6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000dc8:	2380      	movs	r3, #128	; 0x80
 8000dca:	01db      	lsls	r3, r3, #7
 8000dcc:	4013      	ands	r3, r2
 8000dce:	60fb      	str	r3, [r7, #12]
 8000dd0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dd2:	4b18      	ldr	r3, [pc, #96]	; (8000e34 <HAL_IRDA_MspInit+0xcc>)
 8000dd4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000dd6:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <HAL_IRDA_MspInit+0xcc>)
 8000dd8:	2104      	movs	r1, #4
 8000dda:	430a      	orrs	r2, r1
 8000ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8000dde:	4b15      	ldr	r3, [pc, #84]	; (8000e34 <HAL_IRDA_MspInit+0xcc>)
 8000de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000de2:	2204      	movs	r2, #4
 8000de4:	4013      	ands	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
 8000de8:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000dea:	2144      	movs	r1, #68	; 0x44
 8000dec:	187b      	adds	r3, r7, r1
 8000dee:	2230      	movs	r2, #48	; 0x30
 8000df0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	2212      	movs	r2, #18
 8000df6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2200      	movs	r2, #0
 8000e02:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2201      	movs	r2, #1
 8000e08:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	4a0a      	ldr	r2, [pc, #40]	; (8000e38 <HAL_IRDA_MspInit+0xd0>)
 8000e0e:	0019      	movs	r1, r3
 8000e10:	0010      	movs	r0, r2
 8000e12:	f000 fb27 	bl	8001464 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8000e16:	2200      	movs	r2, #0
 8000e18:	2103      	movs	r1, #3
 8000e1a:	201b      	movs	r0, #27
 8000e1c:	f000 fa30 	bl	8001280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000e20:	201b      	movs	r0, #27
 8000e22:	f000 fa42 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000e26:	46c0      	nop			; (mov r8, r8)
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	b017      	add	sp, #92	; 0x5c
 8000e2c:	bd90      	pop	{r4, r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	40013800 	.word	0x40013800
 8000e34:	40021000 	.word	0x40021000
 8000e38:	50000800 	.word	0x50000800

08000e3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e3c:	b590      	push	{r4, r7, lr}
 8000e3e:	b097      	sub	sp, #92	; 0x5c
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e44:	2344      	movs	r3, #68	; 0x44
 8000e46:	18fb      	adds	r3, r7, r3
 8000e48:	0018      	movs	r0, r3
 8000e4a:	2314      	movs	r3, #20
 8000e4c:	001a      	movs	r2, r3
 8000e4e:	2100      	movs	r1, #0
 8000e50:	f006 fb00 	bl	8007454 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e54:	2410      	movs	r4, #16
 8000e56:	193b      	adds	r3, r7, r4
 8000e58:	0018      	movs	r0, r3
 8000e5a:	2334      	movs	r3, #52	; 0x34
 8000e5c:	001a      	movs	r2, r3
 8000e5e:	2100      	movs	r1, #0
 8000e60:	f006 faf8 	bl	8007454 <memset>
  if(huart->Instance==USART2)
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a26      	ldr	r2, [pc, #152]	; (8000f04 <HAL_UART_MspInit+0xc8>)
 8000e6a:	4293      	cmp	r3, r2
 8000e6c:	d146      	bne.n	8000efc <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e6e:	193b      	adds	r3, r7, r4
 8000e70:	2202      	movs	r2, #2
 8000e72:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e74:	193b      	adds	r3, r7, r4
 8000e76:	2200      	movs	r2, #0
 8000e78:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e7a:	193b      	adds	r3, r7, r4
 8000e7c:	0018      	movs	r0, r3
 8000e7e:	f001 fde7 	bl	8002a50 <HAL_RCCEx_PeriphCLKConfig>
 8000e82:	1e03      	subs	r3, r0, #0
 8000e84:	d001      	beq.n	8000e8a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000e86:	f7ff fe8d 	bl	8000ba4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <HAL_UART_MspInit+0xcc>)
 8000e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e8e:	4b1e      	ldr	r3, [pc, #120]	; (8000f08 <HAL_UART_MspInit+0xcc>)
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	0289      	lsls	r1, r1, #10
 8000e94:	430a      	orrs	r2, r1
 8000e96:	63da      	str	r2, [r3, #60]	; 0x3c
 8000e98:	4b1b      	ldr	r3, [pc, #108]	; (8000f08 <HAL_UART_MspInit+0xcc>)
 8000e9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	029b      	lsls	r3, r3, #10
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]
 8000ea4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b18      	ldr	r3, [pc, #96]	; (8000f08 <HAL_UART_MspInit+0xcc>)
 8000ea8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000eaa:	4b17      	ldr	r3, [pc, #92]	; (8000f08 <HAL_UART_MspInit+0xcc>)
 8000eac:	2101      	movs	r1, #1
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8000eb2:	4b15      	ldr	r3, [pc, #84]	; (8000f08 <HAL_UART_MspInit+0xcc>)
 8000eb4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	4013      	ands	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
 8000ebc:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000ebe:	2144      	movs	r1, #68	; 0x44
 8000ec0:	187b      	adds	r3, r7, r1
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec6:	187b      	adds	r3, r7, r1
 8000ec8:	2202      	movs	r2, #2
 8000eca:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ecc:	187b      	adds	r3, r7, r1
 8000ece:	2201      	movs	r2, #1
 8000ed0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ed2:	187b      	adds	r3, r7, r1
 8000ed4:	2202      	movs	r2, #2
 8000ed6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ed8:	187b      	adds	r3, r7, r1
 8000eda:	2201      	movs	r2, #1
 8000edc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ede:	187a      	adds	r2, r7, r1
 8000ee0:	23a0      	movs	r3, #160	; 0xa0
 8000ee2:	05db      	lsls	r3, r3, #23
 8000ee4:	0011      	movs	r1, r2
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	f000 fabc 	bl	8001464 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8000eec:	2200      	movs	r2, #0
 8000eee:	2103      	movs	r1, #3
 8000ef0:	201c      	movs	r0, #28
 8000ef2:	f000 f9c5 	bl	8001280 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000ef6:	201c      	movs	r0, #28
 8000ef8:	f000 f9d7 	bl	80012aa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000efc:	46c0      	nop			; (mov r8, r8)
 8000efe:	46bd      	mov	sp, r7
 8000f00:	b017      	add	sp, #92	; 0x5c
 8000f02:	bd90      	pop	{r4, r7, pc}
 8000f04:	40004400 	.word	0x40004400
 8000f08:	40021000 	.word	0x40021000

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b5b0      	push	{r4, r5, r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000f14:	232b      	movs	r3, #43	; 0x2b
 8000f16:	18fb      	adds	r3, r7, r3
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1c:	4b38      	ldr	r3, [pc, #224]	; (8001000 <HAL_InitTick+0xf4>)
 8000f1e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f20:	4b37      	ldr	r3, [pc, #220]	; (8001000 <HAL_InitTick+0xf4>)
 8000f22:	2180      	movs	r1, #128	; 0x80
 8000f24:	0109      	lsls	r1, r1, #4
 8000f26:	430a      	orrs	r2, r1
 8000f28:	641a      	str	r2, [r3, #64]	; 0x40
 8000f2a:	4b35      	ldr	r3, [pc, #212]	; (8001000 <HAL_InitTick+0xf4>)
 8000f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000f2e:	2380      	movs	r3, #128	; 0x80
 8000f30:	011b      	lsls	r3, r3, #4
 8000f32:	4013      	ands	r3, r2
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f38:	230c      	movs	r3, #12
 8000f3a:	18fa      	adds	r2, r7, r3
 8000f3c:	2410      	movs	r4, #16
 8000f3e:	193b      	adds	r3, r7, r4
 8000f40:	0011      	movs	r1, r2
 8000f42:	0018      	movs	r0, r3
 8000f44:	f001 fd5a 	bl	80029fc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000f48:	193b      	adds	r3, r7, r4
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM1 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d104      	bne.n	8000f5e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f54:	f001 fd3c 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8000f58:	0003      	movs	r3, r0
 8000f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f5c:	e004      	b.n	8000f68 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000f5e:	f001 fd37 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8000f62:	0003      	movs	r3, r0
 8000f64:	005b      	lsls	r3, r3, #1
 8000f66:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6a:	4926      	ldr	r1, [pc, #152]	; (8001004 <HAL_InitTick+0xf8>)
 8000f6c:	0018      	movs	r0, r3
 8000f6e:	f7ff f8cb 	bl	8000108 <__udivsi3>
 8000f72:	0003      	movs	r3, r0
 8000f74:	3b01      	subs	r3, #1
 8000f76:	623b      	str	r3, [r7, #32]

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000f78:	4b23      	ldr	r3, [pc, #140]	; (8001008 <HAL_InitTick+0xfc>)
 8000f7a:	4a24      	ldr	r2, [pc, #144]	; (800100c <HAL_InitTick+0x100>)
 8000f7c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <HAL_InitTick+0xfc>)
 8000f80:	4a23      	ldr	r2, [pc, #140]	; (8001010 <HAL_InitTick+0x104>)
 8000f82:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000f84:	4b20      	ldr	r3, [pc, #128]	; (8001008 <HAL_InitTick+0xfc>)
 8000f86:	6a3a      	ldr	r2, [r7, #32]
 8000f88:	605a      	str	r2, [r3, #4]
  htim1.Init.ClockDivision = 0;
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <HAL_InitTick+0xfc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f90:	4b1d      	ldr	r3, [pc, #116]	; (8001008 <HAL_InitTick+0xfc>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f96:	4b1c      	ldr	r3, [pc, #112]	; (8001008 <HAL_InitTick+0xfc>)
 8000f98:	2200      	movs	r2, #0
 8000f9a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000f9c:	252b      	movs	r5, #43	; 0x2b
 8000f9e:	197c      	adds	r4, r7, r5
 8000fa0:	4b19      	ldr	r3, [pc, #100]	; (8001008 <HAL_InitTick+0xfc>)
 8000fa2:	0018      	movs	r0, r3
 8000fa4:	f002 fabe 	bl	8003524 <HAL_TIM_Base_Init>
 8000fa8:	0003      	movs	r3, r0
 8000faa:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8000fac:	197b      	adds	r3, r7, r5
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d11e      	bne.n	8000ff2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000fb4:	197c      	adds	r4, r7, r5
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <HAL_InitTick+0xfc>)
 8000fb8:	0018      	movs	r0, r3
 8000fba:	f002 fb13 	bl	80035e4 <HAL_TIM_Base_Start_IT>
 8000fbe:	0003      	movs	r3, r0
 8000fc0:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8000fc2:	197b      	adds	r3, r7, r5
 8000fc4:	781b      	ldrb	r3, [r3, #0]
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d113      	bne.n	8000ff2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000fca:	200d      	movs	r0, #13
 8000fcc:	f000 f96d 	bl	80012aa <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d809      	bhi.n	8000fea <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, TickPriority, 0U);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	2200      	movs	r2, #0
 8000fda:	0019      	movs	r1, r3
 8000fdc:	200d      	movs	r0, #13
 8000fde:	f000 f94f 	bl	8001280 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fe2:	4b0c      	ldr	r3, [pc, #48]	; (8001014 <HAL_InitTick+0x108>)
 8000fe4:	687a      	ldr	r2, [r7, #4]
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	e003      	b.n	8000ff2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8000fea:	232b      	movs	r3, #43	; 0x2b
 8000fec:	18fb      	adds	r3, r7, r3
 8000fee:	2201      	movs	r2, #1
 8000ff0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8000ff2:	232b      	movs	r3, #43	; 0x2b
 8000ff4:	18fb      	adds	r3, r7, r3
 8000ff6:	781b      	ldrb	r3, [r3, #0]
}
 8000ff8:	0018      	movs	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b00c      	add	sp, #48	; 0x30
 8000ffe:	bdb0      	pop	{r4, r5, r7, pc}
 8001000:	40021000 	.word	0x40021000
 8001004:	000f4240 	.word	0x000f4240
 8001008:	200001f0 	.word	0x200001f0
 800100c:	40012c00 	.word	0x40012c00
 8001010:	000003e7 	.word	0x000003e7
 8001014:	20000004 	.word	0x20000004

08001018 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800101c:	e7fe      	b.n	800101c <NMI_Handler+0x4>

0800101e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001022:	e7fe      	b.n	8001022 <HardFault_Handler+0x4>

08001024 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800102a:	0018      	movs	r0, r3
 800102c:	f002 fb36 	bl	800369c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001030:	46c0      	nop			; (mov r8, r8)
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	46c0      	nop			; (mov r8, r8)
 8001038:	200001f0 	.word	0x200001f0

0800103c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_IRDA_IRQHandler(&hirda1);
 8001040:	4b03      	ldr	r3, [pc, #12]	; (8001050 <USART1_IRQHandler+0x14>)
 8001042:	0018      	movs	r0, r3
 8001044:	f000 fbc6 	bl	80017d4 <HAL_IRDA_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001048:	46c0      	nop			; (mov r8, r8)
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	46c0      	nop			; (mov r8, r8)
 8001050:	2000010c 	.word	0x2000010c

08001054 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001058:	4b03      	ldr	r3, [pc, #12]	; (8001068 <USART2_IRQHandler+0x14>)
 800105a:	0018      	movs	r0, r3
 800105c:	f002 fd5e 	bl	8003b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	46c0      	nop			; (mov r8, r8)
 8001068:	20000154 	.word	0x20000154

0800106c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001070:	46c0      	nop			; (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	bd80      	pop	{r7, pc}
	...

08001078 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001078:	480d      	ldr	r0, [pc, #52]	; (80010b0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800107a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800107c:	f7ff fff6 	bl	800106c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001080:	480c      	ldr	r0, [pc, #48]	; (80010b4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001082:	490d      	ldr	r1, [pc, #52]	; (80010b8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001084:	4a0d      	ldr	r2, [pc, #52]	; (80010bc <LoopForever+0xe>)
  movs r3, #0
 8001086:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001088:	e002      	b.n	8001090 <LoopCopyDataInit>

0800108a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800108c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800108e:	3304      	adds	r3, #4

08001090 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001090:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001092:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001094:	d3f9      	bcc.n	800108a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001096:	4a0a      	ldr	r2, [pc, #40]	; (80010c0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001098:	4c0a      	ldr	r4, [pc, #40]	; (80010c4 <LoopForever+0x16>)
  movs r3, #0
 800109a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800109c:	e001      	b.n	80010a2 <LoopFillZerobss>

0800109e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800109e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a0:	3204      	adds	r2, #4

080010a2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a4:	d3fb      	bcc.n	800109e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80010a6:	f006 fa3b 	bl	8007520 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80010aa:	f7ff fab9 	bl	8000620 <main>

080010ae <LoopForever>:

LoopForever:
  b LoopForever
 80010ae:	e7fe      	b.n	80010ae <LoopForever>
  ldr   r0, =_estack
 80010b0:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 80010b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010b8:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80010bc:	0800779c 	.word	0x0800779c
  ldr r2, =_sbss
 80010c0:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 80010c4:	20001d60 	.word	0x20001d60

080010c8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010c8:	e7fe      	b.n	80010c8 <ADC1_COMP_IRQHandler>
	...

080010cc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	2200      	movs	r2, #0
 80010d6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b0b      	ldr	r3, [pc, #44]	; (8001108 <HAL_Init+0x3c>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b0a      	ldr	r3, [pc, #40]	; (8001108 <HAL_Init+0x3c>)
 80010de:	2180      	movs	r1, #128	; 0x80
 80010e0:	0049      	lsls	r1, r1, #1
 80010e2:	430a      	orrs	r2, r1
 80010e4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80010e6:	2003      	movs	r0, #3
 80010e8:	f7ff ff10 	bl	8000f0c <HAL_InitTick>
 80010ec:	1e03      	subs	r3, r0, #0
 80010ee:	d003      	beq.n	80010f8 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 80010f0:	1dfb      	adds	r3, r7, #7
 80010f2:	2201      	movs	r2, #1
 80010f4:	701a      	strb	r2, [r3, #0]
 80010f6:	e001      	b.n	80010fc <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 80010f8:	f7ff fd5a 	bl	8000bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80010fc:	1dfb      	adds	r3, r7, #7
 80010fe:	781b      	ldrb	r3, [r3, #0]
}
 8001100:	0018      	movs	r0, r3
 8001102:	46bd      	mov	sp, r7
 8001104:	b002      	add	sp, #8
 8001106:	bd80      	pop	{r7, pc}
 8001108:	40022000 	.word	0x40022000

0800110c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800110c:	b580      	push	{r7, lr}
 800110e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001110:	4b05      	ldr	r3, [pc, #20]	; (8001128 <HAL_IncTick+0x1c>)
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	001a      	movs	r2, r3
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_IncTick+0x20>)
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	18d2      	adds	r2, r2, r3
 800111c:	4b03      	ldr	r3, [pc, #12]	; (800112c <HAL_IncTick+0x20>)
 800111e:	601a      	str	r2, [r3, #0]
}
 8001120:	46c0      	nop			; (mov r8, r8)
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	46c0      	nop			; (mov r8, r8)
 8001128:	20000008 	.word	0x20000008
 800112c:	2000023c 	.word	0x2000023c

08001130 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	af00      	add	r7, sp, #0
  return uwTick;
 8001134:	4b02      	ldr	r3, [pc, #8]	; (8001140 <HAL_GetTick+0x10>)
 8001136:	681b      	ldr	r3, [r3, #0]
}
 8001138:	0018      	movs	r0, r3
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	2000023c 	.word	0x2000023c

08001144 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	4a06      	ldr	r2, [pc, #24]	; (800116c <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001152:	4013      	ands	r3, r2
 8001154:	0019      	movs	r1, r3
 8001156:	4b04      	ldr	r3, [pc, #16]	; (8001168 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001158:	687a      	ldr	r2, [r7, #4]
 800115a:	430a      	orrs	r2, r1
 800115c:	601a      	str	r2, [r3, #0]
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	40010000 	.word	0x40010000
 800116c:	fffff9ff 	.word	0xfffff9ff

08001170 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	0002      	movs	r2, r0
 8001178:	1dfb      	adds	r3, r7, #7
 800117a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800117c:	1dfb      	adds	r3, r7, #7
 800117e:	781b      	ldrb	r3, [r3, #0]
 8001180:	2b7f      	cmp	r3, #127	; 0x7f
 8001182:	d809      	bhi.n	8001198 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001184:	1dfb      	adds	r3, r7, #7
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	001a      	movs	r2, r3
 800118a:	231f      	movs	r3, #31
 800118c:	401a      	ands	r2, r3
 800118e:	4b04      	ldr	r3, [pc, #16]	; (80011a0 <__NVIC_EnableIRQ+0x30>)
 8001190:	2101      	movs	r1, #1
 8001192:	4091      	lsls	r1, r2
 8001194:	000a      	movs	r2, r1
 8001196:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001198:	46c0      	nop			; (mov r8, r8)
 800119a:	46bd      	mov	sp, r7
 800119c:	b002      	add	sp, #8
 800119e:	bd80      	pop	{r7, pc}
 80011a0:	e000e100 	.word	0xe000e100

080011a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b083      	sub	sp, #12
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	0002      	movs	r2, r0
 80011ac:	6039      	str	r1, [r7, #0]
 80011ae:	1dfb      	adds	r3, r7, #7
 80011b0:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80011b2:	1dfb      	adds	r3, r7, #7
 80011b4:	781b      	ldrb	r3, [r3, #0]
 80011b6:	2b7f      	cmp	r3, #127	; 0x7f
 80011b8:	d828      	bhi.n	800120c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011ba:	4a2f      	ldr	r2, [pc, #188]	; (8001278 <__NVIC_SetPriority+0xd4>)
 80011bc:	1dfb      	adds	r3, r7, #7
 80011be:	781b      	ldrb	r3, [r3, #0]
 80011c0:	b25b      	sxtb	r3, r3
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	33c0      	adds	r3, #192	; 0xc0
 80011c6:	009b      	lsls	r3, r3, #2
 80011c8:	589b      	ldr	r3, [r3, r2]
 80011ca:	1dfa      	adds	r2, r7, #7
 80011cc:	7812      	ldrb	r2, [r2, #0]
 80011ce:	0011      	movs	r1, r2
 80011d0:	2203      	movs	r2, #3
 80011d2:	400a      	ands	r2, r1
 80011d4:	00d2      	lsls	r2, r2, #3
 80011d6:	21ff      	movs	r1, #255	; 0xff
 80011d8:	4091      	lsls	r1, r2
 80011da:	000a      	movs	r2, r1
 80011dc:	43d2      	mvns	r2, r2
 80011de:	401a      	ands	r2, r3
 80011e0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	019b      	lsls	r3, r3, #6
 80011e6:	22ff      	movs	r2, #255	; 0xff
 80011e8:	401a      	ands	r2, r3
 80011ea:	1dfb      	adds	r3, r7, #7
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	0018      	movs	r0, r3
 80011f0:	2303      	movs	r3, #3
 80011f2:	4003      	ands	r3, r0
 80011f4:	00db      	lsls	r3, r3, #3
 80011f6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80011f8:	481f      	ldr	r0, [pc, #124]	; (8001278 <__NVIC_SetPriority+0xd4>)
 80011fa:	1dfb      	adds	r3, r7, #7
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	b25b      	sxtb	r3, r3
 8001200:	089b      	lsrs	r3, r3, #2
 8001202:	430a      	orrs	r2, r1
 8001204:	33c0      	adds	r3, #192	; 0xc0
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800120a:	e031      	b.n	8001270 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800120c:	4a1b      	ldr	r2, [pc, #108]	; (800127c <__NVIC_SetPriority+0xd8>)
 800120e:	1dfb      	adds	r3, r7, #7
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	0019      	movs	r1, r3
 8001214:	230f      	movs	r3, #15
 8001216:	400b      	ands	r3, r1
 8001218:	3b08      	subs	r3, #8
 800121a:	089b      	lsrs	r3, r3, #2
 800121c:	3306      	adds	r3, #6
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	18d3      	adds	r3, r2, r3
 8001222:	3304      	adds	r3, #4
 8001224:	681b      	ldr	r3, [r3, #0]
 8001226:	1dfa      	adds	r2, r7, #7
 8001228:	7812      	ldrb	r2, [r2, #0]
 800122a:	0011      	movs	r1, r2
 800122c:	2203      	movs	r2, #3
 800122e:	400a      	ands	r2, r1
 8001230:	00d2      	lsls	r2, r2, #3
 8001232:	21ff      	movs	r1, #255	; 0xff
 8001234:	4091      	lsls	r1, r2
 8001236:	000a      	movs	r2, r1
 8001238:	43d2      	mvns	r2, r2
 800123a:	401a      	ands	r2, r3
 800123c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	019b      	lsls	r3, r3, #6
 8001242:	22ff      	movs	r2, #255	; 0xff
 8001244:	401a      	ands	r2, r3
 8001246:	1dfb      	adds	r3, r7, #7
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	0018      	movs	r0, r3
 800124c:	2303      	movs	r3, #3
 800124e:	4003      	ands	r3, r0
 8001250:	00db      	lsls	r3, r3, #3
 8001252:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001254:	4809      	ldr	r0, [pc, #36]	; (800127c <__NVIC_SetPriority+0xd8>)
 8001256:	1dfb      	adds	r3, r7, #7
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	001c      	movs	r4, r3
 800125c:	230f      	movs	r3, #15
 800125e:	4023      	ands	r3, r4
 8001260:	3b08      	subs	r3, #8
 8001262:	089b      	lsrs	r3, r3, #2
 8001264:	430a      	orrs	r2, r1
 8001266:	3306      	adds	r3, #6
 8001268:	009b      	lsls	r3, r3, #2
 800126a:	18c3      	adds	r3, r0, r3
 800126c:	3304      	adds	r3, #4
 800126e:	601a      	str	r2, [r3, #0]
}
 8001270:	46c0      	nop			; (mov r8, r8)
 8001272:	46bd      	mov	sp, r7
 8001274:	b003      	add	sp, #12
 8001276:	bd90      	pop	{r4, r7, pc}
 8001278:	e000e100 	.word	0xe000e100
 800127c:	e000ed00 	.word	0xe000ed00

08001280 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	60b9      	str	r1, [r7, #8]
 8001288:	607a      	str	r2, [r7, #4]
 800128a:	210f      	movs	r1, #15
 800128c:	187b      	adds	r3, r7, r1
 800128e:	1c02      	adds	r2, r0, #0
 8001290:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001292:	68ba      	ldr	r2, [r7, #8]
 8001294:	187b      	adds	r3, r7, r1
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	b25b      	sxtb	r3, r3
 800129a:	0011      	movs	r1, r2
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff ff81 	bl	80011a4 <__NVIC_SetPriority>
}
 80012a2:	46c0      	nop			; (mov r8, r8)
 80012a4:	46bd      	mov	sp, r7
 80012a6:	b004      	add	sp, #16
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	0002      	movs	r2, r0
 80012b2:	1dfb      	adds	r3, r7, #7
 80012b4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	781b      	ldrb	r3, [r3, #0]
 80012ba:	b25b      	sxtb	r3, r3
 80012bc:	0018      	movs	r0, r3
 80012be:	f7ff ff57 	bl	8001170 <__NVIC_EnableIRQ>
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b002      	add	sp, #8
 80012c8:	bd80      	pop	{r7, pc}
	...

080012cc <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b082      	sub	sp, #8
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80012da:	2301      	movs	r3, #1
 80012dc:	e050      	b.n	8001380 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2225      	movs	r2, #37	; 0x25
 80012e2:	5c9b      	ldrb	r3, [r3, r2]
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d008      	beq.n	80012fc <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2204      	movs	r2, #4
 80012ee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2224      	movs	r2, #36	; 0x24
 80012f4:	2100      	movs	r1, #0
 80012f6:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80012f8:	2301      	movs	r3, #1
 80012fa:	e041      	b.n	8001380 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	210e      	movs	r1, #14
 8001308:	438a      	bics	r2, r1
 800130a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001310:	681a      	ldr	r2, [r3, #0]
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001316:	491c      	ldr	r1, [pc, #112]	; (8001388 <HAL_DMA_Abort+0xbc>)
 8001318:	400a      	ands	r2, r1
 800131a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2101      	movs	r1, #1
 8001328:	438a      	bics	r2, r1
 800132a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 800132c:	4b17      	ldr	r3, [pc, #92]	; (800138c <HAL_DMA_Abort+0xc0>)
 800132e:	6859      	ldr	r1, [r3, #4]
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001334:	221c      	movs	r2, #28
 8001336:	4013      	ands	r3, r2
 8001338:	2201      	movs	r2, #1
 800133a:	409a      	lsls	r2, r3
 800133c:	4b13      	ldr	r3, [pc, #76]	; (800138c <HAL_DMA_Abort+0xc0>)
 800133e:	430a      	orrs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001346:	687a      	ldr	r2, [r7, #4]
 8001348:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800134a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001350:	2b00      	cmp	r3, #0
 8001352:	d00c      	beq.n	800136e <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800135e:	490a      	ldr	r1, [pc, #40]	; (8001388 <HAL_DMA_Abort+0xbc>)
 8001360:	400a      	ands	r2, r1
 8001362:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001368:	687a      	ldr	r2, [r7, #4]
 800136a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800136c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2225      	movs	r2, #37	; 0x25
 8001372:	2101      	movs	r1, #1
 8001374:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2224      	movs	r2, #36	; 0x24
 800137a:	2100      	movs	r1, #0
 800137c:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 800137e:	2300      	movs	r3, #0
}
 8001380:	0018      	movs	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	b002      	add	sp, #8
 8001386:	bd80      	pop	{r7, pc}
 8001388:	fffffeff 	.word	0xfffffeff
 800138c:	40020000 	.word	0x40020000

08001390 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001398:	210f      	movs	r1, #15
 800139a:	187b      	adds	r3, r7, r1
 800139c:	2200      	movs	r2, #0
 800139e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	2225      	movs	r2, #37	; 0x25
 80013a4:	5c9b      	ldrb	r3, [r3, r2]
 80013a6:	b2db      	uxtb	r3, r3
 80013a8:	2b02      	cmp	r3, #2
 80013aa:	d006      	beq.n	80013ba <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2204      	movs	r2, #4
 80013b0:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013b2:	187b      	adds	r3, r7, r1
 80013b4:	2201      	movs	r2, #1
 80013b6:	701a      	strb	r2, [r3, #0]
 80013b8:	e049      	b.n	800144e <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	681a      	ldr	r2, [r3, #0]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	210e      	movs	r1, #14
 80013c6:	438a      	bics	r2, r1
 80013c8:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	2101      	movs	r1, #1
 80013d6:	438a      	bics	r2, r1
 80013d8:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013e4:	491d      	ldr	r1, [pc, #116]	; (800145c <HAL_DMA_Abort_IT+0xcc>)
 80013e6:	400a      	ands	r2, r1
 80013e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80013ea:	4b1d      	ldr	r3, [pc, #116]	; (8001460 <HAL_DMA_Abort_IT+0xd0>)
 80013ec:	6859      	ldr	r1, [r3, #4]
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	221c      	movs	r2, #28
 80013f4:	4013      	ands	r3, r2
 80013f6:	2201      	movs	r2, #1
 80013f8:	409a      	lsls	r2, r3
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_DMA_Abort_IT+0xd0>)
 80013fc:	430a      	orrs	r2, r1
 80013fe:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001404:	687a      	ldr	r2, [r7, #4]
 8001406:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001408:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800140e:	2b00      	cmp	r3, #0
 8001410:	d00c      	beq.n	800142c <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001416:	681a      	ldr	r2, [r3, #0]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800141c:	490f      	ldr	r1, [pc, #60]	; (800145c <HAL_DMA_Abort_IT+0xcc>)
 800141e:	400a      	ands	r2, r1
 8001420:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001426:	687a      	ldr	r2, [r7, #4]
 8001428:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800142a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	2225      	movs	r2, #37	; 0x25
 8001430:	2101      	movs	r1, #1
 8001432:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2224      	movs	r2, #36	; 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001448:	687a      	ldr	r2, [r7, #4]
 800144a:	0010      	movs	r0, r2
 800144c:	4798      	blx	r3
    }
  }
  return status;
 800144e:	230f      	movs	r3, #15
 8001450:	18fb      	adds	r3, r7, r3
 8001452:	781b      	ldrb	r3, [r3, #0]
}
 8001454:	0018      	movs	r0, r3
 8001456:	46bd      	mov	sp, r7
 8001458:	b004      	add	sp, #16
 800145a:	bd80      	pop	{r7, pc}
 800145c:	fffffeff 	.word	0xfffffeff
 8001460:	40020000 	.word	0x40020000

08001464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
 800146c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800146e:	2300      	movs	r3, #0
 8001470:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001472:	e147      	b.n	8001704 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2101      	movs	r1, #1
 800147a:	697a      	ldr	r2, [r7, #20]
 800147c:	4091      	lsls	r1, r2
 800147e:	000a      	movs	r2, r1
 8001480:	4013      	ands	r3, r2
 8001482:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	2b00      	cmp	r3, #0
 8001488:	d100      	bne.n	800148c <HAL_GPIO_Init+0x28>
 800148a:	e138      	b.n	80016fe <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	2203      	movs	r2, #3
 8001492:	4013      	ands	r3, r2
 8001494:	2b01      	cmp	r3, #1
 8001496:	d005      	beq.n	80014a4 <HAL_GPIO_Init+0x40>
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	4013      	ands	r3, r2
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d130      	bne.n	8001506 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	2203      	movs	r2, #3
 80014b0:	409a      	lsls	r2, r3
 80014b2:	0013      	movs	r3, r2
 80014b4:	43da      	mvns	r2, r3
 80014b6:	693b      	ldr	r3, [r7, #16]
 80014b8:	4013      	ands	r3, r2
 80014ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	68da      	ldr	r2, [r3, #12]
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	005b      	lsls	r3, r3, #1
 80014c4:	409a      	lsls	r2, r3
 80014c6:	0013      	movs	r3, r2
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	685b      	ldr	r3, [r3, #4]
 80014d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014da:	2201      	movs	r2, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	409a      	lsls	r2, r3
 80014e0:	0013      	movs	r3, r2
 80014e2:	43da      	mvns	r2, r3
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	4013      	ands	r3, r2
 80014e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	091b      	lsrs	r3, r3, #4
 80014f0:	2201      	movs	r2, #1
 80014f2:	401a      	ands	r2, r3
 80014f4:	697b      	ldr	r3, [r7, #20]
 80014f6:	409a      	lsls	r2, r3
 80014f8:	0013      	movs	r3, r2
 80014fa:	693a      	ldr	r2, [r7, #16]
 80014fc:	4313      	orrs	r3, r2
 80014fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	693a      	ldr	r2, [r7, #16]
 8001504:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	2203      	movs	r2, #3
 800150c:	4013      	ands	r3, r2
 800150e:	2b03      	cmp	r3, #3
 8001510:	d017      	beq.n	8001542 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	68db      	ldr	r3, [r3, #12]
 8001516:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001518:	697b      	ldr	r3, [r7, #20]
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	2203      	movs	r2, #3
 800151e:	409a      	lsls	r2, r3
 8001520:	0013      	movs	r3, r2
 8001522:	43da      	mvns	r2, r3
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	4013      	ands	r3, r2
 8001528:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	689a      	ldr	r2, [r3, #8]
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	005b      	lsls	r3, r3, #1
 8001532:	409a      	lsls	r2, r3
 8001534:	0013      	movs	r3, r2
 8001536:	693a      	ldr	r2, [r7, #16]
 8001538:	4313      	orrs	r3, r2
 800153a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	2203      	movs	r2, #3
 8001548:	4013      	ands	r3, r2
 800154a:	2b02      	cmp	r3, #2
 800154c:	d123      	bne.n	8001596 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	08da      	lsrs	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3208      	adds	r2, #8
 8001556:	0092      	lsls	r2, r2, #2
 8001558:	58d3      	ldr	r3, [r2, r3]
 800155a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	2207      	movs	r2, #7
 8001560:	4013      	ands	r3, r2
 8001562:	009b      	lsls	r3, r3, #2
 8001564:	220f      	movs	r2, #15
 8001566:	409a      	lsls	r2, r3
 8001568:	0013      	movs	r3, r2
 800156a:	43da      	mvns	r2, r3
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	4013      	ands	r3, r2
 8001570:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	691a      	ldr	r2, [r3, #16]
 8001576:	697b      	ldr	r3, [r7, #20]
 8001578:	2107      	movs	r1, #7
 800157a:	400b      	ands	r3, r1
 800157c:	009b      	lsls	r3, r3, #2
 800157e:	409a      	lsls	r2, r3
 8001580:	0013      	movs	r3, r2
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4313      	orrs	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	08da      	lsrs	r2, r3, #3
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3208      	adds	r2, #8
 8001590:	0092      	lsls	r2, r2, #2
 8001592:	6939      	ldr	r1, [r7, #16]
 8001594:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	005b      	lsls	r3, r3, #1
 80015a0:	2203      	movs	r2, #3
 80015a2:	409a      	lsls	r2, r3
 80015a4:	0013      	movs	r3, r2
 80015a6:	43da      	mvns	r2, r3
 80015a8:	693b      	ldr	r3, [r7, #16]
 80015aa:	4013      	ands	r3, r2
 80015ac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	2203      	movs	r2, #3
 80015b4:	401a      	ands	r2, r3
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	005b      	lsls	r3, r3, #1
 80015ba:	409a      	lsls	r2, r3
 80015bc:	0013      	movs	r3, r2
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	4313      	orrs	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685a      	ldr	r2, [r3, #4]
 80015ce:	23c0      	movs	r3, #192	; 0xc0
 80015d0:	029b      	lsls	r3, r3, #10
 80015d2:	4013      	ands	r3, r2
 80015d4:	d100      	bne.n	80015d8 <HAL_GPIO_Init+0x174>
 80015d6:	e092      	b.n	80016fe <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 80015d8:	4a50      	ldr	r2, [pc, #320]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3318      	adds	r3, #24
 80015e0:	009b      	lsls	r3, r3, #2
 80015e2:	589b      	ldr	r3, [r3, r2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	2203      	movs	r2, #3
 80015ea:	4013      	ands	r3, r2
 80015ec:	00db      	lsls	r3, r3, #3
 80015ee:	220f      	movs	r2, #15
 80015f0:	409a      	lsls	r2, r3
 80015f2:	0013      	movs	r3, r2
 80015f4:	43da      	mvns	r2, r3
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80015fc:	687a      	ldr	r2, [r7, #4]
 80015fe:	23a0      	movs	r3, #160	; 0xa0
 8001600:	05db      	lsls	r3, r3, #23
 8001602:	429a      	cmp	r2, r3
 8001604:	d013      	beq.n	800162e <HAL_GPIO_Init+0x1ca>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	4a45      	ldr	r2, [pc, #276]	; (8001720 <HAL_GPIO_Init+0x2bc>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d00d      	beq.n	800162a <HAL_GPIO_Init+0x1c6>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4a44      	ldr	r2, [pc, #272]	; (8001724 <HAL_GPIO_Init+0x2c0>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d007      	beq.n	8001626 <HAL_GPIO_Init+0x1c2>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	4a43      	ldr	r2, [pc, #268]	; (8001728 <HAL_GPIO_Init+0x2c4>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d101      	bne.n	8001622 <HAL_GPIO_Init+0x1be>
 800161e:	2303      	movs	r3, #3
 8001620:	e006      	b.n	8001630 <HAL_GPIO_Init+0x1cc>
 8001622:	2305      	movs	r3, #5
 8001624:	e004      	b.n	8001630 <HAL_GPIO_Init+0x1cc>
 8001626:	2302      	movs	r3, #2
 8001628:	e002      	b.n	8001630 <HAL_GPIO_Init+0x1cc>
 800162a:	2301      	movs	r3, #1
 800162c:	e000      	b.n	8001630 <HAL_GPIO_Init+0x1cc>
 800162e:	2300      	movs	r3, #0
 8001630:	697a      	ldr	r2, [r7, #20]
 8001632:	2103      	movs	r1, #3
 8001634:	400a      	ands	r2, r1
 8001636:	00d2      	lsls	r2, r2, #3
 8001638:	4093      	lsls	r3, r2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4313      	orrs	r3, r2
 800163e:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001640:	4936      	ldr	r1, [pc, #216]	; (800171c <HAL_GPIO_Init+0x2b8>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	089b      	lsrs	r3, r3, #2
 8001646:	3318      	adds	r3, #24
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800164e:	4b33      	ldr	r3, [pc, #204]	; (800171c <HAL_GPIO_Init+0x2b8>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	685a      	ldr	r2, [r3, #4]
 8001662:	2380      	movs	r3, #128	; 0x80
 8001664:	035b      	lsls	r3, r3, #13
 8001666:	4013      	ands	r3, r2
 8001668:	d003      	beq.n	8001672 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	4313      	orrs	r3, r2
 8001670:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001672:	4b2a      	ldr	r3, [pc, #168]	; (800171c <HAL_GPIO_Init+0x2b8>)
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <HAL_GPIO_Init+0x2b8>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	43da      	mvns	r2, r3
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	4013      	ands	r3, r2
 8001686:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001688:	683b      	ldr	r3, [r7, #0]
 800168a:	685a      	ldr	r2, [r3, #4]
 800168c:	2380      	movs	r3, #128	; 0x80
 800168e:	039b      	lsls	r3, r3, #14
 8001690:	4013      	ands	r3, r2
 8001692:	d003      	beq.n	800169c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8001694:	693a      	ldr	r2, [r7, #16]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	4313      	orrs	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800169c:	4b1f      	ldr	r3, [pc, #124]	; (800171c <HAL_GPIO_Init+0x2b8>)
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80016a2:	4a1e      	ldr	r2, [pc, #120]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80016a4:	2384      	movs	r3, #132	; 0x84
 80016a6:	58d3      	ldr	r3, [r2, r3]
 80016a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	43da      	mvns	r2, r3
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	4013      	ands	r3, r2
 80016b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016b4:	683b      	ldr	r3, [r7, #0]
 80016b6:	685a      	ldr	r2, [r3, #4]
 80016b8:	2380      	movs	r3, #128	; 0x80
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	4013      	ands	r3, r2
 80016be:	d003      	beq.n	80016c8 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80016c0:	693a      	ldr	r2, [r7, #16]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016c8:	4914      	ldr	r1, [pc, #80]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80016ca:	2284      	movs	r2, #132	; 0x84
 80016cc:	693b      	ldr	r3, [r7, #16]
 80016ce:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 80016d0:	4a12      	ldr	r2, [pc, #72]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80016d2:	2380      	movs	r3, #128	; 0x80
 80016d4:	58d3      	ldr	r3, [r2, r3]
 80016d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685a      	ldr	r2, [r3, #4]
 80016e6:	2380      	movs	r3, #128	; 0x80
 80016e8:	025b      	lsls	r3, r3, #9
 80016ea:	4013      	ands	r3, r2
 80016ec:	d003      	beq.n	80016f6 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 80016ee:	693a      	ldr	r2, [r7, #16]
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016f6:	4909      	ldr	r1, [pc, #36]	; (800171c <HAL_GPIO_Init+0x2b8>)
 80016f8:	2280      	movs	r2, #128	; 0x80
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	40da      	lsrs	r2, r3
 800170c:	1e13      	subs	r3, r2, #0
 800170e:	d000      	beq.n	8001712 <HAL_GPIO_Init+0x2ae>
 8001710:	e6b0      	b.n	8001474 <HAL_GPIO_Init+0x10>
  }
}
 8001712:	46c0      	nop			; (mov r8, r8)
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	b006      	add	sp, #24
 800171a:	bd80      	pop	{r7, pc}
 800171c:	40021800 	.word	0x40021800
 8001720:	50000400 	.word	0x50000400
 8001724:	50000800 	.word	0x50000800
 8001728:	50000c00 	.word	0x50000c00

0800172c <HAL_IRDA_Init>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IRDA_Init(IRDA_HandleTypeDef *hirda)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  /* Check the IRDA handle allocation */
  if (hirda == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_IRDA_Init+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e044      	b.n	80017c8 <HAL_IRDA_Init+0x9c>
  }

  /* Check the USART/UART associated to the IRDA handle */
  assert_param(IS_IRDA_INSTANCE(hirda->Instance));

  if (hirda->gState == HAL_IRDA_STATE_RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001742:	2b00      	cmp	r3, #0
 8001744:	d107      	bne.n	8001756 <HAL_IRDA_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hirda->Lock = HAL_UNLOCKED;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2238      	movs	r2, #56	; 0x38
 800174a:	2100      	movs	r1, #0
 800174c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hirda->MspInitCallback(hirda);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_IRDA_MspInit(hirda);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	0018      	movs	r0, r3
 8001752:	f7ff fb09 	bl	8000d68 <HAL_IRDA_MspInit>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACKS */
  }

  hirda->gState = HAL_IRDA_STATE_BUSY;
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2224      	movs	r2, #36	; 0x24
 800175a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable the Peripheral to update the configuration registers */
  __HAL_IRDA_DISABLE(hirda);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	681a      	ldr	r2, [r3, #0]
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	2101      	movs	r1, #1
 8001768:	438a      	bics	r2, r1
 800176a:	601a      	str	r2, [r3, #0]

  /* Set the IRDA Communication parameters */
  if (IRDA_SetConfig(hirda) == HAL_ERROR)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	0018      	movs	r0, r3
 8001770:	f000 f944 	bl	80019fc <IRDA_SetConfig>
 8001774:	0003      	movs	r3, r0
 8001776:	2b01      	cmp	r3, #1
 8001778:	d101      	bne.n	800177e <HAL_IRDA_Init+0x52>
  {
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	e024      	b.n	80017c8 <HAL_IRDA_Init+0x9c>
  }

  /* In IRDA mode, the following bits must be kept cleared:
  - LINEN, STOP and CLKEN bits in the USART_CR2 register,
  - SCEN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(hirda->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN | USART_CR2_STOP));
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	685a      	ldr	r2, [r3, #4]
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4911      	ldr	r1, [pc, #68]	; (80017d0 <HAL_IRDA_Init+0xa4>)
 800178a:	400a      	ands	r2, r1
 800178c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(hirda->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL));
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	689a      	ldr	r2, [r3, #8]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2128      	movs	r1, #40	; 0x28
 800179a:	438a      	bics	r2, r1
 800179c:	609a      	str	r2, [r3, #8]

  /* set the UART/USART in IRDA mode */
  hirda->Instance->CR3 |= USART_CR3_IREN;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	689a      	ldr	r2, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2102      	movs	r1, #2
 80017aa:	430a      	orrs	r2, r1
 80017ac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_IRDA_ENABLE(hirda);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681a      	ldr	r2, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2101      	movs	r1, #1
 80017ba:	430a      	orrs	r2, r1
 80017bc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving hirda->gState and hirda->RxState to Ready */
  return (IRDA_CheckIdleState(hirda));
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	0018      	movs	r0, r3
 80017c2:	f000 fa61 	bl	8001c88 <IRDA_CheckIdleState>
 80017c6:	0003      	movs	r3, r0
}
 80017c8:	0018      	movs	r0, r3
 80017ca:	46bd      	mov	sp, r7
 80017cc:	b002      	add	sp, #8
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	ffff87ff 	.word	0xffff87ff

080017d4 <HAL_IRDA_IRQHandler>:
  * @param hirda  Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
void HAL_IRDA_IRQHandler(IRDA_HandleTypeDef *hirda)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b088      	sub	sp, #32
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(hirda->Instance->ISR);
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	69db      	ldr	r3, [r3, #28]
 80017e2:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(hirda->Instance->CR1);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its;
  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE));
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	220f      	movs	r2, #15
 80017f0:	4013      	ands	r3, r2
 80017f2:	617b      	str	r3, [r7, #20]
  if (errorflags == 0U)
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d10c      	bne.n	8001814 <HAL_IRDA_IRQHandler+0x40>
  {
    /* IRDA in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	2220      	movs	r2, #32
 80017fe:	4013      	ands	r3, r2
 8001800:	d008      	beq.n	8001814 <HAL_IRDA_IRQHandler+0x40>
 8001802:	69bb      	ldr	r3, [r7, #24]
 8001804:	2220      	movs	r2, #32
 8001806:	4013      	ands	r3, r2
 8001808:	d004      	beq.n	8001814 <HAL_IRDA_IRQHandler+0x40>
    {
      IRDA_Receive_IT(hirda);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	0018      	movs	r0, r3
 800180e:	f000 fb65 	bl	8001edc <IRDA_Receive_IT>
      return;
 8001812:	e0d6      	b.n	80019c2 <HAL_IRDA_IRQHandler+0x1ee>
    }
  }

  /* If some errors occur */
  cr3its = READ_REG(hirda->Instance->CR3);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	613b      	str	r3, [r7, #16]
  if ((errorflags != 0U)
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	2b00      	cmp	r3, #0
 8001820:	d100      	bne.n	8001824 <HAL_IRDA_IRQHandler+0x50>
 8001822:	e0b3      	b.n	800198c <HAL_IRDA_IRQHandler+0x1b8>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8001824:	693b      	ldr	r3, [r7, #16]
 8001826:	2201      	movs	r2, #1
 8001828:	4013      	ands	r3, r2
 800182a:	d105      	bne.n	8001838 <HAL_IRDA_IRQHandler+0x64>
          || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE)) != 0U)))
 800182c:	69ba      	ldr	r2, [r7, #24]
 800182e:	2390      	movs	r3, #144	; 0x90
 8001830:	005b      	lsls	r3, r3, #1
 8001832:	4013      	ands	r3, r2
 8001834:	d100      	bne.n	8001838 <HAL_IRDA_IRQHandler+0x64>
 8001836:	e0a9      	b.n	800198c <HAL_IRDA_IRQHandler+0x1b8>
  {
    /* IRDA parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	2201      	movs	r2, #1
 800183c:	4013      	ands	r3, r2
 800183e:	d00e      	beq.n	800185e <HAL_IRDA_IRQHandler+0x8a>
 8001840:	69ba      	ldr	r2, [r7, #24]
 8001842:	2380      	movs	r3, #128	; 0x80
 8001844:	005b      	lsls	r3, r3, #1
 8001846:	4013      	ands	r3, r2
 8001848:	d009      	beq.n	800185e <HAL_IRDA_IRQHandler+0x8a>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_PEF);
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	2201      	movs	r2, #1
 8001850:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_PE;
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	2201      	movs	r2, #1
 8001858:	431a      	orrs	r2, r3
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800185e:	69fb      	ldr	r3, [r7, #28]
 8001860:	2202      	movs	r2, #2
 8001862:	4013      	ands	r3, r2
 8001864:	d00d      	beq.n	8001882 <HAL_IRDA_IRQHandler+0xae>
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	2201      	movs	r2, #1
 800186a:	4013      	ands	r3, r2
 800186c:	d009      	beq.n	8001882 <HAL_IRDA_IRQHandler+0xae>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_FEF);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2202      	movs	r2, #2
 8001874:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_FE;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	2204      	movs	r2, #4
 800187c:	431a      	orrs	r2, r3
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	2204      	movs	r2, #4
 8001886:	4013      	ands	r3, r2
 8001888:	d00d      	beq.n	80018a6 <HAL_IRDA_IRQHandler+0xd2>
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	2201      	movs	r2, #1
 800188e:	4013      	ands	r3, r2
 8001890:	d009      	beq.n	80018a6 <HAL_IRDA_IRQHandler+0xd2>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_NEF);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	2204      	movs	r2, #4
 8001898:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_NE;
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800189e:	2202      	movs	r2, #2
 80018a0:	431a      	orrs	r2, r3
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* IRDA Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 80018a6:	69fb      	ldr	r3, [r7, #28]
 80018a8:	2208      	movs	r2, #8
 80018aa:	4013      	ands	r3, r2
 80018ac:	d011      	beq.n	80018d2 <HAL_IRDA_IRQHandler+0xfe>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 80018ae:	69bb      	ldr	r3, [r7, #24]
 80018b0:	2220      	movs	r2, #32
 80018b2:	4013      	ands	r3, r2
    if (((isrflags & USART_ISR_ORE) != 0U) &&
 80018b4:	d103      	bne.n	80018be <HAL_IRDA_IRQHandler+0xea>
        (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) || ((cr3its & USART_CR3_EIE) != 0U)))
 80018b6:	693b      	ldr	r3, [r7, #16]
 80018b8:	2201      	movs	r2, #1
 80018ba:	4013      	ands	r3, r2
 80018bc:	d009      	beq.n	80018d2 <HAL_IRDA_IRQHandler+0xfe>
    {
      __HAL_IRDA_CLEAR_IT(hirda, IRDA_CLEAR_OREF);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	2208      	movs	r2, #8
 80018c4:	621a      	str	r2, [r3, #32]

      hirda->ErrorCode |= HAL_IRDA_ERROR_ORE;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018ca:	2208      	movs	r2, #8
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call IRDA Error Call back function if need be --------------------------*/
    if (hirda->ErrorCode != HAL_IRDA_ERROR_NONE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d100      	bne.n	80018dc <HAL_IRDA_IRQHandler+0x108>
 80018da:	e071      	b.n	80019c0 <HAL_IRDA_IRQHandler+0x1ec>
    {
      /* IRDA in mode Receiver ---------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U) && ((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U))
 80018dc:	69fb      	ldr	r3, [r7, #28]
 80018de:	2220      	movs	r2, #32
 80018e0:	4013      	ands	r3, r2
 80018e2:	d007      	beq.n	80018f4 <HAL_IRDA_IRQHandler+0x120>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	2220      	movs	r2, #32
 80018e8:	4013      	ands	r3, r2
 80018ea:	d003      	beq.n	80018f4 <HAL_IRDA_IRQHandler+0x120>
      {
        IRDA_Receive_IT(hirda);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	0018      	movs	r0, r3
 80018f0:	f000 faf4 	bl	8001edc <IRDA_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      errorcode = hirda->ErrorCode;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f8:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	2240      	movs	r2, #64	; 0x40
 8001902:	4013      	ands	r3, r2
 8001904:	2b40      	cmp	r3, #64	; 0x40
 8001906:	d003      	beq.n	8001910 <HAL_IRDA_IRQHandler+0x13c>
          ((errorcode & HAL_IRDA_ERROR_ORE) != 0U))
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	2208      	movs	r2, #8
 800190c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR)) ||
 800190e:	d033      	beq.n	8001978 <HAL_IRDA_IRQHandler+0x1a4>
      {
        /* Blocking error : transfer is aborted
           Set the IRDA state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        IRDA_EndRxTransfer(hirda);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	0018      	movs	r0, r3
 8001914:	f000 fa48 	bl	8001da8 <IRDA_EndRxTransfer>

        /* Disable the IRDA DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	2240      	movs	r2, #64	; 0x40
 8001920:	4013      	ands	r3, r2
 8001922:	2b40      	cmp	r3, #64	; 0x40
 8001924:	d123      	bne.n	800196e <HAL_IRDA_IRQHandler+0x19a>
        {
          CLEAR_BIT(hirda->Instance->CR3, USART_CR3_DMAR);
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	689a      	ldr	r2, [r3, #8]
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	2140      	movs	r1, #64	; 0x40
 8001932:	438a      	bics	r2, r1
 8001934:	609a      	str	r2, [r3, #8]

          /* Abort the IRDA DMA Rx channel */
          if (hirda->hdmarx != NULL)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800193a:	2b00      	cmp	r3, #0
 800193c:	d012      	beq.n	8001964 <HAL_IRDA_IRQHandler+0x190>
          {
            /* Set the IRDA DMA Abort callback :
               will lead to call HAL_IRDA_ErrorCallback() at end of DMA abort procedure */
            hirda->hdmarx->XferAbortCallback = IRDA_DMAAbortOnError;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001942:	4a21      	ldr	r2, [pc, #132]	; (80019c8 <HAL_IRDA_IRQHandler+0x1f4>)
 8001944:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(hirda->hdmarx) != HAL_OK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff fd20 	bl	8001390 <HAL_DMA_Abort_IT>
 8001950:	1e03      	subs	r3, r0, #0
 8001952:	d019      	beq.n	8001988 <HAL_IRDA_IRQHandler+0x1b4>
            {
              /* Call Directly hirda->hdmarx->XferAbortCallback function in case of error */
              hirda->hdmarx->XferAbortCallback(hirda->hdmarx);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001958:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800195e:	0018      	movs	r0, r3
 8001960:	4790      	blx	r2
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8001962:	e011      	b.n	8001988 <HAL_IRDA_IRQHandler+0x1b4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
            /* Call registered user error callback */
            hirda->ErrorCallback(hirda);
#else
            /* Call legacy weak user error callback */
            HAL_IRDA_ErrorCallback(hirda);
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	0018      	movs	r0, r3
 8001968:	f000 f840 	bl	80019ec <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 800196c:	e00c      	b.n	8001988 <HAL_IRDA_IRQHandler+0x1b4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
          /* Call registered user error callback */
          hirda->ErrorCallback(hirda);
#else
          /* Call legacy weak user error callback */
          HAL_IRDA_ErrorCallback(hirda);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	0018      	movs	r0, r3
 8001972:	f000 f83b 	bl	80019ec <HAL_IRDA_ErrorCallback>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8001976:	e007      	b.n	8001988 <HAL_IRDA_IRQHandler+0x1b4>
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
        /* Call registered user error callback */
        hirda->ErrorCallback(hirda);
#else
        /* Call legacy weak user error callback */
        HAL_IRDA_ErrorCallback(hirda);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	0018      	movs	r0, r3
 800197c:	f000 f836 	bl	80019ec <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
        hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2200      	movs	r2, #0
 8001984:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8001986:	e01b      	b.n	80019c0 <HAL_IRDA_IRQHandler+0x1ec>
        if (HAL_IS_BIT_SET(hirda->Instance->CR3, USART_CR3_DMAR))
 8001988:	46c0      	nop			; (mov r8, r8)
    return;
 800198a:	e019      	b.n	80019c0 <HAL_IRDA_IRQHandler+0x1ec>

  } /* End if some error occurs */

  /* IRDA in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U) && ((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U))
 800198c:	69fb      	ldr	r3, [r7, #28]
 800198e:	2280      	movs	r2, #128	; 0x80
 8001990:	4013      	ands	r3, r2
 8001992:	d008      	beq.n	80019a6 <HAL_IRDA_IRQHandler+0x1d2>
 8001994:	69bb      	ldr	r3, [r7, #24]
 8001996:	2280      	movs	r2, #128	; 0x80
 8001998:	4013      	ands	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_IRDA_IRQHandler+0x1d2>
  {
    IRDA_Transmit_IT(hirda);
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	0018      	movs	r0, r3
 80019a0:	f000 fa35 	bl	8001e0e <IRDA_Transmit_IT>
    return;
 80019a4:	e00d      	b.n	80019c2 <HAL_IRDA_IRQHandler+0x1ee>
  }

  /* IRDA in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	2240      	movs	r2, #64	; 0x40
 80019aa:	4013      	ands	r3, r2
 80019ac:	d009      	beq.n	80019c2 <HAL_IRDA_IRQHandler+0x1ee>
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	2240      	movs	r2, #64	; 0x40
 80019b2:	4013      	ands	r3, r2
 80019b4:	d005      	beq.n	80019c2 <HAL_IRDA_IRQHandler+0x1ee>
  {
    IRDA_EndTransmit_IT(hirda);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	0018      	movs	r0, r3
 80019ba:	f000 fa77 	bl	8001eac <IRDA_EndTransmit_IT>
    return;
 80019be:	e000      	b.n	80019c2 <HAL_IRDA_IRQHandler+0x1ee>
    return;
 80019c0:	46c0      	nop			; (mov r8, r8)
  }

}
 80019c2:	46bd      	mov	sp, r7
 80019c4:	b008      	add	sp, #32
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	08001de5 	.word	0x08001de5

080019cc <HAL_IRDA_TxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_TxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	b082      	sub	sp, #8
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_TxCpltCallback can be implemented in the user file.
   */
}
 80019d4:	46c0      	nop			; (mov r8, r8)
 80019d6:	46bd      	mov	sp, r7
 80019d8:	b002      	add	sp, #8
 80019da:	bd80      	pop	{r7, pc}

080019dc <HAL_IRDA_RxCpltCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_RxCpltCallback(IRDA_HandleTypeDef *hirda)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_RxCpltCallback can be implemented in the user file.
   */
}
 80019e4:	46c0      	nop			; (mov r8, r8)
 80019e6:	46bd      	mov	sp, r7
 80019e8:	b002      	add	sp, #8
 80019ea:	bd80      	pop	{r7, pc}

080019ec <HAL_IRDA_ErrorCallback>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
__weak void HAL_IRDA_ErrorCallback(IRDA_HandleTypeDef *hirda)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  UNUSED(hirda);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_IRDA_ErrorCallback can be implemented in the user file.
   */
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	b002      	add	sp, #8
 80019fa:	bd80      	pop	{r7, pc}

080019fc <IRDA_SetConfig>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_SetConfig(IRDA_HandleTypeDef *hirda)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  IRDA_ClockSourceTypeDef clocksource;
  HAL_StatusTypeDef ret = HAL_OK;
 8001a04:	2312      	movs	r3, #18
 8001a06:	18fb      	adds	r3, r7, r3
 8001a08:	2200      	movs	r2, #0
 8001a0a:	701a      	strb	r2, [r3, #0]
  /*-------------------------- USART CR1 Configuration -----------------------*/
  /* Configure the IRDA Word Length, Parity and transfer Mode:
     Set the M bits according to hirda->Init.WordLength value
     Set PCE and PS bits according to hirda->Init.Parity value
     Set TE and RE bits according to hirda->Init.Mode value */
  tmpreg = (uint32_t)hirda->Init.WordLength | hirda->Init.Parity | hirda->Init.Mode ;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	689a      	ldr	r2, [r3, #8]
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	431a      	orrs	r2, r3
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	691b      	ldr	r3, [r3, #16]
 8001a1a:	4313      	orrs	r3, r2
 8001a1c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(hirda->Instance->CR1, IRDA_CR1_FIELDS, tmpreg);
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a92      	ldr	r2, [pc, #584]	; (8001c70 <IRDA_SetConfig+0x274>)
 8001a26:	4013      	ands	r3, r2
 8001a28:	0019      	movs	r1, r3
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	697a      	ldr	r2, [r7, #20]
 8001a30:	430a      	orrs	r2, r1
 8001a32:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  MODIFY_REG(hirda->Instance->CR3, USART_CR3_IRLP, hirda->Init.PowerMode);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	2204      	movs	r2, #4
 8001a3c:	4393      	bics	r3, r2
 8001a3e:	001a      	movs	r2, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	8adb      	ldrh	r3, [r3, #22]
 8001a44:	0019      	movs	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	430a      	orrs	r2, r1
 8001a4c:	609a      	str	r2, [r3, #8]

  /*--------------------- USART clock PRESC Configuration ----------------*/
  /* Configure
  * - IRDA Clock Prescaler: set PRESCALER according to hirda->Init.ClockPrescaler value */
  MODIFY_REG(hirda->Instance->PRESC, USART_PRESC_PRESCALER, hirda->Init.ClockPrescaler);
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a54:	220f      	movs	r2, #15
 8001a56:	4393      	bics	r3, r2
 8001a58:	0019      	movs	r1, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	699a      	ldr	r2, [r3, #24]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	430a      	orrs	r2, r1
 8001a64:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART GTPR Configuration ----------------------*/
  MODIFY_REG(hirda->Instance->GTPR, (uint16_t)USART_GTPR_PSC, (uint16_t)hirda->Init.Prescaler);
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	22ff      	movs	r2, #255	; 0xff
 8001a6e:	4393      	bics	r3, r2
 8001a70:	001a      	movs	r2, r3
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	7d1b      	ldrb	r3, [r3, #20]
 8001a76:	0019      	movs	r1, r3
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	611a      	str	r2, [r3, #16]

  /*-------------------------- USART BRR Configuration -----------------------*/
  IRDA_GETCLOCKSOURCE(hirda, clocksource);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a7b      	ldr	r2, [pc, #492]	; (8001c74 <IRDA_SetConfig+0x278>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d127      	bne.n	8001ada <IRDA_SetConfig+0xde>
 8001a8a:	4b7b      	ldr	r3, [pc, #492]	; (8001c78 <IRDA_SetConfig+0x27c>)
 8001a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a8e:	2203      	movs	r2, #3
 8001a90:	4013      	ands	r3, r2
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d017      	beq.n	8001ac6 <IRDA_SetConfig+0xca>
 8001a96:	d81b      	bhi.n	8001ad0 <IRDA_SetConfig+0xd4>
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d00a      	beq.n	8001ab2 <IRDA_SetConfig+0xb6>
 8001a9c:	d818      	bhi.n	8001ad0 <IRDA_SetConfig+0xd4>
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <IRDA_SetConfig+0xac>
 8001aa2:	2b01      	cmp	r3, #1
 8001aa4:	d00a      	beq.n	8001abc <IRDA_SetConfig+0xc0>
 8001aa6:	e013      	b.n	8001ad0 <IRDA_SetConfig+0xd4>
 8001aa8:	2313      	movs	r3, #19
 8001aaa:	18fb      	adds	r3, r7, r3
 8001aac:	2200      	movs	r2, #0
 8001aae:	701a      	strb	r2, [r3, #0]
 8001ab0:	e044      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001ab2:	2313      	movs	r3, #19
 8001ab4:	18fb      	adds	r3, r7, r3
 8001ab6:	2202      	movs	r2, #2
 8001ab8:	701a      	strb	r2, [r3, #0]
 8001aba:	e03f      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001abc:	2313      	movs	r3, #19
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2204      	movs	r2, #4
 8001ac2:	701a      	strb	r2, [r3, #0]
 8001ac4:	e03a      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001ac6:	2313      	movs	r3, #19
 8001ac8:	18fb      	adds	r3, r7, r3
 8001aca:	2210      	movs	r2, #16
 8001acc:	701a      	strb	r2, [r3, #0]
 8001ace:	e035      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001ad0:	2313      	movs	r3, #19
 8001ad2:	18fb      	adds	r3, r7, r3
 8001ad4:	2220      	movs	r2, #32
 8001ad6:	701a      	strb	r2, [r3, #0]
 8001ad8:	e030      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	4a67      	ldr	r2, [pc, #412]	; (8001c7c <IRDA_SetConfig+0x280>)
 8001ae0:	4293      	cmp	r3, r2
 8001ae2:	d127      	bne.n	8001b34 <IRDA_SetConfig+0x138>
 8001ae4:	4b64      	ldr	r3, [pc, #400]	; (8001c78 <IRDA_SetConfig+0x27c>)
 8001ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae8:	220c      	movs	r2, #12
 8001aea:	4013      	ands	r3, r2
 8001aec:	2b0c      	cmp	r3, #12
 8001aee:	d017      	beq.n	8001b20 <IRDA_SetConfig+0x124>
 8001af0:	d81b      	bhi.n	8001b2a <IRDA_SetConfig+0x12e>
 8001af2:	2b08      	cmp	r3, #8
 8001af4:	d00a      	beq.n	8001b0c <IRDA_SetConfig+0x110>
 8001af6:	d818      	bhi.n	8001b2a <IRDA_SetConfig+0x12e>
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d002      	beq.n	8001b02 <IRDA_SetConfig+0x106>
 8001afc:	2b04      	cmp	r3, #4
 8001afe:	d00a      	beq.n	8001b16 <IRDA_SetConfig+0x11a>
 8001b00:	e013      	b.n	8001b2a <IRDA_SetConfig+0x12e>
 8001b02:	2313      	movs	r3, #19
 8001b04:	18fb      	adds	r3, r7, r3
 8001b06:	2200      	movs	r2, #0
 8001b08:	701a      	strb	r2, [r3, #0]
 8001b0a:	e017      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001b0c:	2313      	movs	r3, #19
 8001b0e:	18fb      	adds	r3, r7, r3
 8001b10:	2202      	movs	r2, #2
 8001b12:	701a      	strb	r2, [r3, #0]
 8001b14:	e012      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001b16:	2313      	movs	r3, #19
 8001b18:	18fb      	adds	r3, r7, r3
 8001b1a:	2204      	movs	r2, #4
 8001b1c:	701a      	strb	r2, [r3, #0]
 8001b1e:	e00d      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001b20:	2313      	movs	r3, #19
 8001b22:	18fb      	adds	r3, r7, r3
 8001b24:	2210      	movs	r2, #16
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e008      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001b2a:	2313      	movs	r3, #19
 8001b2c:	18fb      	adds	r3, r7, r3
 8001b2e:	2220      	movs	r2, #32
 8001b30:	701a      	strb	r2, [r3, #0]
 8001b32:	e003      	b.n	8001b3c <IRDA_SetConfig+0x140>
 8001b34:	2313      	movs	r3, #19
 8001b36:	18fb      	adds	r3, r7, r3
 8001b38:	2220      	movs	r2, #32
 8001b3a:	701a      	strb	r2, [r3, #0]
  tmpreg =   0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	617b      	str	r3, [r7, #20]
  switch (clocksource)
 8001b40:	2313      	movs	r3, #19
 8001b42:	18fb      	adds	r3, r7, r3
 8001b44:	781b      	ldrb	r3, [r3, #0]
 8001b46:	2b10      	cmp	r3, #16
 8001b48:	d059      	beq.n	8001bfe <IRDA_SetConfig+0x202>
 8001b4a:	dd00      	ble.n	8001b4e <IRDA_SetConfig+0x152>
 8001b4c:	e071      	b.n	8001c32 <IRDA_SetConfig+0x236>
 8001b4e:	2b04      	cmp	r3, #4
 8001b50:	d039      	beq.n	8001bc6 <IRDA_SetConfig+0x1ca>
 8001b52:	dc6e      	bgt.n	8001c32 <IRDA_SetConfig+0x236>
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d002      	beq.n	8001b5e <IRDA_SetConfig+0x162>
 8001b58:	2b02      	cmp	r3, #2
 8001b5a:	d01c      	beq.n	8001b96 <IRDA_SetConfig+0x19a>
 8001b5c:	e069      	b.n	8001c32 <IRDA_SetConfig+0x236>
  {
    case IRDA_CLOCKSOURCE_PCLK1:
      pclk = HAL_RCC_GetPCLK1Freq();
 8001b5e:	f000 ff37 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8001b62:	0003      	movs	r3, r0
 8001b64:	60fb      	str	r3, [r7, #12]
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	699a      	ldr	r2, [r3, #24]
 8001b6a:	4b45      	ldr	r3, [pc, #276]	; (8001c80 <IRDA_SetConfig+0x284>)
 8001b6c:	0052      	lsls	r2, r2, #1
 8001b6e:	5ad3      	ldrh	r3, [r2, r3]
 8001b70:	0019      	movs	r1, r3
 8001b72:	68f8      	ldr	r0, [r7, #12]
 8001b74:	f7fe fac8 	bl	8000108 <__udivsi3>
 8001b78:	0003      	movs	r3, r0
 8001b7a:	001a      	movs	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	085b      	lsrs	r3, r3, #1
 8001b82:	18d2      	adds	r2, r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	0019      	movs	r1, r3
 8001b8a:	0010      	movs	r0, r2
 8001b8c:	f7fe fabc 	bl	8000108 <__udivsi3>
 8001b90:	0003      	movs	r3, r0
 8001b92:	617b      	str	r3, [r7, #20]
      break;
 8001b94:	e052      	b.n	8001c3c <IRDA_SetConfig+0x240>
    case IRDA_CLOCKSOURCE_HSI:
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(HSI_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	4b39      	ldr	r3, [pc, #228]	; (8001c80 <IRDA_SetConfig+0x284>)
 8001b9c:	0052      	lsls	r2, r2, #1
 8001b9e:	5ad3      	ldrh	r3, [r2, r3]
 8001ba0:	0019      	movs	r1, r3
 8001ba2:	4838      	ldr	r0, [pc, #224]	; (8001c84 <IRDA_SetConfig+0x288>)
 8001ba4:	f7fe fab0 	bl	8000108 <__udivsi3>
 8001ba8:	0003      	movs	r3, r0
 8001baa:	001a      	movs	r2, r3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	685b      	ldr	r3, [r3, #4]
 8001bb0:	085b      	lsrs	r3, r3, #1
 8001bb2:	18d2      	adds	r2, r2, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	0019      	movs	r1, r3
 8001bba:	0010      	movs	r0, r2
 8001bbc:	f7fe faa4 	bl	8000108 <__udivsi3>
 8001bc0:	0003      	movs	r3, r0
 8001bc2:	617b      	str	r3, [r7, #20]
      break;
 8001bc4:	e03a      	b.n	8001c3c <IRDA_SetConfig+0x240>
    case IRDA_CLOCKSOURCE_SYSCLK:
      pclk = HAL_RCC_GetSysClockFreq();
 8001bc6:	f000 fe77 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8001bca:	0003      	movs	r3, r0
 8001bcc:	60fb      	str	r3, [r7, #12]
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16(pclk, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	699a      	ldr	r2, [r3, #24]
 8001bd2:	4b2b      	ldr	r3, [pc, #172]	; (8001c80 <IRDA_SetConfig+0x284>)
 8001bd4:	0052      	lsls	r2, r2, #1
 8001bd6:	5ad3      	ldrh	r3, [r2, r3]
 8001bd8:	0019      	movs	r1, r3
 8001bda:	68f8      	ldr	r0, [r7, #12]
 8001bdc:	f7fe fa94 	bl	8000108 <__udivsi3>
 8001be0:	0003      	movs	r3, r0
 8001be2:	001a      	movs	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	085b      	lsrs	r3, r3, #1
 8001bea:	18d2      	adds	r2, r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	685b      	ldr	r3, [r3, #4]
 8001bf0:	0019      	movs	r1, r3
 8001bf2:	0010      	movs	r0, r2
 8001bf4:	f7fe fa88 	bl	8000108 <__udivsi3>
 8001bf8:	0003      	movs	r3, r0
 8001bfa:	617b      	str	r3, [r7, #20]
      break;
 8001bfc:	e01e      	b.n	8001c3c <IRDA_SetConfig+0x240>
    case IRDA_CLOCKSOURCE_LSE:
      tmpreg = (uint32_t)(IRDA_DIV_SAMPLING16((uint32_t)LSE_VALUE, hirda->Init.BaudRate, hirda->Init.ClockPrescaler));
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <IRDA_SetConfig+0x284>)
 8001c04:	0052      	lsls	r2, r2, #1
 8001c06:	5ad3      	ldrh	r3, [r2, r3]
 8001c08:	0019      	movs	r1, r3
 8001c0a:	2380      	movs	r3, #128	; 0x80
 8001c0c:	0218      	lsls	r0, r3, #8
 8001c0e:	f7fe fa7b 	bl	8000108 <__udivsi3>
 8001c12:	0003      	movs	r3, r0
 8001c14:	b29b      	uxth	r3, r3
 8001c16:	001a      	movs	r2, r3
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	685b      	ldr	r3, [r3, #4]
 8001c1c:	085b      	lsrs	r3, r3, #1
 8001c1e:	18d2      	adds	r2, r2, r3
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	0019      	movs	r1, r3
 8001c26:	0010      	movs	r0, r2
 8001c28:	f7fe fa6e 	bl	8000108 <__udivsi3>
 8001c2c:	0003      	movs	r3, r0
 8001c2e:	617b      	str	r3, [r7, #20]
      break;
 8001c30:	e004      	b.n	8001c3c <IRDA_SetConfig+0x240>
    default:
      ret = HAL_ERROR;
 8001c32:	2312      	movs	r3, #18
 8001c34:	18fb      	adds	r3, r7, r3
 8001c36:	2201      	movs	r2, #1
 8001c38:	701a      	strb	r2, [r3, #0]
      break;
 8001c3a:	46c0      	nop			; (mov r8, r8)
  }

  /* USARTDIV must be greater than or equal to 0d16 */
  if ((tmpreg >= USART_BRR_MIN) && (tmpreg <= USART_BRR_MAX))
 8001c3c:	697b      	ldr	r3, [r7, #20]
 8001c3e:	2b0f      	cmp	r3, #15
 8001c40:	d90a      	bls.n	8001c58 <IRDA_SetConfig+0x25c>
 8001c42:	697a      	ldr	r2, [r7, #20]
 8001c44:	2380      	movs	r3, #128	; 0x80
 8001c46:	025b      	lsls	r3, r3, #9
 8001c48:	429a      	cmp	r2, r3
 8001c4a:	d205      	bcs.n	8001c58 <IRDA_SetConfig+0x25c>
  {
    hirda->Instance->BRR = (uint16_t)tmpreg;
 8001c4c:	697b      	ldr	r3, [r7, #20]
 8001c4e:	b29a      	uxth	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	60da      	str	r2, [r3, #12]
 8001c56:	e003      	b.n	8001c60 <IRDA_SetConfig+0x264>
  }
  else
  {
    ret = HAL_ERROR;
 8001c58:	2312      	movs	r3, #18
 8001c5a:	18fb      	adds	r3, r7, r3
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8001c60:	2312      	movs	r3, #18
 8001c62:	18fb      	adds	r3, r7, r3
 8001c64:	781b      	ldrb	r3, [r3, #0]
}
 8001c66:	0018      	movs	r0, r3
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	b006      	add	sp, #24
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	46c0      	nop			; (mov r8, r8)
 8001c70:	efffe9f3 	.word	0xefffe9f3
 8001c74:	40013800 	.word	0x40013800
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40004400 	.word	0x40004400
 8001c80:	08007724 	.word	0x08007724
 8001c84:	00f42400 	.word	0x00f42400

08001c88 <IRDA_CheckIdleState>:
  * @param hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_CheckIdleState(IRDA_HandleTypeDef *hirda)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b086      	sub	sp, #24
 8001c8c:	af02      	add	r7, sp, #8
 8001c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the IRDA ErrorCode */
  hirda->ErrorCode = HAL_IRDA_ERROR_NONE;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	; 0x44

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8001c96:	f7ff fa4b 	bl	8001130 <HAL_GetTick>
 8001c9a:	0003      	movs	r3, r0
 8001c9c:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	681b      	ldr	r3, [r3, #0]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	2208      	movs	r2, #8
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d10e      	bne.n	8001cca <IRDA_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_TEACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	2380      	movs	r3, #128	; 0x80
 8001cb0:	0399      	lsls	r1, r3, #14
 8001cb2:	6878      	ldr	r0, [r7, #4]
 8001cb4:	23fa      	movs	r3, #250	; 0xfa
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	9300      	str	r3, [sp, #0]
 8001cba:	0013      	movs	r3, r2
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	f000 f829 	bl	8001d14 <IRDA_WaitOnFlagUntilTimeout>
 8001cc2:	1e03      	subs	r3, r0, #0
 8001cc4:	d001      	beq.n	8001cca <IRDA_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001cc6:	2303      	movs	r3, #3
 8001cc8:	e020      	b.n	8001d0c <IRDA_CheckIdleState+0x84>
    }
  }
  /* Check if the Receiver is enabled */
  if ((hirda->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2204      	movs	r2, #4
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	2b04      	cmp	r3, #4
 8001cd6:	d10e      	bne.n	8001cf6 <IRDA_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (IRDA_WaitOnFlagUntilTimeout(hirda, USART_ISR_REACK, RESET, tickstart, IRDA_TEACK_REACK_TIMEOUT) != HAL_OK)
 8001cd8:	68fa      	ldr	r2, [r7, #12]
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	03d9      	lsls	r1, r3, #15
 8001cde:	6878      	ldr	r0, [r7, #4]
 8001ce0:	23fa      	movs	r3, #250	; 0xfa
 8001ce2:	009b      	lsls	r3, r3, #2
 8001ce4:	9300      	str	r3, [sp, #0]
 8001ce6:	0013      	movs	r3, r2
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f000 f813 	bl	8001d14 <IRDA_WaitOnFlagUntilTimeout>
 8001cee:	1e03      	subs	r3, r0, #0
 8001cf0:	d001      	beq.n	8001cf6 <IRDA_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e00a      	b.n	8001d0c <IRDA_CheckIdleState+0x84>
    }
  }

  /* Initialize the IRDA state*/
  hirda->gState  = HAL_IRDA_STATE_READY;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	2220      	movs	r2, #32
 8001cfa:	63da      	str	r2, [r3, #60]	; 0x3c
  hirda->RxState = HAL_IRDA_STATE_READY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2220      	movs	r2, #32
 8001d00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Process Unlocked */
  __HAL_UNLOCK(hirda);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2238      	movs	r2, #56	; 0x38
 8001d06:	2100      	movs	r1, #0
 8001d08:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001d0a:	2300      	movs	r3, #0
}
 8001d0c:	0018      	movs	r0, r3
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	b004      	add	sp, #16
 8001d12:	bd80      	pop	{r7, pc}

08001d14 <IRDA_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef IRDA_WaitOnFlagUntilTimeout(IRDA_HandleTypeDef *hirda, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	60f8      	str	r0, [r7, #12]
 8001d1c:	60b9      	str	r1, [r7, #8]
 8001d1e:	603b      	str	r3, [r7, #0]
 8001d20:	1dfb      	adds	r3, r7, #7
 8001d22:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 8001d24:	e029      	b.n	8001d7a <IRDA_WaitOnFlagUntilTimeout+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d26:	69bb      	ldr	r3, [r7, #24]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	d026      	beq.n	8001d7a <IRDA_WaitOnFlagUntilTimeout+0x66>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d2c:	f7ff fa00 	bl	8001130 <HAL_GetTick>
 8001d30:	0002      	movs	r2, r0
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	1ad3      	subs	r3, r2, r3
 8001d36:	69ba      	ldr	r2, [r7, #24]
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d302      	bcc.n	8001d42 <IRDA_WaitOnFlagUntilTimeout+0x2e>
 8001d3c:	69bb      	ldr	r3, [r7, #24]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d11b      	bne.n	8001d7a <IRDA_WaitOnFlagUntilTimeout+0x66>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4915      	ldr	r1, [pc, #84]	; (8001da4 <IRDA_WaitOnFlagUntilTimeout+0x90>)
 8001d4e:	400a      	ands	r2, r1
 8001d50:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	689a      	ldr	r2, [r3, #8]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	438a      	bics	r2, r1
 8001d60:	609a      	str	r2, [r3, #8]

        hirda->gState  = HAL_IRDA_STATE_READY;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	2220      	movs	r2, #32
 8001d66:	63da      	str	r2, [r3, #60]	; 0x3c
        hirda->RxState = HAL_IRDA_STATE_READY;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	2220      	movs	r2, #32
 8001d6c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hirda);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2238      	movs	r2, #56	; 0x38
 8001d72:	2100      	movs	r1, #0
 8001d74:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8001d76:	2303      	movs	r3, #3
 8001d78:	e00f      	b.n	8001d9a <IRDA_WaitOnFlagUntilTimeout+0x86>
  while ((__HAL_IRDA_GET_FLAG(hirda, Flag) ? SET : RESET) == Status)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	69db      	ldr	r3, [r3, #28]
 8001d80:	68ba      	ldr	r2, [r7, #8]
 8001d82:	4013      	ands	r3, r2
 8001d84:	68ba      	ldr	r2, [r7, #8]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	425a      	negs	r2, r3
 8001d8a:	4153      	adcs	r3, r2
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	001a      	movs	r2, r3
 8001d90:	1dfb      	adds	r3, r7, #7
 8001d92:	781b      	ldrb	r3, [r3, #0]
 8001d94:	429a      	cmp	r2, r3
 8001d96:	d0c6      	beq.n	8001d26 <IRDA_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001d98:	2300      	movs	r3, #0
}
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	b004      	add	sp, #16
 8001da0:	bd80      	pop	{r7, pc}
 8001da2:	46c0      	nop			; (mov r8, r8)
 8001da4:	fffffe5f 	.word	0xfffffe5f

08001da8 <IRDA_EndRxTransfer>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndRxTransfer(IRDA_HandleTypeDef *hirda)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b082      	sub	sp, #8
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4909      	ldr	r1, [pc, #36]	; (8001de0 <IRDA_EndRxTransfer+0x38>)
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	689a      	ldr	r2, [r3, #8]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	2101      	movs	r1, #1
 8001dcc:	438a      	bics	r2, r1
 8001dce:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore hirda->RxState to Ready */
  hirda->RxState = HAL_IRDA_STATE_READY;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2220      	movs	r2, #32
 8001dd4:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001dd6:	46c0      	nop			; (mov r8, r8)
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	b002      	add	sp, #8
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	46c0      	nop			; (mov r8, r8)
 8001de0:	fffffedf 	.word	0xfffffedf

08001de4 <IRDA_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void IRDA_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b084      	sub	sp, #16
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  IRDA_HandleTypeDef *hirda = (IRDA_HandleTypeDef *)(hdma->Parent);
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df0:	60fb      	str	r3, [r7, #12]
  hirda->RxXferCount = 0U;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	855a      	strh	r2, [r3, #42]	; 0x2a
  hirda->TxXferCount = 0U;
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2200      	movs	r2, #0
 8001dfc:	845a      	strh	r2, [r3, #34]	; 0x22
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered user error callback */
  hirda->ErrorCallback(hirda);
#else
  /* Call legacy weak user error callback */
  HAL_IRDA_ErrorCallback(hirda);
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fdf3 	bl	80019ec <HAL_IRDA_ErrorCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8001e06:	46c0      	nop			; (mov r8, r8)
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	b004      	add	sp, #16
 8001e0c:	bd80      	pop	{r7, pc}

08001e0e <IRDA_Transmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Transmit_IT(IRDA_HandleTypeDef *hirda)
{
 8001e0e:	b580      	push	{r7, lr}
 8001e10:	b084      	sub	sp, #16
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (hirda->gState == HAL_IRDA_STATE_BUSY_TX)
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e1a:	2b21      	cmp	r3, #33	; 0x21
 8001e1c:	d142      	bne.n	8001ea4 <IRDA_Transmit_IT+0x96>
  {
    if (hirda->TxXferCount == 0U)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001e22:	b29b      	uxth	r3, r3
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d110      	bne.n	8001e4a <IRDA_Transmit_IT+0x3c>
    {
      /* Disable the IRDA Transmit Data Register Empty Interrupt */
      CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TXEIE_TXFNFIE);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	2180      	movs	r1, #128	; 0x80
 8001e34:	438a      	bics	r2, r1
 8001e36:	601a      	str	r2, [r3, #0]

      /* Enable the IRDA Transmit Complete Interrupt */
      SET_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	2140      	movs	r1, #64	; 0x40
 8001e44:	430a      	orrs	r2, r1
 8001e46:	601a      	str	r2, [r3, #0]
        hirda->pTxBuffPtr++;
      }
      hirda->TxXferCount--;
    }
  }
}
 8001e48:	e02c      	b.n	8001ea4 <IRDA_Transmit_IT+0x96>
      if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689a      	ldr	r2, [r3, #8]
 8001e4e:	2380      	movs	r3, #128	; 0x80
 8001e50:	015b      	lsls	r3, r3, #5
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d114      	bne.n	8001e80 <IRDA_Transmit_IT+0x72>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d110      	bne.n	8001e80 <IRDA_Transmit_IT+0x72>
        tmp = (const uint16_t *) hirda->pTxBuffPtr; /* Derogation R.11.3 */
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69db      	ldr	r3, [r3, #28]
 8001e62:	60fb      	str	r3, [r7, #12]
        hirda->Instance->TDR = (uint16_t)(*tmp & 0x01FFU);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	881b      	ldrh	r3, [r3, #0]
 8001e68:	001a      	movs	r2, r3
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	05d2      	lsls	r2, r2, #23
 8001e70:	0dd2      	lsrs	r2, r2, #23
 8001e72:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr += 2U;
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	69db      	ldr	r3, [r3, #28]
 8001e78:	1c9a      	adds	r2, r3, #2
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	61da      	str	r2, [r3, #28]
 8001e7e:	e00a      	b.n	8001e96 <IRDA_Transmit_IT+0x88>
        hirda->Instance->TDR = (uint8_t)(*hirda->pTxBuffPtr & 0xFFU);
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	69db      	ldr	r3, [r3, #28]
 8001e84:	781a      	ldrb	r2, [r3, #0]
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	629a      	str	r2, [r3, #40]	; 0x28
        hirda->pTxBuffPtr++;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	69db      	ldr	r3, [r3, #28]
 8001e90:	1c5a      	adds	r2, r3, #1
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	61da      	str	r2, [r3, #28]
      hirda->TxXferCount--;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8001e9a:	b29b      	uxth	r3, r3
 8001e9c:	3b01      	subs	r3, #1
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	845a      	strh	r2, [r3, #34]	; 0x22
}
 8001ea4:	46c0      	nop			; (mov r8, r8)
 8001ea6:	46bd      	mov	sp, r7
 8001ea8:	b004      	add	sp, #16
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <IRDA_EndTransmit_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_EndTransmit_IT(IRDA_HandleTypeDef *hirda)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b082      	sub	sp, #8
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  /* Disable the IRDA Transmit Complete Interrupt */
  CLEAR_BIT(hirda->Instance->CR1, USART_CR1_TCIE);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	681a      	ldr	r2, [r3, #0]
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	2140      	movs	r1, #64	; 0x40
 8001ec0:	438a      	bics	r2, r1
 8001ec2:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore hirda->gState to Ready */
  hirda->gState = HAL_IRDA_STATE_READY;
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2220      	movs	r2, #32
 8001ec8:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
  /* Call registered Tx complete callback */
  hirda->TxCpltCallback(hirda);
#else
  /* Call legacy weak Tx complete callback */
  HAL_IRDA_TxCpltCallback(hirda);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f7ff fd7d 	bl	80019cc <HAL_IRDA_TxCpltCallback>
#endif /* USE_HAL_IRDA_REGISTER_CALLBACK */
}
 8001ed2:	46c0      	nop			; (mov r8, r8)
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	b002      	add	sp, #8
 8001ed8:	bd80      	pop	{r7, pc}
	...

08001edc <IRDA_Receive_IT>:
  * @param  hirda Pointer to a IRDA_HandleTypeDef structure that contains
  *               the configuration information for the specified IRDA module.
  * @retval None
  */
static void IRDA_Receive_IT(IRDA_HandleTypeDef *hirda)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b084      	sub	sp, #16
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = hirda->Mask;
 8001ee4:	210e      	movs	r1, #14
 8001ee6:	187b      	adds	r3, r7, r1
 8001ee8:	687a      	ldr	r2, [r7, #4]
 8001eea:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 8001eec:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (hirda->RxState == HAL_IRDA_STATE_BUSY_RX)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	2b22      	cmp	r3, #34	; 0x22
 8001ef4:	d156      	bne.n	8001fa4 <IRDA_Receive_IT+0xc8>
  {
    uhdata = (uint16_t) READ_REG(hirda->Instance->RDR);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001efc:	200c      	movs	r0, #12
 8001efe:	183b      	adds	r3, r7, r0
 8001f00:	801a      	strh	r2, [r3, #0]
    if ((hirda->Init.WordLength == IRDA_WORDLENGTH_9B) && (hirda->Init.Parity == IRDA_PARITY_NONE))
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689a      	ldr	r2, [r3, #8]
 8001f06:	2380      	movs	r3, #128	; 0x80
 8001f08:	015b      	lsls	r3, r3, #5
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d114      	bne.n	8001f38 <IRDA_Receive_IT+0x5c>
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	68db      	ldr	r3, [r3, #12]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d110      	bne.n	8001f38 <IRDA_Receive_IT+0x5c>
    {
      tmp = (uint16_t *) hirda->pRxBuffPtr; /* Derogation R.11.3 */
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1a:	60bb      	str	r3, [r7, #8]
      *tmp = (uint16_t)(uhdata & uhMask);
 8001f1c:	183b      	adds	r3, r7, r0
 8001f1e:	187a      	adds	r2, r7, r1
 8001f20:	881b      	ldrh	r3, [r3, #0]
 8001f22:	8812      	ldrh	r2, [r2, #0]
 8001f24:	4013      	ands	r3, r2
 8001f26:	b29a      	uxth	r2, r3
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	801a      	strh	r2, [r3, #0]
      hirda->pRxBuffPtr  += 2U;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f30:	1c9a      	adds	r2, r3, #2
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
 8001f36:	e011      	b.n	8001f5c <IRDA_Receive_IT+0x80>
    }
    else
    {
      *hirda->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001f38:	230c      	movs	r3, #12
 8001f3a:	18fb      	adds	r3, r7, r3
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	b2da      	uxtb	r2, r3
 8001f40:	230e      	movs	r3, #14
 8001f42:	18fb      	adds	r3, r7, r3
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b2d9      	uxtb	r1, r3
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4c:	400a      	ands	r2, r1
 8001f4e:	b2d2      	uxtb	r2, r2
 8001f50:	701a      	strb	r2, [r3, #0]
      hirda->pRxBuffPtr++;
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	1c5a      	adds	r2, r3, #1
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    hirda->RxXferCount--;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	3b01      	subs	r3, #1
 8001f64:	b29a      	uxth	r2, r3
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hirda->RxXferCount == 0U)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001f6e:	b29b      	uxth	r3, r3
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d11f      	bne.n	8001fb4 <IRDA_Receive_IT+0xd8>
    {
      /* Disable the IRDA Parity Error Interrupt and RXNE interrupt */
      CLEAR_BIT(hirda->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	490f      	ldr	r1, [pc, #60]	; (8001fbc <IRDA_Receive_IT+0xe0>)
 8001f80:	400a      	ands	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]

      /* Disable the IRDA Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(hirda->Instance->CR3, USART_CR3_EIE);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	689a      	ldr	r2, [r3, #8]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	2101      	movs	r1, #1
 8001f90:	438a      	bics	r2, r1
 8001f92:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore hirda->RxState to Ready */
      hirda->RxState = HAL_IRDA_STATE_READY;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2220      	movs	r2, #32
 8001f98:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_IRDA_REGISTER_CALLBACKS == 1)
      /* Call registered Rx complete callback */
      hirda->RxCpltCallback(hirda);
#else
      /* Call legacy weak Rx complete callback */
      HAL_IRDA_RxCpltCallback(hirda);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	0018      	movs	r0, r3
 8001f9e:	f7ff fd1d 	bl	80019dc <HAL_IRDA_RxCpltCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
  }
}
 8001fa2:	e007      	b.n	8001fb4 <IRDA_Receive_IT+0xd8>
    __HAL_IRDA_SEND_REQ(hirda, IRDA_RXDATA_FLUSH_REQUEST);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	699a      	ldr	r2, [r3, #24]
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	2108      	movs	r1, #8
 8001fb0:	430a      	orrs	r2, r1
 8001fb2:	619a      	str	r2, [r3, #24]
}
 8001fb4:	46c0      	nop			; (mov r8, r8)
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	b004      	add	sp, #16
 8001fba:	bd80      	pop	{r7, pc}
 8001fbc:	fffffedf 	.word	0xfffffedf

08001fc0 <HAL_PWR_EnableBkUpAccess>:
  *         possible unwanted write accesses. All RTC & TAMP registers (backup
  *         registers included) and RCC BDCR register are concerned.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	4b03      	ldr	r3, [pc, #12]	; (8001fd8 <HAL_PWR_EnableBkUpAccess+0x18>)
 8001fca:	2180      	movs	r1, #128	; 0x80
 8001fcc:	0049      	lsls	r1, r1, #1
 8001fce:	430a      	orrs	r2, r1
 8001fd0:	601a      	str	r2, [r3, #0]
}
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	bd80      	pop	{r7, pc}
 8001fd8:	40007000 	.word	0x40007000

08001fdc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001fe4:	4b19      	ldr	r3, [pc, #100]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	4a19      	ldr	r2, [pc, #100]	; (8002050 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001fea:	4013      	ands	r3, r2
 8001fec:	0019      	movs	r1, r3
 8001fee:	4b17      	ldr	r3, [pc, #92]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ff0:	687a      	ldr	r2, [r7, #4]
 8001ff2:	430a      	orrs	r2, r1
 8001ff4:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ff6:	687a      	ldr	r2, [r7, #4]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	009b      	lsls	r3, r3, #2
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d11f      	bne.n	8002040 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002000:	4b14      	ldr	r3, [pc, #80]	; (8002054 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8002002:	681a      	ldr	r2, [r3, #0]
 8002004:	0013      	movs	r3, r2
 8002006:	005b      	lsls	r3, r3, #1
 8002008:	189b      	adds	r3, r3, r2
 800200a:	005b      	lsls	r3, r3, #1
 800200c:	4912      	ldr	r1, [pc, #72]	; (8002058 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800200e:	0018      	movs	r0, r3
 8002010:	f7fe f87a 	bl	8000108 <__udivsi3>
 8002014:	0003      	movs	r3, r0
 8002016:	3301      	adds	r3, #1
 8002018:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800201a:	e008      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	3b01      	subs	r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	e001      	b.n	800202e <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800202a:	2303      	movs	r3, #3
 800202c:	e009      	b.n	8002042 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800202e:	4b07      	ldr	r3, [pc, #28]	; (800204c <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002030:	695a      	ldr	r2, [r3, #20]
 8002032:	2380      	movs	r3, #128	; 0x80
 8002034:	00db      	lsls	r3, r3, #3
 8002036:	401a      	ands	r2, r3
 8002038:	2380      	movs	r3, #128	; 0x80
 800203a:	00db      	lsls	r3, r3, #3
 800203c:	429a      	cmp	r2, r3
 800203e:	d0ed      	beq.n	800201c <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002040:	2300      	movs	r3, #0
}
 8002042:	0018      	movs	r0, r3
 8002044:	46bd      	mov	sp, r7
 8002046:	b004      	add	sp, #16
 8002048:	bd80      	pop	{r7, pc}
 800204a:	46c0      	nop			; (mov r8, r8)
 800204c:	40007000 	.word	0x40007000
 8002050:	fffff9ff 	.word	0xfffff9ff
 8002054:	20000000 	.word	0x20000000
 8002058:	000f4240 	.word	0x000f4240

0800205c <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8002060:	4b03      	ldr	r3, [pc, #12]	; (8002070 <LL_RCC_GetAPB1Prescaler+0x14>)
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	23e0      	movs	r3, #224	; 0xe0
 8002066:	01db      	lsls	r3, r3, #7
 8002068:	4013      	ands	r3, r2
}
 800206a:	0018      	movs	r0, r3
 800206c:	46bd      	mov	sp, r7
 800206e:	bd80      	pop	{r7, pc}
 8002070:	40021000 	.word	0x40021000

08002074 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b088      	sub	sp, #32
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d101      	bne.n	8002086 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002082:	2301      	movs	r3, #1
 8002084:	e2fe      	b.n	8002684 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2201      	movs	r2, #1
 800208c:	4013      	ands	r3, r2
 800208e:	d100      	bne.n	8002092 <HAL_RCC_OscConfig+0x1e>
 8002090:	e07c      	b.n	800218c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002092:	4bc3      	ldr	r3, [pc, #780]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002094:	689b      	ldr	r3, [r3, #8]
 8002096:	2238      	movs	r2, #56	; 0x38
 8002098:	4013      	ands	r3, r2
 800209a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800209c:	4bc0      	ldr	r3, [pc, #768]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800209e:	68db      	ldr	r3, [r3, #12]
 80020a0:	2203      	movs	r2, #3
 80020a2:	4013      	ands	r3, r2
 80020a4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80020a6:	69bb      	ldr	r3, [r7, #24]
 80020a8:	2b10      	cmp	r3, #16
 80020aa:	d102      	bne.n	80020b2 <HAL_RCC_OscConfig+0x3e>
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	2b03      	cmp	r3, #3
 80020b0:	d002      	beq.n	80020b8 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	2b08      	cmp	r3, #8
 80020b6:	d10b      	bne.n	80020d0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020b8:	4bb9      	ldr	r3, [pc, #740]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	2380      	movs	r3, #128	; 0x80
 80020be:	029b      	lsls	r3, r3, #10
 80020c0:	4013      	ands	r3, r2
 80020c2:	d062      	beq.n	800218a <HAL_RCC_OscConfig+0x116>
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d15e      	bne.n	800218a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e2d9      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	685a      	ldr	r2, [r3, #4]
 80020d4:	2380      	movs	r3, #128	; 0x80
 80020d6:	025b      	lsls	r3, r3, #9
 80020d8:	429a      	cmp	r2, r3
 80020da:	d107      	bne.n	80020ec <HAL_RCC_OscConfig+0x78>
 80020dc:	4bb0      	ldr	r3, [pc, #704]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020de:	681a      	ldr	r2, [r3, #0]
 80020e0:	4baf      	ldr	r3, [pc, #700]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020e2:	2180      	movs	r1, #128	; 0x80
 80020e4:	0249      	lsls	r1, r1, #9
 80020e6:	430a      	orrs	r2, r1
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	e020      	b.n	800212e <HAL_RCC_OscConfig+0xba>
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	685a      	ldr	r2, [r3, #4]
 80020f0:	23a0      	movs	r3, #160	; 0xa0
 80020f2:	02db      	lsls	r3, r3, #11
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d10e      	bne.n	8002116 <HAL_RCC_OscConfig+0xa2>
 80020f8:	4ba9      	ldr	r3, [pc, #676]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020fa:	681a      	ldr	r2, [r3, #0]
 80020fc:	4ba8      	ldr	r3, [pc, #672]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80020fe:	2180      	movs	r1, #128	; 0x80
 8002100:	02c9      	lsls	r1, r1, #11
 8002102:	430a      	orrs	r2, r1
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	4ba6      	ldr	r3, [pc, #664]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	4ba5      	ldr	r3, [pc, #660]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800210c:	2180      	movs	r1, #128	; 0x80
 800210e:	0249      	lsls	r1, r1, #9
 8002110:	430a      	orrs	r2, r1
 8002112:	601a      	str	r2, [r3, #0]
 8002114:	e00b      	b.n	800212e <HAL_RCC_OscConfig+0xba>
 8002116:	4ba2      	ldr	r3, [pc, #648]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002118:	681a      	ldr	r2, [r3, #0]
 800211a:	4ba1      	ldr	r3, [pc, #644]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800211c:	49a1      	ldr	r1, [pc, #644]	; (80023a4 <HAL_RCC_OscConfig+0x330>)
 800211e:	400a      	ands	r2, r1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	4b9f      	ldr	r3, [pc, #636]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002124:	681a      	ldr	r2, [r3, #0]
 8002126:	4b9e      	ldr	r3, [pc, #632]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002128:	499f      	ldr	r1, [pc, #636]	; (80023a8 <HAL_RCC_OscConfig+0x334>)
 800212a:	400a      	ands	r2, r1
 800212c:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	685b      	ldr	r3, [r3, #4]
 8002132:	2b00      	cmp	r3, #0
 8002134:	d014      	beq.n	8002160 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002136:	f7fe fffb 	bl	8001130 <HAL_GetTick>
 800213a:	0003      	movs	r3, r0
 800213c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800213e:	e008      	b.n	8002152 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002140:	f7fe fff6 	bl	8001130 <HAL_GetTick>
 8002144:	0002      	movs	r2, r0
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	2b64      	cmp	r3, #100	; 0x64
 800214c:	d901      	bls.n	8002152 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800214e:	2303      	movs	r3, #3
 8002150:	e298      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002152:	4b93      	ldr	r3, [pc, #588]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	2380      	movs	r3, #128	; 0x80
 8002158:	029b      	lsls	r3, r3, #10
 800215a:	4013      	ands	r3, r2
 800215c:	d0f0      	beq.n	8002140 <HAL_RCC_OscConfig+0xcc>
 800215e:	e015      	b.n	800218c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002160:	f7fe ffe6 	bl	8001130 <HAL_GetTick>
 8002164:	0003      	movs	r3, r0
 8002166:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002168:	e008      	b.n	800217c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800216a:	f7fe ffe1 	bl	8001130 <HAL_GetTick>
 800216e:	0002      	movs	r2, r0
 8002170:	693b      	ldr	r3, [r7, #16]
 8002172:	1ad3      	subs	r3, r2, r3
 8002174:	2b64      	cmp	r3, #100	; 0x64
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e283      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800217c:	4b88      	ldr	r3, [pc, #544]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800217e:	681a      	ldr	r2, [r3, #0]
 8002180:	2380      	movs	r3, #128	; 0x80
 8002182:	029b      	lsls	r3, r3, #10
 8002184:	4013      	ands	r3, r2
 8002186:	d1f0      	bne.n	800216a <HAL_RCC_OscConfig+0xf6>
 8002188:	e000      	b.n	800218c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800218a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	2202      	movs	r2, #2
 8002192:	4013      	ands	r3, r2
 8002194:	d100      	bne.n	8002198 <HAL_RCC_OscConfig+0x124>
 8002196:	e099      	b.n	80022cc <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002198:	4b81      	ldr	r3, [pc, #516]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800219a:	689b      	ldr	r3, [r3, #8]
 800219c:	2238      	movs	r2, #56	; 0x38
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021a2:	4b7f      	ldr	r3, [pc, #508]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021a4:	68db      	ldr	r3, [r3, #12]
 80021a6:	2203      	movs	r2, #3
 80021a8:	4013      	ands	r3, r2
 80021aa:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80021ac:	69bb      	ldr	r3, [r7, #24]
 80021ae:	2b10      	cmp	r3, #16
 80021b0:	d102      	bne.n	80021b8 <HAL_RCC_OscConfig+0x144>
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d002      	beq.n	80021be <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d135      	bne.n	800222a <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021be:	4b78      	ldr	r3, [pc, #480]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	2380      	movs	r3, #128	; 0x80
 80021c4:	00db      	lsls	r3, r3, #3
 80021c6:	4013      	ands	r3, r2
 80021c8:	d005      	beq.n	80021d6 <HAL_RCC_OscConfig+0x162>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	68db      	ldr	r3, [r3, #12]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d101      	bne.n	80021d6 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e256      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021d6:	4b72      	ldr	r3, [pc, #456]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	4a74      	ldr	r2, [pc, #464]	; (80023ac <HAL_RCC_OscConfig+0x338>)
 80021dc:	4013      	ands	r3, r2
 80021de:	0019      	movs	r1, r3
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	695b      	ldr	r3, [r3, #20]
 80021e4:	021a      	lsls	r2, r3, #8
 80021e6:	4b6e      	ldr	r3, [pc, #440]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021e8:	430a      	orrs	r2, r1
 80021ea:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d112      	bne.n	8002218 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80021f2:	4b6b      	ldr	r3, [pc, #428]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	4a6e      	ldr	r2, [pc, #440]	; (80023b0 <HAL_RCC_OscConfig+0x33c>)
 80021f8:	4013      	ands	r3, r2
 80021fa:	0019      	movs	r1, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	691a      	ldr	r2, [r3, #16]
 8002200:	4b67      	ldr	r3, [pc, #412]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002202:	430a      	orrs	r2, r1
 8002204:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002206:	4b66      	ldr	r3, [pc, #408]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	0adb      	lsrs	r3, r3, #11
 800220c:	2207      	movs	r2, #7
 800220e:	4013      	ands	r3, r2
 8002210:	4a68      	ldr	r2, [pc, #416]	; (80023b4 <HAL_RCC_OscConfig+0x340>)
 8002212:	40da      	lsrs	r2, r3
 8002214:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <HAL_RCC_OscConfig+0x344>)
 8002216:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002218:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x348>)
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	0018      	movs	r0, r3
 800221e:	f7fe fe75 	bl	8000f0c <HAL_InitTick>
 8002222:	1e03      	subs	r3, r0, #0
 8002224:	d051      	beq.n	80022ca <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8002226:	2301      	movs	r3, #1
 8002228:	e22c      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d030      	beq.n	8002294 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002232:	4b5b      	ldr	r3, [pc, #364]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a5e      	ldr	r2, [pc, #376]	; (80023b0 <HAL_RCC_OscConfig+0x33c>)
 8002238:	4013      	ands	r3, r2
 800223a:	0019      	movs	r1, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	691a      	ldr	r2, [r3, #16]
 8002240:	4b57      	ldr	r3, [pc, #348]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002242:	430a      	orrs	r2, r1
 8002244:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8002246:	4b56      	ldr	r3, [pc, #344]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b55      	ldr	r3, [pc, #340]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800224c:	2180      	movs	r1, #128	; 0x80
 800224e:	0049      	lsls	r1, r1, #1
 8002250:	430a      	orrs	r2, r1
 8002252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002254:	f7fe ff6c 	bl	8001130 <HAL_GetTick>
 8002258:	0003      	movs	r3, r0
 800225a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800225c:	e008      	b.n	8002270 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800225e:	f7fe ff67 	bl	8001130 <HAL_GetTick>
 8002262:	0002      	movs	r2, r0
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	2b02      	cmp	r3, #2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e209      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002270:	4b4b      	ldr	r3, [pc, #300]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	2380      	movs	r3, #128	; 0x80
 8002276:	00db      	lsls	r3, r3, #3
 8002278:	4013      	ands	r3, r2
 800227a:	d0f0      	beq.n	800225e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800227c:	4b48      	ldr	r3, [pc, #288]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800227e:	685b      	ldr	r3, [r3, #4]
 8002280:	4a4a      	ldr	r2, [pc, #296]	; (80023ac <HAL_RCC_OscConfig+0x338>)
 8002282:	4013      	ands	r3, r2
 8002284:	0019      	movs	r1, r3
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	695b      	ldr	r3, [r3, #20]
 800228a:	021a      	lsls	r2, r3, #8
 800228c:	4b44      	ldr	r3, [pc, #272]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800228e:	430a      	orrs	r2, r1
 8002290:	605a      	str	r2, [r3, #4]
 8002292:	e01b      	b.n	80022cc <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8002294:	4b42      	ldr	r3, [pc, #264]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002296:	681a      	ldr	r2, [r3, #0]
 8002298:	4b41      	ldr	r3, [pc, #260]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800229a:	4949      	ldr	r1, [pc, #292]	; (80023c0 <HAL_RCC_OscConfig+0x34c>)
 800229c:	400a      	ands	r2, r1
 800229e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022a0:	f7fe ff46 	bl	8001130 <HAL_GetTick>
 80022a4:	0003      	movs	r3, r0
 80022a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022aa:	f7fe ff41 	bl	8001130 <HAL_GetTick>
 80022ae:	0002      	movs	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b02      	cmp	r3, #2
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e1e3      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022bc:	4b38      	ldr	r3, [pc, #224]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022be:	681a      	ldr	r2, [r3, #0]
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	00db      	lsls	r3, r3, #3
 80022c4:	4013      	ands	r3, r2
 80022c6:	d1f0      	bne.n	80022aa <HAL_RCC_OscConfig+0x236>
 80022c8:	e000      	b.n	80022cc <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022ca:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	2208      	movs	r2, #8
 80022d2:	4013      	ands	r3, r2
 80022d4:	d047      	beq.n	8002366 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80022d6:	4b32      	ldr	r3, [pc, #200]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	2238      	movs	r2, #56	; 0x38
 80022dc:	4013      	ands	r3, r2
 80022de:	2b18      	cmp	r3, #24
 80022e0:	d10a      	bne.n	80022f8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80022e2:	4b2f      	ldr	r3, [pc, #188]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 80022e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80022e6:	2202      	movs	r2, #2
 80022e8:	4013      	ands	r3, r2
 80022ea:	d03c      	beq.n	8002366 <HAL_RCC_OscConfig+0x2f2>
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d138      	bne.n	8002366 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e1c5      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	699b      	ldr	r3, [r3, #24]
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d019      	beq.n	8002334 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002300:	4b27      	ldr	r3, [pc, #156]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002302:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002304:	4b26      	ldr	r3, [pc, #152]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002306:	2101      	movs	r1, #1
 8002308:	430a      	orrs	r2, r1
 800230a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800230c:	f7fe ff10 	bl	8001130 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002314:	e008      	b.n	8002328 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002316:	f7fe ff0b 	bl	8001130 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	2b02      	cmp	r3, #2
 8002322:	d901      	bls.n	8002328 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8002324:	2303      	movs	r3, #3
 8002326:	e1ad      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002328:	4b1d      	ldr	r3, [pc, #116]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800232a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800232c:	2202      	movs	r2, #2
 800232e:	4013      	ands	r3, r2
 8002330:	d0f1      	beq.n	8002316 <HAL_RCC_OscConfig+0x2a2>
 8002332:	e018      	b.n	8002366 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8002334:	4b1a      	ldr	r3, [pc, #104]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002336:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002338:	4b19      	ldr	r3, [pc, #100]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800233a:	2101      	movs	r1, #1
 800233c:	438a      	bics	r2, r1
 800233e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002340:	f7fe fef6 	bl	8001130 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002348:	e008      	b.n	800235c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800234a:	f7fe fef1 	bl	8001130 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	2b02      	cmp	r3, #2
 8002356:	d901      	bls.n	800235c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e193      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800235c:	4b10      	ldr	r3, [pc, #64]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800235e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002360:	2202      	movs	r2, #2
 8002362:	4013      	ands	r3, r2
 8002364:	d1f1      	bne.n	800234a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	2204      	movs	r2, #4
 800236c:	4013      	ands	r3, r2
 800236e:	d100      	bne.n	8002372 <HAL_RCC_OscConfig+0x2fe>
 8002370:	e0c6      	b.n	8002500 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002372:	231f      	movs	r3, #31
 8002374:	18fb      	adds	r3, r7, r3
 8002376:	2200      	movs	r2, #0
 8002378:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 800237a:	4b09      	ldr	r3, [pc, #36]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	2238      	movs	r2, #56	; 0x38
 8002380:	4013      	ands	r3, r2
 8002382:	2b20      	cmp	r3, #32
 8002384:	d11e      	bne.n	80023c4 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8002386:	4b06      	ldr	r3, [pc, #24]	; (80023a0 <HAL_RCC_OscConfig+0x32c>)
 8002388:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800238a:	2202      	movs	r2, #2
 800238c:	4013      	ands	r3, r2
 800238e:	d100      	bne.n	8002392 <HAL_RCC_OscConfig+0x31e>
 8002390:	e0b6      	b.n	8002500 <HAL_RCC_OscConfig+0x48c>
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d000      	beq.n	800239c <HAL_RCC_OscConfig+0x328>
 800239a:	e0b1      	b.n	8002500 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 800239c:	2301      	movs	r3, #1
 800239e:	e171      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
 80023a0:	40021000 	.word	0x40021000
 80023a4:	fffeffff 	.word	0xfffeffff
 80023a8:	fffbffff 	.word	0xfffbffff
 80023ac:	ffff80ff 	.word	0xffff80ff
 80023b0:	ffffc7ff 	.word	0xffffc7ff
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	20000000 	.word	0x20000000
 80023bc:	20000004 	.word	0x20000004
 80023c0:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023c4:	4bb1      	ldr	r3, [pc, #708]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80023c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023c8:	2380      	movs	r3, #128	; 0x80
 80023ca:	055b      	lsls	r3, r3, #21
 80023cc:	4013      	ands	r3, r2
 80023ce:	d101      	bne.n	80023d4 <HAL_RCC_OscConfig+0x360>
 80023d0:	2301      	movs	r3, #1
 80023d2:	e000      	b.n	80023d6 <HAL_RCC_OscConfig+0x362>
 80023d4:	2300      	movs	r3, #0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d011      	beq.n	80023fe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80023da:	4bac      	ldr	r3, [pc, #688]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80023dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023de:	4bab      	ldr	r3, [pc, #684]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80023e0:	2180      	movs	r1, #128	; 0x80
 80023e2:	0549      	lsls	r1, r1, #21
 80023e4:	430a      	orrs	r2, r1
 80023e6:	63da      	str	r2, [r3, #60]	; 0x3c
 80023e8:	4ba8      	ldr	r3, [pc, #672]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80023ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80023ec:	2380      	movs	r3, #128	; 0x80
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	4013      	ands	r3, r2
 80023f2:	60fb      	str	r3, [r7, #12]
 80023f4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80023f6:	231f      	movs	r3, #31
 80023f8:	18fb      	adds	r3, r7, r3
 80023fa:	2201      	movs	r2, #1
 80023fc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023fe:	4ba4      	ldr	r3, [pc, #656]	; (8002690 <HAL_RCC_OscConfig+0x61c>)
 8002400:	681a      	ldr	r2, [r3, #0]
 8002402:	2380      	movs	r3, #128	; 0x80
 8002404:	005b      	lsls	r3, r3, #1
 8002406:	4013      	ands	r3, r2
 8002408:	d11a      	bne.n	8002440 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800240a:	4ba1      	ldr	r3, [pc, #644]	; (8002690 <HAL_RCC_OscConfig+0x61c>)
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	4ba0      	ldr	r3, [pc, #640]	; (8002690 <HAL_RCC_OscConfig+0x61c>)
 8002410:	2180      	movs	r1, #128	; 0x80
 8002412:	0049      	lsls	r1, r1, #1
 8002414:	430a      	orrs	r2, r1
 8002416:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002418:	f7fe fe8a 	bl	8001130 <HAL_GetTick>
 800241c:	0003      	movs	r3, r0
 800241e:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002420:	e008      	b.n	8002434 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002422:	f7fe fe85 	bl	8001130 <HAL_GetTick>
 8002426:	0002      	movs	r2, r0
 8002428:	693b      	ldr	r3, [r7, #16]
 800242a:	1ad3      	subs	r3, r2, r3
 800242c:	2b02      	cmp	r3, #2
 800242e:	d901      	bls.n	8002434 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8002430:	2303      	movs	r3, #3
 8002432:	e127      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002434:	4b96      	ldr	r3, [pc, #600]	; (8002690 <HAL_RCC_OscConfig+0x61c>)
 8002436:	681a      	ldr	r2, [r3, #0]
 8002438:	2380      	movs	r3, #128	; 0x80
 800243a:	005b      	lsls	r3, r3, #1
 800243c:	4013      	ands	r3, r2
 800243e:	d0f0      	beq.n	8002422 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	689b      	ldr	r3, [r3, #8]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d106      	bne.n	8002456 <HAL_RCC_OscConfig+0x3e2>
 8002448:	4b90      	ldr	r3, [pc, #576]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800244a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800244c:	4b8f      	ldr	r3, [pc, #572]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800244e:	2101      	movs	r1, #1
 8002450:	430a      	orrs	r2, r1
 8002452:	65da      	str	r2, [r3, #92]	; 0x5c
 8002454:	e01c      	b.n	8002490 <HAL_RCC_OscConfig+0x41c>
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	2b05      	cmp	r3, #5
 800245c:	d10c      	bne.n	8002478 <HAL_RCC_OscConfig+0x404>
 800245e:	4b8b      	ldr	r3, [pc, #556]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002460:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002462:	4b8a      	ldr	r3, [pc, #552]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002464:	2104      	movs	r1, #4
 8002466:	430a      	orrs	r2, r1
 8002468:	65da      	str	r2, [r3, #92]	; 0x5c
 800246a:	4b88      	ldr	r3, [pc, #544]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800246c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800246e:	4b87      	ldr	r3, [pc, #540]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002470:	2101      	movs	r1, #1
 8002472:	430a      	orrs	r2, r1
 8002474:	65da      	str	r2, [r3, #92]	; 0x5c
 8002476:	e00b      	b.n	8002490 <HAL_RCC_OscConfig+0x41c>
 8002478:	4b84      	ldr	r3, [pc, #528]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800247a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800247c:	4b83      	ldr	r3, [pc, #524]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800247e:	2101      	movs	r1, #1
 8002480:	438a      	bics	r2, r1
 8002482:	65da      	str	r2, [r3, #92]	; 0x5c
 8002484:	4b81      	ldr	r3, [pc, #516]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002486:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002488:	4b80      	ldr	r3, [pc, #512]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800248a:	2104      	movs	r1, #4
 800248c:	438a      	bics	r2, r1
 800248e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d014      	beq.n	80024c2 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002498:	f7fe fe4a 	bl	8001130 <HAL_GetTick>
 800249c:	0003      	movs	r3, r0
 800249e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024a0:	e009      	b.n	80024b6 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024a2:	f7fe fe45 	bl	8001130 <HAL_GetTick>
 80024a6:	0002      	movs	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	4a79      	ldr	r2, [pc, #484]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024ae:	4293      	cmp	r3, r2
 80024b0:	d901      	bls.n	80024b6 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 80024b2:	2303      	movs	r3, #3
 80024b4:	e0e6      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	4b75      	ldr	r3, [pc, #468]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80024b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ba:	2202      	movs	r2, #2
 80024bc:	4013      	ands	r3, r2
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x42e>
 80024c0:	e013      	b.n	80024ea <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024c2:	f7fe fe35 	bl	8001130 <HAL_GetTick>
 80024c6:	0003      	movs	r3, r0
 80024c8:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024ca:	e009      	b.n	80024e0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80024cc:	f7fe fe30 	bl	8001130 <HAL_GetTick>
 80024d0:	0002      	movs	r2, r0
 80024d2:	693b      	ldr	r3, [r7, #16]
 80024d4:	1ad3      	subs	r3, r2, r3
 80024d6:	4a6f      	ldr	r2, [pc, #444]	; (8002694 <HAL_RCC_OscConfig+0x620>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 80024dc:	2303      	movs	r3, #3
 80024de:	e0d1      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024e0:	4b6a      	ldr	r3, [pc, #424]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80024e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e4:	2202      	movs	r2, #2
 80024e6:	4013      	ands	r3, r2
 80024e8:	d1f0      	bne.n	80024cc <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80024ea:	231f      	movs	r3, #31
 80024ec:	18fb      	adds	r3, r7, r3
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d105      	bne.n	8002500 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80024f4:	4b65      	ldr	r3, [pc, #404]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80024f6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80024fa:	4967      	ldr	r1, [pc, #412]	; (8002698 <HAL_RCC_OscConfig+0x624>)
 80024fc:	400a      	ands	r2, r1
 80024fe:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	69db      	ldr	r3, [r3, #28]
 8002504:	2b00      	cmp	r3, #0
 8002506:	d100      	bne.n	800250a <HAL_RCC_OscConfig+0x496>
 8002508:	e0bb      	b.n	8002682 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800250a:	4b60      	ldr	r3, [pc, #384]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	2238      	movs	r2, #56	; 0x38
 8002510:	4013      	ands	r3, r2
 8002512:	2b10      	cmp	r3, #16
 8002514:	d100      	bne.n	8002518 <HAL_RCC_OscConfig+0x4a4>
 8002516:	e07b      	b.n	8002610 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	69db      	ldr	r3, [r3, #28]
 800251c:	2b02      	cmp	r3, #2
 800251e:	d156      	bne.n	80025ce <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002520:	4b5a      	ldr	r3, [pc, #360]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002522:	681a      	ldr	r2, [r3, #0]
 8002524:	4b59      	ldr	r3, [pc, #356]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002526:	495d      	ldr	r1, [pc, #372]	; (800269c <HAL_RCC_OscConfig+0x628>)
 8002528:	400a      	ands	r2, r1
 800252a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800252c:	f7fe fe00 	bl	8001130 <HAL_GetTick>
 8002530:	0003      	movs	r3, r0
 8002532:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002534:	e008      	b.n	8002548 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002536:	f7fe fdfb 	bl	8001130 <HAL_GetTick>
 800253a:	0002      	movs	r2, r0
 800253c:	693b      	ldr	r3, [r7, #16]
 800253e:	1ad3      	subs	r3, r2, r3
 8002540:	2b02      	cmp	r3, #2
 8002542:	d901      	bls.n	8002548 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002544:	2303      	movs	r3, #3
 8002546:	e09d      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002548:	4b50      	ldr	r3, [pc, #320]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800254a:	681a      	ldr	r2, [r3, #0]
 800254c:	2380      	movs	r3, #128	; 0x80
 800254e:	049b      	lsls	r3, r3, #18
 8002550:	4013      	ands	r3, r2
 8002552:	d1f0      	bne.n	8002536 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002554:	4b4d      	ldr	r3, [pc, #308]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	4a51      	ldr	r2, [pc, #324]	; (80026a0 <HAL_RCC_OscConfig+0x62c>)
 800255a:	4013      	ands	r3, r2
 800255c:	0019      	movs	r1, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6a1a      	ldr	r2, [r3, #32]
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800256c:	021b      	lsls	r3, r3, #8
 800256e:	431a      	orrs	r2, r3
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002574:	431a      	orrs	r2, r3
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800257a:	431a      	orrs	r2, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002580:	431a      	orrs	r2, r3
 8002582:	4b42      	ldr	r3, [pc, #264]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002584:	430a      	orrs	r2, r1
 8002586:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002588:	4b40      	ldr	r3, [pc, #256]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	4b3f      	ldr	r3, [pc, #252]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800258e:	2180      	movs	r1, #128	; 0x80
 8002590:	0449      	lsls	r1, r1, #17
 8002592:	430a      	orrs	r2, r1
 8002594:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002598:	68da      	ldr	r2, [r3, #12]
 800259a:	4b3c      	ldr	r3, [pc, #240]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800259c:	2180      	movs	r1, #128	; 0x80
 800259e:	0549      	lsls	r1, r1, #21
 80025a0:	430a      	orrs	r2, r1
 80025a2:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fdc4 	bl	8001130 <HAL_GetTick>
 80025a8:	0003      	movs	r3, r0
 80025aa:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7fe fdbf 	bl	8001130 <HAL_GetTick>
 80025b2:	0002      	movs	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e061      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80025c0:	4b32      	ldr	r3, [pc, #200]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80025c2:	681a      	ldr	r2, [r3, #0]
 80025c4:	2380      	movs	r3, #128	; 0x80
 80025c6:	049b      	lsls	r3, r3, #18
 80025c8:	4013      	ands	r3, r2
 80025ca:	d0f0      	beq.n	80025ae <HAL_RCC_OscConfig+0x53a>
 80025cc:	e059      	b.n	8002682 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025ce:	4b2f      	ldr	r3, [pc, #188]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	4b2e      	ldr	r3, [pc, #184]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80025d4:	4931      	ldr	r1, [pc, #196]	; (800269c <HAL_RCC_OscConfig+0x628>)
 80025d6:	400a      	ands	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025da:	f7fe fda9 	bl	8001130 <HAL_GetTick>
 80025de:	0003      	movs	r3, r0
 80025e0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025e2:	e008      	b.n	80025f6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fda4 	bl	8001130 <HAL_GetTick>
 80025e8:	0002      	movs	r2, r0
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d901      	bls.n	80025f6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	e046      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025f6:	4b25      	ldr	r3, [pc, #148]	; (800268c <HAL_RCC_OscConfig+0x618>)
 80025f8:	681a      	ldr	r2, [r3, #0]
 80025fa:	2380      	movs	r3, #128	; 0x80
 80025fc:	049b      	lsls	r3, r3, #18
 80025fe:	4013      	ands	r3, r2
 8002600:	d1f0      	bne.n	80025e4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002602:	4b22      	ldr	r3, [pc, #136]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002604:	68da      	ldr	r2, [r3, #12]
 8002606:	4b21      	ldr	r3, [pc, #132]	; (800268c <HAL_RCC_OscConfig+0x618>)
 8002608:	4926      	ldr	r1, [pc, #152]	; (80026a4 <HAL_RCC_OscConfig+0x630>)
 800260a:	400a      	ands	r2, r1
 800260c:	60da      	str	r2, [r3, #12]
 800260e:	e038      	b.n	8002682 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b01      	cmp	r3, #1
 8002616:	d101      	bne.n	800261c <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8002618:	2301      	movs	r3, #1
 800261a:	e033      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 800261c:	4b1b      	ldr	r3, [pc, #108]	; (800268c <HAL_RCC_OscConfig+0x618>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002622:	697b      	ldr	r3, [r7, #20]
 8002624:	2203      	movs	r2, #3
 8002626:	401a      	ands	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	6a1b      	ldr	r3, [r3, #32]
 800262c:	429a      	cmp	r2, r3
 800262e:	d126      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2270      	movs	r2, #112	; 0x70
 8002634:	401a      	ands	r2, r3
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800263a:	429a      	cmp	r2, r3
 800263c:	d11f      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800263e:	697a      	ldr	r2, [r7, #20]
 8002640:	23fe      	movs	r3, #254	; 0xfe
 8002642:	01db      	lsls	r3, r3, #7
 8002644:	401a      	ands	r2, r3
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800264c:	429a      	cmp	r2, r3
 800264e:	d116      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002650:	697a      	ldr	r2, [r7, #20]
 8002652:	23f8      	movs	r3, #248	; 0xf8
 8002654:	039b      	lsls	r3, r3, #14
 8002656:	401a      	ands	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800265c:	429a      	cmp	r2, r3
 800265e:	d10e      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002660:	697a      	ldr	r2, [r7, #20]
 8002662:	23e0      	movs	r3, #224	; 0xe0
 8002664:	051b      	lsls	r3, r3, #20
 8002666:	401a      	ands	r2, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800266c:	429a      	cmp	r2, r3
 800266e:	d106      	bne.n	800267e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	0f5b      	lsrs	r3, r3, #29
 8002674:	075a      	lsls	r2, r3, #29
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800267a:	429a      	cmp	r2, r3
 800267c:	d001      	beq.n	8002682 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800267e:	2301      	movs	r3, #1
 8002680:	e000      	b.n	8002684 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002682:	2300      	movs	r3, #0
}
 8002684:	0018      	movs	r0, r3
 8002686:	46bd      	mov	sp, r7
 8002688:	b008      	add	sp, #32
 800268a:	bd80      	pop	{r7, pc}
 800268c:	40021000 	.word	0x40021000
 8002690:	40007000 	.word	0x40007000
 8002694:	00001388 	.word	0x00001388
 8002698:	efffffff 	.word	0xefffffff
 800269c:	feffffff 	.word	0xfeffffff
 80026a0:	11c1808c 	.word	0x11c1808c
 80026a4:	eefefffc 	.word	0xeefefffc

080026a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
 80026b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d101      	bne.n	80026bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80026b8:	2301      	movs	r3, #1
 80026ba:	e0e9      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80026bc:	4b76      	ldr	r3, [pc, #472]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	2207      	movs	r2, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d91e      	bls.n	8002708 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80026ca:	4b73      	ldr	r3, [pc, #460]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	2207      	movs	r2, #7
 80026d0:	4393      	bics	r3, r2
 80026d2:	0019      	movs	r1, r3
 80026d4:	4b70      	ldr	r3, [pc, #448]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80026d6:	683a      	ldr	r2, [r7, #0]
 80026d8:	430a      	orrs	r2, r1
 80026da:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80026dc:	f7fe fd28 	bl	8001130 <HAL_GetTick>
 80026e0:	0003      	movs	r3, r0
 80026e2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026e4:	e009      	b.n	80026fa <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80026e6:	f7fe fd23 	bl	8001130 <HAL_GetTick>
 80026ea:	0002      	movs	r2, r0
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	4a6a      	ldr	r2, [pc, #424]	; (800289c <HAL_RCC_ClockConfig+0x1f4>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d901      	bls.n	80026fa <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80026f6:	2303      	movs	r3, #3
 80026f8:	e0ca      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80026fa:	4b67      	ldr	r3, [pc, #412]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	2207      	movs	r2, #7
 8002700:	4013      	ands	r3, r2
 8002702:	683a      	ldr	r2, [r7, #0]
 8002704:	429a      	cmp	r2, r3
 8002706:	d1ee      	bne.n	80026e6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	2202      	movs	r2, #2
 800270e:	4013      	ands	r3, r2
 8002710:	d015      	beq.n	800273e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2204      	movs	r2, #4
 8002718:	4013      	ands	r3, r2
 800271a:	d006      	beq.n	800272a <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800271c:	4b60      	ldr	r3, [pc, #384]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002722:	21e0      	movs	r1, #224	; 0xe0
 8002724:	01c9      	lsls	r1, r1, #7
 8002726:	430a      	orrs	r2, r1
 8002728:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800272a:	4b5d      	ldr	r3, [pc, #372]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	4a5d      	ldr	r2, [pc, #372]	; (80028a4 <HAL_RCC_ClockConfig+0x1fc>)
 8002730:	4013      	ands	r3, r2
 8002732:	0019      	movs	r1, r3
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689a      	ldr	r2, [r3, #8]
 8002738:	4b59      	ldr	r3, [pc, #356]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800273a:	430a      	orrs	r2, r1
 800273c:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	2201      	movs	r2, #1
 8002744:	4013      	ands	r3, r2
 8002746:	d057      	beq.n	80027f8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	2b01      	cmp	r3, #1
 800274e:	d107      	bne.n	8002760 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002750:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002752:	681a      	ldr	r2, [r3, #0]
 8002754:	2380      	movs	r3, #128	; 0x80
 8002756:	029b      	lsls	r3, r3, #10
 8002758:	4013      	ands	r3, r2
 800275a:	d12b      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e097      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	2b02      	cmp	r3, #2
 8002766:	d107      	bne.n	8002778 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002768:	4b4d      	ldr	r3, [pc, #308]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	2380      	movs	r3, #128	; 0x80
 800276e:	049b      	lsls	r3, r3, #18
 8002770:	4013      	ands	r3, r2
 8002772:	d11f      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002774:	2301      	movs	r3, #1
 8002776:	e08b      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	2b00      	cmp	r3, #0
 800277e:	d107      	bne.n	8002790 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	4b47      	ldr	r3, [pc, #284]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002782:	681a      	ldr	r2, [r3, #0]
 8002784:	2380      	movs	r3, #128	; 0x80
 8002786:	00db      	lsls	r3, r3, #3
 8002788:	4013      	ands	r3, r2
 800278a:	d113      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e07f      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	2b03      	cmp	r3, #3
 8002796:	d106      	bne.n	80027a6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002798:	4b41      	ldr	r3, [pc, #260]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800279a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800279c:	2202      	movs	r2, #2
 800279e:	4013      	ands	r3, r2
 80027a0:	d108      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e074      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a6:	4b3e      	ldr	r3, [pc, #248]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 80027a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027aa:	2202      	movs	r2, #2
 80027ac:	4013      	ands	r3, r2
 80027ae:	d101      	bne.n	80027b4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80027b0:	2301      	movs	r3, #1
 80027b2:	e06d      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027b4:	4b3a      	ldr	r3, [pc, #232]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	2207      	movs	r2, #7
 80027ba:	4393      	bics	r3, r2
 80027bc:	0019      	movs	r1, r3
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4b37      	ldr	r3, [pc, #220]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 80027c4:	430a      	orrs	r2, r1
 80027c6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027c8:	f7fe fcb2 	bl	8001130 <HAL_GetTick>
 80027cc:	0003      	movs	r3, r0
 80027ce:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027d0:	e009      	b.n	80027e6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80027d2:	f7fe fcad 	bl	8001130 <HAL_GetTick>
 80027d6:	0002      	movs	r2, r0
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	1ad3      	subs	r3, r2, r3
 80027dc:	4a2f      	ldr	r2, [pc, #188]	; (800289c <HAL_RCC_ClockConfig+0x1f4>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d901      	bls.n	80027e6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80027e2:	2303      	movs	r3, #3
 80027e4:	e054      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027e6:	4b2e      	ldr	r3, [pc, #184]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	2238      	movs	r2, #56	; 0x38
 80027ec:	401a      	ands	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	00db      	lsls	r3, r3, #3
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d1ec      	bne.n	80027d2 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80027f8:	4b27      	ldr	r3, [pc, #156]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	2207      	movs	r2, #7
 80027fe:	4013      	ands	r3, r2
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	429a      	cmp	r2, r3
 8002804:	d21e      	bcs.n	8002844 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002806:	4b24      	ldr	r3, [pc, #144]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	2207      	movs	r2, #7
 800280c:	4393      	bics	r3, r2
 800280e:	0019      	movs	r1, r3
 8002810:	4b21      	ldr	r3, [pc, #132]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002812:	683a      	ldr	r2, [r7, #0]
 8002814:	430a      	orrs	r2, r1
 8002816:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002818:	f7fe fc8a 	bl	8001130 <HAL_GetTick>
 800281c:	0003      	movs	r3, r0
 800281e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002820:	e009      	b.n	8002836 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002822:	f7fe fc85 	bl	8001130 <HAL_GetTick>
 8002826:	0002      	movs	r2, r0
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	1ad3      	subs	r3, r2, r3
 800282c:	4a1b      	ldr	r2, [pc, #108]	; (800289c <HAL_RCC_ClockConfig+0x1f4>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d901      	bls.n	8002836 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002832:	2303      	movs	r3, #3
 8002834:	e02c      	b.n	8002890 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002836:	4b18      	ldr	r3, [pc, #96]	; (8002898 <HAL_RCC_ClockConfig+0x1f0>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	2207      	movs	r2, #7
 800283c:	4013      	ands	r3, r2
 800283e:	683a      	ldr	r2, [r7, #0]
 8002840:	429a      	cmp	r2, r3
 8002842:	d1ee      	bne.n	8002822 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2204      	movs	r2, #4
 800284a:	4013      	ands	r3, r2
 800284c:	d009      	beq.n	8002862 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	4a15      	ldr	r2, [pc, #84]	; (80028a8 <HAL_RCC_ClockConfig+0x200>)
 8002854:	4013      	ands	r3, r2
 8002856:	0019      	movs	r1, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	68da      	ldr	r2, [r3, #12]
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800285e:	430a      	orrs	r2, r1
 8002860:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002862:	f000 f829 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8002866:	0001      	movs	r1, r0
 8002868:	4b0d      	ldr	r3, [pc, #52]	; (80028a0 <HAL_RCC_ClockConfig+0x1f8>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	0a1b      	lsrs	r3, r3, #8
 800286e:	220f      	movs	r2, #15
 8002870:	401a      	ands	r2, r3
 8002872:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_RCC_ClockConfig+0x204>)
 8002874:	0092      	lsls	r2, r2, #2
 8002876:	58d3      	ldr	r3, [r2, r3]
 8002878:	221f      	movs	r2, #31
 800287a:	4013      	ands	r3, r2
 800287c:	000a      	movs	r2, r1
 800287e:	40da      	lsrs	r2, r3
 8002880:	4b0b      	ldr	r3, [pc, #44]	; (80028b0 <HAL_RCC_ClockConfig+0x208>)
 8002882:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_ClockConfig+0x20c>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	0018      	movs	r0, r3
 800288a:	f7fe fb3f 	bl	8000f0c <HAL_InitTick>
 800288e:	0003      	movs	r3, r0
}
 8002890:	0018      	movs	r0, r3
 8002892:	46bd      	mov	sp, r7
 8002894:	b004      	add	sp, #16
 8002896:	bd80      	pop	{r7, pc}
 8002898:	40022000 	.word	0x40022000
 800289c:	00001388 	.word	0x00001388
 80028a0:	40021000 	.word	0x40021000
 80028a4:	fffff0ff 	.word	0xfffff0ff
 80028a8:	ffff8fff 	.word	0xffff8fff
 80028ac:	080076c4 	.word	0x080076c4
 80028b0:	20000000 	.word	0x20000000
 80028b4:	20000004 	.word	0x20000004

080028b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b086      	sub	sp, #24
 80028bc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028be:	4b3c      	ldr	r3, [pc, #240]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028c0:	689b      	ldr	r3, [r3, #8]
 80028c2:	2238      	movs	r2, #56	; 0x38
 80028c4:	4013      	ands	r3, r2
 80028c6:	d10f      	bne.n	80028e8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80028c8:	4b39      	ldr	r3, [pc, #228]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	0adb      	lsrs	r3, r3, #11
 80028ce:	2207      	movs	r2, #7
 80028d0:	4013      	ands	r3, r2
 80028d2:	2201      	movs	r2, #1
 80028d4:	409a      	lsls	r2, r3
 80028d6:	0013      	movs	r3, r2
 80028d8:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80028da:	6839      	ldr	r1, [r7, #0]
 80028dc:	4835      	ldr	r0, [pc, #212]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 80028de:	f7fd fc13 	bl	8000108 <__udivsi3>
 80028e2:	0003      	movs	r3, r0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	e05d      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028e8:	4b31      	ldr	r3, [pc, #196]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	2238      	movs	r2, #56	; 0x38
 80028ee:	4013      	ands	r3, r2
 80028f0:	2b08      	cmp	r3, #8
 80028f2:	d102      	bne.n	80028fa <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80028f4:	4b30      	ldr	r3, [pc, #192]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x100>)
 80028f6:	613b      	str	r3, [r7, #16]
 80028f8:	e054      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80028fa:	4b2d      	ldr	r3, [pc, #180]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	2238      	movs	r2, #56	; 0x38
 8002900:	4013      	ands	r3, r2
 8002902:	2b10      	cmp	r3, #16
 8002904:	d138      	bne.n	8002978 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002906:	4b2a      	ldr	r3, [pc, #168]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002908:	68db      	ldr	r3, [r3, #12]
 800290a:	2203      	movs	r2, #3
 800290c:	4013      	ands	r3, r2
 800290e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002910:	4b27      	ldr	r3, [pc, #156]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002912:	68db      	ldr	r3, [r3, #12]
 8002914:	091b      	lsrs	r3, r3, #4
 8002916:	2207      	movs	r2, #7
 8002918:	4013      	ands	r3, r2
 800291a:	3301      	adds	r3, #1
 800291c:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b03      	cmp	r3, #3
 8002922:	d10d      	bne.n	8002940 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002924:	68b9      	ldr	r1, [r7, #8]
 8002926:	4824      	ldr	r0, [pc, #144]	; (80029b8 <HAL_RCC_GetSysClockFreq+0x100>)
 8002928:	f7fd fbee 	bl	8000108 <__udivsi3>
 800292c:	0003      	movs	r3, r0
 800292e:	0019      	movs	r1, r3
 8002930:	4b1f      	ldr	r3, [pc, #124]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	0a1b      	lsrs	r3, r3, #8
 8002936:	227f      	movs	r2, #127	; 0x7f
 8002938:	4013      	ands	r3, r2
 800293a:	434b      	muls	r3, r1
 800293c:	617b      	str	r3, [r7, #20]
        break;
 800293e:	e00d      	b.n	800295c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002940:	68b9      	ldr	r1, [r7, #8]
 8002942:	481c      	ldr	r0, [pc, #112]	; (80029b4 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002944:	f7fd fbe0 	bl	8000108 <__udivsi3>
 8002948:	0003      	movs	r3, r0
 800294a:	0019      	movs	r1, r3
 800294c:	4b18      	ldr	r3, [pc, #96]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	0a1b      	lsrs	r3, r3, #8
 8002952:	227f      	movs	r2, #127	; 0x7f
 8002954:	4013      	ands	r3, r2
 8002956:	434b      	muls	r3, r1
 8002958:	617b      	str	r3, [r7, #20]
        break;
 800295a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800295c:	4b14      	ldr	r3, [pc, #80]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800295e:	68db      	ldr	r3, [r3, #12]
 8002960:	0f5b      	lsrs	r3, r3, #29
 8002962:	2207      	movs	r2, #7
 8002964:	4013      	ands	r3, r2
 8002966:	3301      	adds	r3, #1
 8002968:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800296a:	6879      	ldr	r1, [r7, #4]
 800296c:	6978      	ldr	r0, [r7, #20]
 800296e:	f7fd fbcb 	bl	8000108 <__udivsi3>
 8002972:	0003      	movs	r3, r0
 8002974:	613b      	str	r3, [r7, #16]
 8002976:	e015      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	2238      	movs	r2, #56	; 0x38
 800297e:	4013      	ands	r3, r2
 8002980:	2b20      	cmp	r3, #32
 8002982:	d103      	bne.n	800298c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002984:	2380      	movs	r3, #128	; 0x80
 8002986:	021b      	lsls	r3, r3, #8
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	e00b      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800298c:	4b08      	ldr	r3, [pc, #32]	; (80029b0 <HAL_RCC_GetSysClockFreq+0xf8>)
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	2238      	movs	r2, #56	; 0x38
 8002992:	4013      	ands	r3, r2
 8002994:	2b18      	cmp	r3, #24
 8002996:	d103      	bne.n	80029a0 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002998:	23fa      	movs	r3, #250	; 0xfa
 800299a:	01db      	lsls	r3, r3, #7
 800299c:	613b      	str	r3, [r7, #16]
 800299e:	e001      	b.n	80029a4 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80029a4:	693b      	ldr	r3, [r7, #16]
}
 80029a6:	0018      	movs	r0, r3
 80029a8:	46bd      	mov	sp, r7
 80029aa:	b006      	add	sp, #24
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	46c0      	nop			; (mov r8, r8)
 80029b0:	40021000 	.word	0x40021000
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	007a1200 	.word	0x007a1200

080029bc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80029c0:	4b02      	ldr	r3, [pc, #8]	; (80029cc <HAL_RCC_GetHCLKFreq+0x10>)
 80029c2:	681b      	ldr	r3, [r3, #0]
}
 80029c4:	0018      	movs	r0, r3
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	46c0      	nop			; (mov r8, r8)
 80029cc:	20000000 	.word	0x20000000

080029d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80029d0:	b5b0      	push	{r4, r5, r7, lr}
 80029d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 80029d4:	f7ff fff2 	bl	80029bc <HAL_RCC_GetHCLKFreq>
 80029d8:	0004      	movs	r4, r0
 80029da:	f7ff fb3f 	bl	800205c <LL_RCC_GetAPB1Prescaler>
 80029de:	0003      	movs	r3, r0
 80029e0:	0b1a      	lsrs	r2, r3, #12
 80029e2:	4b05      	ldr	r3, [pc, #20]	; (80029f8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80029e4:	0092      	lsls	r2, r2, #2
 80029e6:	58d3      	ldr	r3, [r2, r3]
 80029e8:	221f      	movs	r2, #31
 80029ea:	4013      	ands	r3, r2
 80029ec:	40dc      	lsrs	r4, r3
 80029ee:	0023      	movs	r3, r4
}
 80029f0:	0018      	movs	r0, r3
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bdb0      	pop	{r4, r5, r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	08007704 	.word	0x08007704

080029fc <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
 8002a04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	2207      	movs	r2, #7
 8002a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002a0c:	4b0e      	ldr	r3, [pc, #56]	; (8002a48 <HAL_RCC_GetClockConfig+0x4c>)
 8002a0e:	689b      	ldr	r3, [r3, #8]
 8002a10:	2207      	movs	r2, #7
 8002a12:	401a      	ands	r2, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002a18:	4b0b      	ldr	r3, [pc, #44]	; (8002a48 <HAL_RCC_GetClockConfig+0x4c>)
 8002a1a:	689a      	ldr	r2, [r3, #8]
 8002a1c:	23f0      	movs	r3, #240	; 0xf0
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	401a      	ands	r2, r3
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8002a26:	4b08      	ldr	r3, [pc, #32]	; (8002a48 <HAL_RCC_GetClockConfig+0x4c>)
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	23e0      	movs	r3, #224	; 0xe0
 8002a2c:	01db      	lsls	r3, r3, #7
 8002a2e:	401a      	ands	r2, r3
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002a34:	4b05      	ldr	r3, [pc, #20]	; (8002a4c <HAL_RCC_GetClockConfig+0x50>)
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	2207      	movs	r2, #7
 8002a3a:	401a      	ands	r2, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	601a      	str	r2, [r3, #0]
}
 8002a40:	46c0      	nop			; (mov r8, r8)
 8002a42:	46bd      	mov	sp, r7
 8002a44:	b002      	add	sp, #8
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40022000 	.word	0x40022000

08002a50 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b086      	sub	sp, #24
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002a58:	2313      	movs	r3, #19
 8002a5a:	18fb      	adds	r3, r7, r3
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002a60:	2312      	movs	r3, #18
 8002a62:	18fb      	adds	r3, r7, r3
 8002a64:	2200      	movs	r2, #0
 8002a66:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	2380      	movs	r3, #128	; 0x80
 8002a6e:	029b      	lsls	r3, r3, #10
 8002a70:	4013      	ands	r3, r2
 8002a72:	d100      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002a74:	e0a3      	b.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a76:	2011      	movs	r0, #17
 8002a78:	183b      	adds	r3, r7, r0
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a7e:	4bc3      	ldr	r3, [pc, #780]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a80:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a82:	2380      	movs	r3, #128	; 0x80
 8002a84:	055b      	lsls	r3, r3, #21
 8002a86:	4013      	ands	r3, r2
 8002a88:	d110      	bne.n	8002aac <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a8a:	4bc0      	ldr	r3, [pc, #768]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a8e:	4bbf      	ldr	r3, [pc, #764]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a90:	2180      	movs	r1, #128	; 0x80
 8002a92:	0549      	lsls	r1, r1, #21
 8002a94:	430a      	orrs	r2, r1
 8002a96:	63da      	str	r2, [r3, #60]	; 0x3c
 8002a98:	4bbc      	ldr	r3, [pc, #752]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002a9a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002a9c:	2380      	movs	r3, #128	; 0x80
 8002a9e:	055b      	lsls	r3, r3, #21
 8002aa0:	4013      	ands	r3, r2
 8002aa2:	60bb      	str	r3, [r7, #8]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002aa6:	183b      	adds	r3, r7, r0
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002aac:	4bb8      	ldr	r3, [pc, #736]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002aae:	681a      	ldr	r2, [r3, #0]
 8002ab0:	4bb7      	ldr	r3, [pc, #732]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ab2:	2180      	movs	r1, #128	; 0x80
 8002ab4:	0049      	lsls	r1, r1, #1
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002aba:	f7fe fb39 	bl	8001130 <HAL_GetTick>
 8002abe:	0003      	movs	r3, r0
 8002ac0:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ac2:	e00b      	b.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac4:	f7fe fb34 	bl	8001130 <HAL_GetTick>
 8002ac8:	0002      	movs	r2, r0
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	1ad3      	subs	r3, r2, r3
 8002ace:	2b02      	cmp	r3, #2
 8002ad0:	d904      	bls.n	8002adc <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002ad2:	2313      	movs	r3, #19
 8002ad4:	18fb      	adds	r3, r7, r3
 8002ad6:	2203      	movs	r2, #3
 8002ad8:	701a      	strb	r2, [r3, #0]
        break;
 8002ada:	e005      	b.n	8002ae8 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002adc:	4bac      	ldr	r3, [pc, #688]	; (8002d90 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8002ade:	681a      	ldr	r2, [r3, #0]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	005b      	lsls	r3, r3, #1
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	d0ed      	beq.n	8002ac4 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002ae8:	2313      	movs	r3, #19
 8002aea:	18fb      	adds	r3, r7, r3
 8002aec:	781b      	ldrb	r3, [r3, #0]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d154      	bne.n	8002b9c <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002af2:	4ba6      	ldr	r3, [pc, #664]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002af4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002af6:	23c0      	movs	r3, #192	; 0xc0
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4013      	ands	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d019      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b08:	697a      	ldr	r2, [r7, #20]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d014      	beq.n	8002b38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002b0e:	4b9f      	ldr	r3, [pc, #636]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b12:	4aa0      	ldr	r2, [pc, #640]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002b18:	4b9c      	ldr	r3, [pc, #624]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b1a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b1c:	4b9b      	ldr	r3, [pc, #620]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	0249      	lsls	r1, r1, #9
 8002b22:	430a      	orrs	r2, r1
 8002b24:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002b26:	4b99      	ldr	r3, [pc, #612]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b28:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002b2a:	4b98      	ldr	r3, [pc, #608]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b2c:	499a      	ldr	r1, [pc, #616]	; (8002d98 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8002b2e:	400a      	ands	r2, r1
 8002b30:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002b32:	4b96      	ldr	r3, [pc, #600]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b34:	697a      	ldr	r2, [r7, #20]
 8002b36:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	4013      	ands	r3, r2
 8002b3e:	d016      	beq.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b40:	f7fe faf6 	bl	8001130 <HAL_GetTick>
 8002b44:	0003      	movs	r3, r0
 8002b46:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b48:	e00c      	b.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002b4a:	f7fe faf1 	bl	8001130 <HAL_GetTick>
 8002b4e:	0002      	movs	r2, r0
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	1ad3      	subs	r3, r2, r3
 8002b54:	4a91      	ldr	r2, [pc, #580]	; (8002d9c <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 8002b56:	4293      	cmp	r3, r2
 8002b58:	d904      	bls.n	8002b64 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002b5a:	2313      	movs	r3, #19
 8002b5c:	18fb      	adds	r3, r7, r3
 8002b5e:	2203      	movs	r2, #3
 8002b60:	701a      	strb	r2, [r3, #0]
            break;
 8002b62:	e004      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002b64:	4b89      	ldr	r3, [pc, #548]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b68:	2202      	movs	r2, #2
 8002b6a:	4013      	ands	r3, r2
 8002b6c:	d0ed      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002b6e:	2313      	movs	r3, #19
 8002b70:	18fb      	adds	r3, r7, r3
 8002b72:	781b      	ldrb	r3, [r3, #0]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d10a      	bne.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002b78:	4b84      	ldr	r3, [pc, #528]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b7c:	4a85      	ldr	r2, [pc, #532]	; (8002d94 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002b7e:	4013      	ands	r3, r2
 8002b80:	0019      	movs	r1, r3
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002b86:	4b81      	ldr	r3, [pc, #516]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002b88:	430a      	orrs	r2, r1
 8002b8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b8c:	e00c      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002b8e:	2312      	movs	r3, #18
 8002b90:	18fb      	adds	r3, r7, r3
 8002b92:	2213      	movs	r2, #19
 8002b94:	18ba      	adds	r2, r7, r2
 8002b96:	7812      	ldrb	r2, [r2, #0]
 8002b98:	701a      	strb	r2, [r3, #0]
 8002b9a:	e005      	b.n	8002ba8 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002b9c:	2312      	movs	r3, #18
 8002b9e:	18fb      	adds	r3, r7, r3
 8002ba0:	2213      	movs	r2, #19
 8002ba2:	18ba      	adds	r2, r7, r2
 8002ba4:	7812      	ldrb	r2, [r2, #0]
 8002ba6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002ba8:	2311      	movs	r3, #17
 8002baa:	18fb      	adds	r3, r7, r3
 8002bac:	781b      	ldrb	r3, [r3, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d105      	bne.n	8002bbe <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002bb2:	4b76      	ldr	r3, [pc, #472]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002bb6:	4b75      	ldr	r3, [pc, #468]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bb8:	4979      	ldr	r1, [pc, #484]	; (8002da0 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002bba:	400a      	ands	r2, r1
 8002bbc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2201      	movs	r2, #1
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	d009      	beq.n	8002bdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002bc8:	4b70      	ldr	r3, [pc, #448]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2203      	movs	r2, #3
 8002bce:	4393      	bics	r3, r2
 8002bd0:	0019      	movs	r1, r3
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	4b6d      	ldr	r3, [pc, #436]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2202      	movs	r2, #2
 8002be2:	4013      	ands	r3, r2
 8002be4:	d009      	beq.n	8002bfa <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002be6:	4b69      	ldr	r3, [pc, #420]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002be8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bea:	220c      	movs	r2, #12
 8002bec:	4393      	bics	r3, r2
 8002bee:	0019      	movs	r1, r3
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	4b65      	ldr	r3, [pc, #404]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002bf6:	430a      	orrs	r2, r1
 8002bf8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	2210      	movs	r2, #16
 8002c00:	4013      	ands	r3, r2
 8002c02:	d009      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002c04:	4b61      	ldr	r3, [pc, #388]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c08:	4a66      	ldr	r2, [pc, #408]	; (8002da4 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	0019      	movs	r1, r3
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	68da      	ldr	r2, [r3, #12]
 8002c12:	4b5e      	ldr	r3, [pc, #376]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c14:	430a      	orrs	r2, r1
 8002c16:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681a      	ldr	r2, [r3, #0]
 8002c1c:	2380      	movs	r3, #128	; 0x80
 8002c1e:	009b      	lsls	r3, r3, #2
 8002c20:	4013      	ands	r3, r2
 8002c22:	d009      	beq.n	8002c38 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002c24:	4b59      	ldr	r3, [pc, #356]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c28:	4a5f      	ldr	r2, [pc, #380]	; (8002da8 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002c2a:	4013      	ands	r3, r2
 8002c2c:	0019      	movs	r1, r3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	699a      	ldr	r2, [r3, #24]
 8002c32:	4b56      	ldr	r3, [pc, #344]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c34:	430a      	orrs	r2, r1
 8002c36:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2380      	movs	r3, #128	; 0x80
 8002c3e:	00db      	lsls	r3, r3, #3
 8002c40:	4013      	ands	r3, r2
 8002c42:	d009      	beq.n	8002c58 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002c44:	4b51      	ldr	r3, [pc, #324]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c46:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c48:	4a58      	ldr	r2, [pc, #352]	; (8002dac <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8002c4a:	4013      	ands	r3, r2
 8002c4c:	0019      	movs	r1, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	69da      	ldr	r2, [r3, #28]
 8002c52:	4b4e      	ldr	r3, [pc, #312]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c54:	430a      	orrs	r2, r1
 8002c56:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	2220      	movs	r2, #32
 8002c5e:	4013      	ands	r3, r2
 8002c60:	d009      	beq.n	8002c76 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002c62:	4b4a      	ldr	r3, [pc, #296]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c66:	4a52      	ldr	r2, [pc, #328]	; (8002db0 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 8002c68:	4013      	ands	r3, r2
 8002c6a:	0019      	movs	r1, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	691a      	ldr	r2, [r3, #16]
 8002c70:	4b46      	ldr	r3, [pc, #280]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c72:	430a      	orrs	r2, r1
 8002c74:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	2380      	movs	r3, #128	; 0x80
 8002c7c:	01db      	lsls	r3, r3, #7
 8002c7e:	4013      	ands	r3, r2
 8002c80:	d015      	beq.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002c82:	4b42      	ldr	r3, [pc, #264]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c86:	009b      	lsls	r3, r3, #2
 8002c88:	0899      	lsrs	r1, r3, #2
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1a      	ldr	r2, [r3, #32]
 8002c8e:	4b3f      	ldr	r3, [pc, #252]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002c90:	430a      	orrs	r2, r1
 8002c92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	6a1a      	ldr	r2, [r3, #32]
 8002c98:	2380      	movs	r3, #128	; 0x80
 8002c9a:	05db      	lsls	r3, r3, #23
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	d106      	bne.n	8002cae <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002ca0:	4b3a      	ldr	r3, [pc, #232]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca2:	68da      	ldr	r2, [r3, #12]
 8002ca4:	4b39      	ldr	r3, [pc, #228]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002ca6:	2180      	movs	r1, #128	; 0x80
 8002ca8:	0249      	lsls	r1, r1, #9
 8002caa:	430a      	orrs	r2, r1
 8002cac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681a      	ldr	r2, [r3, #0]
 8002cb2:	2380      	movs	r3, #128	; 0x80
 8002cb4:	031b      	lsls	r3, r3, #12
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d009      	beq.n	8002cce <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002cba:	4b34      	ldr	r3, [pc, #208]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cbc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cbe:	2240      	movs	r2, #64	; 0x40
 8002cc0:	4393      	bics	r3, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002cc8:	4b30      	ldr	r3, [pc, #192]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681a      	ldr	r2, [r3, #0]
 8002cd2:	2380      	movs	r3, #128	; 0x80
 8002cd4:	039b      	lsls	r3, r3, #14
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d016      	beq.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002cda:	4b2c      	ldr	r3, [pc, #176]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002cde:	4a35      	ldr	r2, [pc, #212]	; (8002db4 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	0019      	movs	r1, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ce8:	4b28      	ldr	r3, [pc, #160]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cea:	430a      	orrs	r2, r1
 8002cec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cf2:	2380      	movs	r3, #128	; 0x80
 8002cf4:	03db      	lsls	r3, r3, #15
 8002cf6:	429a      	cmp	r2, r3
 8002cf8:	d106      	bne.n	8002d08 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002cfa:	4b24      	ldr	r3, [pc, #144]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002cfc:	68da      	ldr	r2, [r3, #12]
 8002cfe:	4b23      	ldr	r3, [pc, #140]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d00:	2180      	movs	r1, #128	; 0x80
 8002d02:	0449      	lsls	r1, r1, #17
 8002d04:	430a      	orrs	r2, r1
 8002d06:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681a      	ldr	r2, [r3, #0]
 8002d0c:	2380      	movs	r3, #128	; 0x80
 8002d0e:	03db      	lsls	r3, r3, #15
 8002d10:	4013      	ands	r3, r2
 8002d12:	d016      	beq.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002d14:	4b1d      	ldr	r3, [pc, #116]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002d1a:	4013      	ands	r3, r2
 8002d1c:	0019      	movs	r1, r3
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d22:	4b1a      	ldr	r3, [pc, #104]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d24:	430a      	orrs	r2, r1
 8002d26:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d2c:	2380      	movs	r3, #128	; 0x80
 8002d2e:	045b      	lsls	r3, r3, #17
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d106      	bne.n	8002d42 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002d34:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d36:	68da      	ldr	r2, [r3, #12]
 8002d38:	4b14      	ldr	r3, [pc, #80]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d3a:	2180      	movs	r1, #128	; 0x80
 8002d3c:	0449      	lsls	r1, r1, #17
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	2380      	movs	r3, #128	; 0x80
 8002d48:	011b      	lsls	r3, r3, #4
 8002d4a:	4013      	ands	r3, r2
 8002d4c:	d016      	beq.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002d4e:	4b0f      	ldr	r3, [pc, #60]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d50:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d52:	4a1a      	ldr	r2, [pc, #104]	; (8002dbc <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8002d54:	4013      	ands	r3, r2
 8002d56:	0019      	movs	r1, r3
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	695a      	ldr	r2, [r3, #20]
 8002d5c:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	695a      	ldr	r2, [r3, #20]
 8002d66:	2380      	movs	r3, #128	; 0x80
 8002d68:	01db      	lsls	r3, r3, #7
 8002d6a:	429a      	cmp	r2, r3
 8002d6c:	d106      	bne.n	8002d7c <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002d6e:	4b07      	ldr	r3, [pc, #28]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d70:	68da      	ldr	r2, [r3, #12]
 8002d72:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002d74:	2180      	movs	r1, #128	; 0x80
 8002d76:	0249      	lsls	r1, r1, #9
 8002d78:	430a      	orrs	r2, r1
 8002d7a:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002d7c:	2312      	movs	r3, #18
 8002d7e:	18fb      	adds	r3, r7, r3
 8002d80:	781b      	ldrb	r3, [r3, #0]
}
 8002d82:	0018      	movs	r0, r3
 8002d84:	46bd      	mov	sp, r7
 8002d86:	b006      	add	sp, #24
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	46c0      	nop			; (mov r8, r8)
 8002d8c:	40021000 	.word	0x40021000
 8002d90:	40007000 	.word	0x40007000
 8002d94:	fffffcff 	.word	0xfffffcff
 8002d98:	fffeffff 	.word	0xfffeffff
 8002d9c:	00001388 	.word	0x00001388
 8002da0:	efffffff 	.word	0xefffffff
 8002da4:	fffff3ff 	.word	0xfffff3ff
 8002da8:	fff3ffff 	.word	0xfff3ffff
 8002dac:	ffcfffff 	.word	0xffcfffff
 8002db0:	ffffcfff 	.word	0xffffcfff
 8002db4:	ffbfffff 	.word	0xffbfffff
 8002db8:	feffffff 	.word	0xfeffffff
 8002dbc:	ffff3fff 	.word	0xffff3fff

08002dc0 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002dc0:	b5b0      	push	{r4, r5, r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002dc8:	230f      	movs	r3, #15
 8002dca:	18fb      	adds	r3, r7, r3
 8002dcc:	2201      	movs	r2, #1
 8002dce:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if(hrtc != NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d100      	bne.n	8002dd8 <HAL_RTC_Init+0x18>
 8002dd6:	e08c      	b.n	8002ef2 <HAL_RTC_Init+0x132>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if(hrtc->State == HAL_RTC_STATE_RESET)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2229      	movs	r2, #41	; 0x29
 8002ddc:	5c9b      	ldrb	r3, [r3, r2]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d10b      	bne.n	8002dfc <HAL_RTC_Init+0x3c>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2228      	movs	r2, #40	; 0x28
 8002de8:	2100      	movs	r1, #0
 8002dea:	5499      	strb	r1, [r3, r2]

      /* Process TAMP peripheral offset from RTC one */
      hrtc->TampOffset = (TAMP_BASE - RTC_BASE);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2288      	movs	r2, #136	; 0x88
 8002df0:	0212      	lsls	r2, r2, #8
 8002df2:	605a      	str	r2, [r3, #4]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	0018      	movs	r0, r3
 8002df8:	f7fd ff0a 	bl	8000c10 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2229      	movs	r2, #41	; 0x29
 8002e00:	2102      	movs	r1, #2
 8002e02:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	4013      	ands	r3, r2
 8002e0e:	2b10      	cmp	r3, #16
 8002e10:	d062      	beq.n	8002ed8 <HAL_RTC_Init+0x118>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	22ca      	movs	r2, #202	; 0xca
 8002e18:	625a      	str	r2, [r3, #36]	; 0x24
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2253      	movs	r2, #83	; 0x53
 8002e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 8002e22:	250f      	movs	r5, #15
 8002e24:	197c      	adds	r4, r7, r5
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	0018      	movs	r0, r3
 8002e2a:	f000 f9cc 	bl	80031c6 <RTC_EnterInitMode>
 8002e2e:	0003      	movs	r3, r0
 8002e30:	7023      	strb	r3, [r4, #0]

      if(status == HAL_OK)
 8002e32:	0028      	movs	r0, r5
 8002e34:	183b      	adds	r3, r7, r0
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d12c      	bne.n	8002e96 <HAL_RTC_Init+0xd6>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL | RTC_CR_TAMPOE);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	699a      	ldr	r2, [r3, #24]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	492e      	ldr	r1, [pc, #184]	; (8002f00 <HAL_RTC_Init+0x140>)
 8002e48:	400a      	ands	r2, r1
 8002e4a:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6999      	ldr	r1, [r3, #24]
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	695b      	ldr	r3, [r3, #20]
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	69db      	ldr	r3, [r3, #28]
 8002e60:	431a      	orrs	r2, r3
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	687a      	ldr	r2, [r7, #4]
 8002e70:	6912      	ldr	r2, [r2, #16]
 8002e72:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6919      	ldr	r1, [r3, #16]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	68db      	ldr	r3, [r3, #12]
 8002e7e:	041a      	lsls	r2, r3, #16
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	430a      	orrs	r2, r1
 8002e86:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002e88:	183c      	adds	r4, r7, r0
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	0018      	movs	r0, r3
 8002e8e:	f000 f9dd 	bl	800324c <RTC_ExitInitMode>
 8002e92:	0003      	movs	r3, r0
 8002e94:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002e96:	230f      	movs	r3, #15
 8002e98:	18fb      	adds	r3, r7, r3
 8002e9a:	781b      	ldrb	r3, [r3, #0]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d116      	bne.n	8002ece <HAL_RTC_Init+0x10e>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU |RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699a      	ldr	r2, [r3, #24]
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	00d2      	lsls	r2, r2, #3
 8002eac:	08d2      	lsrs	r2, r2, #3
 8002eae:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	6999      	ldr	r1, [r3, #24]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6a1b      	ldr	r3, [r3, #32]
 8002ebe:	431a      	orrs	r2, r3
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	431a      	orrs	r2, r3
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	619a      	str	r2, [r3, #24]
      }

      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	22ff      	movs	r2, #255	; 0xff
 8002ed4:	625a      	str	r2, [r3, #36]	; 0x24
 8002ed6:	e003      	b.n	8002ee0 <HAL_RTC_Init+0x120>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 8002ed8:	230f      	movs	r3, #15
 8002eda:	18fb      	adds	r3, r7, r3
 8002edc:	2200      	movs	r2, #0
 8002ede:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 8002ee0:	230f      	movs	r3, #15
 8002ee2:	18fb      	adds	r3, r7, r3
 8002ee4:	781b      	ldrb	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d103      	bne.n	8002ef2 <HAL_RTC_Init+0x132>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	2229      	movs	r2, #41	; 0x29
 8002eee:	2101      	movs	r1, #1
 8002ef0:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 8002ef2:	230f      	movs	r3, #15
 8002ef4:	18fb      	adds	r3, r7, r3
 8002ef6:	781b      	ldrb	r3, [r3, #0]
}
 8002ef8:	0018      	movs	r0, r3
 8002efa:	46bd      	mov	sp, r7
 8002efc:	b004      	add	sp, #16
 8002efe:	bdb0      	pop	{r4, r5, r7, pc}
 8002f00:	fb8fffbf 	.word	0xfb8fffbf

08002f04 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f04:	b5b0      	push	{r4, r5, r7, lr}
 8002f06:	b086      	sub	sp, #24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	2228      	movs	r2, #40	; 0x28
 8002f14:	5c9b      	ldrb	r3, [r3, r2]
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d101      	bne.n	8002f1e <HAL_RTC_SetTime+0x1a>
 8002f1a:	2302      	movs	r3, #2
 8002f1c:	e092      	b.n	8003044 <HAL_RTC_SetTime+0x140>
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2228      	movs	r2, #40	; 0x28
 8002f22:	2101      	movs	r1, #1
 8002f24:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	2229      	movs	r2, #41	; 0x29
 8002f2a:	2102      	movs	r1, #2
 8002f2c:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	22ca      	movs	r2, #202	; 0xca
 8002f34:	625a      	str	r2, [r3, #36]	; 0x24
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	2253      	movs	r2, #83	; 0x53
 8002f3c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002f3e:	2513      	movs	r5, #19
 8002f40:	197c      	adds	r4, r7, r5
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	0018      	movs	r0, r3
 8002f46:	f000 f93e 	bl	80031c6 <RTC_EnterInitMode>
 8002f4a:	0003      	movs	r3, r0
 8002f4c:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8002f4e:	197b      	adds	r3, r7, r5
 8002f50:	781b      	ldrb	r3, [r3, #0]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d162      	bne.n	800301c <HAL_RTC_SetTime+0x118>
  {
    if(Format == RTC_FORMAT_BIN)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d125      	bne.n	8002fa8 <HAL_RTC_SetTime+0xa4>
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	2240      	movs	r2, #64	; 0x40
 8002f64:	4013      	ands	r3, r2
 8002f66:	d102      	bne.n	8002f6e <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002f68:	68bb      	ldr	r3, [r7, #8]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f6e:	68bb      	ldr	r3, [r7, #8]
 8002f70:	781b      	ldrb	r3, [r3, #0]
 8002f72:	0018      	movs	r0, r3
 8002f74:	f000 f9ae 	bl	80032d4 <RTC_ByteToBcd2>
 8002f78:	0003      	movs	r3, r0
 8002f7a:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f7c:	68bb      	ldr	r3, [r7, #8]
 8002f7e:	785b      	ldrb	r3, [r3, #1]
 8002f80:	0018      	movs	r0, r3
 8002f82:	f000 f9a7 	bl	80032d4 <RTC_ByteToBcd2>
 8002f86:	0003      	movs	r3, r0
 8002f88:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002f8a:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002f8c:	68bb      	ldr	r3, [r7, #8]
 8002f8e:	789b      	ldrb	r3, [r3, #2]
 8002f90:	0018      	movs	r0, r3
 8002f92:	f000 f99f 	bl	80032d4 <RTC_ByteToBcd2>
 8002f96:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002f98:	0022      	movs	r2, r4
 8002f9a:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002f9c:	68bb      	ldr	r3, [r7, #8]
 8002f9e:	78db      	ldrb	r3, [r3, #3]
 8002fa0:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	617b      	str	r3, [r7, #20]
 8002fa6:	e017      	b.n	8002fd8 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
    if((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	2240      	movs	r2, #64	; 0x40
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	d102      	bne.n	8002fba <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002fb4:	68bb      	ldr	r3, [r7, #8]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fba:	68bb      	ldr	r3, [r7, #8]
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fc0:	68bb      	ldr	r3, [r7, #8]
 8002fc2:	785b      	ldrb	r3, [r3, #1]
 8002fc4:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fc6:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002fc8:	68ba      	ldr	r2, [r7, #8]
 8002fca:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002fcc:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002fce:	68bb      	ldr	r3, [r7, #8]
 8002fd0:	78db      	ldrb	r3, [r3, #3]
 8002fd2:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	697a      	ldr	r2, [r7, #20]
 8002fde:	491b      	ldr	r1, [pc, #108]	; (800304c <HAL_RTC_SetTime+0x148>)
 8002fe0:	400a      	ands	r2, r1
 8002fe2:	601a      	str	r2, [r3, #0]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	4918      	ldr	r1, [pc, #96]	; (8003050 <HAL_RTC_SetTime+0x14c>)
 8002ff0:	400a      	ands	r2, r1
 8002ff2:	619a      	str	r2, [r3, #24]

    /* This interface is deprecated. To manage Daylight Saving Time, please use HAL_RTC_DST_xxx functions */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	6999      	ldr	r1, [r3, #24]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	431a      	orrs	r2, r3
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	430a      	orrs	r2, r1
 800300a:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800300c:	2313      	movs	r3, #19
 800300e:	18fc      	adds	r4, r7, r3
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	0018      	movs	r0, r3
 8003014:	f000 f91a 	bl	800324c <RTC_ExitInitMode>
 8003018:	0003      	movs	r3, r0
 800301a:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	22ff      	movs	r2, #255	; 0xff
 8003022:	625a      	str	r2, [r3, #36]	; 0x24
  
  if (status == HAL_OK)
 8003024:	2313      	movs	r3, #19
 8003026:	18fb      	adds	r3, r7, r3
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_RTC_SetTime+0x132>
  {
   hrtc->State = HAL_RTC_STATE_READY;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	2229      	movs	r2, #41	; 0x29
 8003032:	2101      	movs	r1, #1
 8003034:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2228      	movs	r2, #40	; 0x28
 800303a:	2100      	movs	r1, #0
 800303c:	5499      	strb	r1, [r3, r2]

  return status;
 800303e:	2313      	movs	r3, #19
 8003040:	18fb      	adds	r3, r7, r3
 8003042:	781b      	ldrb	r3, [r3, #0]
}
 8003044:	0018      	movs	r0, r3
 8003046:	46bd      	mov	sp, r7
 8003048:	b006      	add	sp, #24
 800304a:	bdb0      	pop	{r4, r5, r7, pc}
 800304c:	007f7f7f 	.word	0x007f7f7f
 8003050:	fffbffff 	.word	0xfffbffff

08003054 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003054:	b5b0      	push	{r4, r5, r7, lr}
 8003056:	b086      	sub	sp, #24
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]

 /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

 /* Process Locked */
 __HAL_LOCK(hrtc);
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	2228      	movs	r2, #40	; 0x28
 8003064:	5c9b      	ldrb	r3, [r3, r2]
 8003066:	2b01      	cmp	r3, #1
 8003068:	d101      	bne.n	800306e <HAL_RTC_SetDate+0x1a>
 800306a:	2302      	movs	r3, #2
 800306c:	e07e      	b.n	800316c <HAL_RTC_SetDate+0x118>
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	2228      	movs	r2, #40	; 0x28
 8003072:	2101      	movs	r1, #1
 8003074:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	2229      	movs	r2, #41	; 0x29
 800307a:	2102      	movs	r1, #2
 800307c:	5499      	strb	r1, [r3, r2]

  if((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d10e      	bne.n	80030a2 <HAL_RTC_SetDate+0x4e>
 8003084:	68bb      	ldr	r3, [r7, #8]
 8003086:	785b      	ldrb	r3, [r3, #1]
 8003088:	001a      	movs	r2, r3
 800308a:	2310      	movs	r3, #16
 800308c:	4013      	ands	r3, r2
 800308e:	d008      	beq.n	80030a2 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	785b      	ldrb	r3, [r3, #1]
 8003094:	2210      	movs	r2, #16
 8003096:	4393      	bics	r3, r2
 8003098:	b2db      	uxtb	r3, r3
 800309a:	330a      	adds	r3, #10
 800309c:	b2da      	uxtb	r2, r3
 800309e:	68bb      	ldr	r3, [r7, #8]
 80030a0:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if(Format == RTC_FORMAT_BIN)
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d11c      	bne.n	80030e2 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	78db      	ldrb	r3, [r3, #3]
 80030ac:	0018      	movs	r0, r3
 80030ae:	f000 f911 	bl	80032d4 <RTC_ByteToBcd2>
 80030b2:	0003      	movs	r3, r0
 80030b4:	041c      	lsls	r4, r3, #16
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	785b      	ldrb	r3, [r3, #1]
 80030ba:	0018      	movs	r0, r3
 80030bc:	f000 f90a 	bl	80032d4 <RTC_ByteToBcd2>
 80030c0:	0003      	movs	r3, r0
 80030c2:	021b      	lsls	r3, r3, #8
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030c4:	431c      	orrs	r4, r3
                 ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	789b      	ldrb	r3, [r3, #2]
 80030ca:	0018      	movs	r0, r3
 80030cc:	f000 f902 	bl	80032d4 <RTC_ByteToBcd2>
 80030d0:	0003      	movs	r3, r0
                 ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80030d2:	0022      	movs	r2, r4
 80030d4:	431a      	orrs	r2, r3
                 ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	781b      	ldrb	r3, [r3, #0]
 80030da:	035b      	lsls	r3, r3, #13
   datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80030dc:	4313      	orrs	r3, r2
 80030de:	617b      	str	r3, [r7, #20]
 80030e0:	e00e      	b.n	8003100 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030e2:	68bb      	ldr	r3, [r7, #8]
 80030e4:	78db      	ldrb	r3, [r3, #3]
 80030e6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	785b      	ldrb	r3, [r3, #1]
 80030ec:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030ee:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos)| \
 80030f0:	68ba      	ldr	r2, [r7, #8]
 80030f2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 80030f4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80030f6:	68bb      	ldr	r3, [r7, #8]
 80030f8:	781b      	ldrb	r3, [r3, #0]
 80030fa:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 80030fc:	4313      	orrs	r3, r2
 80030fe:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	22ca      	movs	r2, #202	; 0xca
 8003106:	625a      	str	r2, [r3, #36]	; 0x24
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2253      	movs	r2, #83	; 0x53
 800310e:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8003110:	2513      	movs	r5, #19
 8003112:	197c      	adds	r4, r7, r5
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	0018      	movs	r0, r3
 8003118:	f000 f855 	bl	80031c6 <RTC_EnterInitMode>
 800311c:	0003      	movs	r3, r0
 800311e:	7023      	strb	r3, [r4, #0]
  if(status == HAL_OK)
 8003120:	0028      	movs	r0, r5
 8003122:	183b      	adds	r3, r7, r0
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b00      	cmp	r3, #0
 8003128:	d10c      	bne.n	8003144 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	697a      	ldr	r2, [r7, #20]
 8003130:	4910      	ldr	r1, [pc, #64]	; (8003174 <HAL_RTC_SetDate+0x120>)
 8003132:	400a      	ands	r2, r1
 8003134:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003136:	183c      	adds	r4, r7, r0
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	0018      	movs	r0, r3
 800313c:	f000 f886 	bl	800324c <RTC_ExitInitMode>
 8003140:	0003      	movs	r3, r0
 8003142:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	22ff      	movs	r2, #255	; 0xff
 800314a:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 800314c:	2313      	movs	r3, #19
 800314e:	18fb      	adds	r3, r7, r3
 8003150:	781b      	ldrb	r3, [r3, #0]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d103      	bne.n	800315e <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	2229      	movs	r2, #41	; 0x29
 800315a:	2101      	movs	r1, #1
 800315c:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	2228      	movs	r2, #40	; 0x28
 8003162:	2100      	movs	r1, #0
 8003164:	5499      	strb	r1, [r3, r2]

  return status;
 8003166:	2313      	movs	r3, #19
 8003168:	18fb      	adds	r3, r7, r3
 800316a:	781b      	ldrb	r3, [r3, #0]
}
 800316c:	0018      	movs	r0, r3
 800316e:	46bd      	mov	sp, r7
 8003170:	b006      	add	sp, #24
 8003172:	bdb0      	pop	{r4, r5, r7, pc}
 8003174:	00ffff3f 	.word	0x00ffff3f

08003178 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef* hrtc)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68da      	ldr	r2, [r3, #12]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	21a0      	movs	r1, #160	; 0xa0
 800318c:	438a      	bics	r2, r1
 800318e:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8003190:	f7fd ffce 	bl	8001130 <HAL_GetTick>
 8003194:	0003      	movs	r3, r0
 8003196:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8003198:	e00a      	b.n	80031b0 <HAL_RTC_WaitForSynchro+0x38>
  {
    if((HAL_GetTick() - tickstart ) > RTC_TIMEOUT_VALUE)
 800319a:	f7fd ffc9 	bl	8001130 <HAL_GetTick>
 800319e:	0002      	movs	r2, r0
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	1ad2      	subs	r2, r2, r3
 80031a4:	23fa      	movs	r3, #250	; 0xfa
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d901      	bls.n	80031b0 <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 80031ac:	2303      	movs	r3, #3
 80031ae:	e006      	b.n	80031be <HAL_RTC_WaitForSynchro+0x46>
  while((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	68db      	ldr	r3, [r3, #12]
 80031b6:	2220      	movs	r2, #32
 80031b8:	4013      	ands	r3, r2
 80031ba:	d0ee      	beq.n	800319a <HAL_RTC_WaitForSynchro+0x22>
    }
  }

  return HAL_OK;
 80031bc:	2300      	movs	r3, #0
}
 80031be:	0018      	movs	r0, r3
 80031c0:	46bd      	mov	sp, r7
 80031c2:	b004      	add	sp, #16
 80031c4:	bd80      	pop	{r7, pc}

080031c6 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef* hrtc)
{
 80031c6:	b580      	push	{r7, lr}
 80031c8:	b084      	sub	sp, #16
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;  
 80031ce:	230f      	movs	r3, #15
 80031d0:	18fb      	adds	r3, r7, r3
 80031d2:	2200      	movs	r2, #0
 80031d4:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2240      	movs	r2, #64	; 0x40
 80031de:	4013      	ands	r3, r2
 80031e0:	d12c      	bne.n	800323c <RTC_EnterInitMode+0x76>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68da      	ldr	r2, [r3, #12]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	2180      	movs	r1, #128	; 0x80
 80031ee:	430a      	orrs	r2, r1
 80031f0:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80031f2:	f7fd ff9d 	bl	8001130 <HAL_GetTick>
 80031f6:	0003      	movs	r3, r0
 80031f8:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 80031fa:	e014      	b.n	8003226 <RTC_EnterInitMode+0x60>
    {
      if((HAL_GetTick()  - tickstart ) > RTC_TIMEOUT_VALUE)
 80031fc:	f7fd ff98 	bl	8001130 <HAL_GetTick>
 8003200:	0002      	movs	r2, r0
 8003202:	68bb      	ldr	r3, [r7, #8]
 8003204:	1ad2      	subs	r2, r2, r3
 8003206:	200f      	movs	r0, #15
 8003208:	183b      	adds	r3, r7, r0
 800320a:	1839      	adds	r1, r7, r0
 800320c:	7809      	ldrb	r1, [r1, #0]
 800320e:	7019      	strb	r1, [r3, #0]
 8003210:	23fa      	movs	r3, #250	; 0xfa
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	429a      	cmp	r2, r3
 8003216:	d906      	bls.n	8003226 <RTC_EnterInitMode+0x60>
      {
        status = HAL_TIMEOUT;
 8003218:	183b      	adds	r3, r7, r0
 800321a:	2203      	movs	r2, #3
 800321c:	701a      	strb	r2, [r3, #0]
        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	2229      	movs	r2, #41	; 0x29
 8003222:	2103      	movs	r1, #3
 8003224:	5499      	strb	r1, [r3, r2]
    while(((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	2240      	movs	r2, #64	; 0x40
 800322e:	4013      	ands	r3, r2
 8003230:	d104      	bne.n	800323c <RTC_EnterInitMode+0x76>
 8003232:	230f      	movs	r3, #15
 8003234:	18fb      	adds	r3, r7, r3
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	2b03      	cmp	r3, #3
 800323a:	d1df      	bne.n	80031fc <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800323c:	230f      	movs	r3, #15
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	781b      	ldrb	r3, [r3, #0]
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b004      	add	sp, #16
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800324c:	b590      	push	{r4, r7, lr}
 800324e:	b085      	sub	sp, #20
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003254:	240f      	movs	r4, #15
 8003256:	193b      	adds	r3, r7, r4
 8003258:	2200      	movs	r2, #0
 800325a:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 800325c:	4b1c      	ldr	r3, [pc, #112]	; (80032d0 <RTC_ExitInitMode+0x84>)
 800325e:	68da      	ldr	r2, [r3, #12]
 8003260:	4b1b      	ldr	r3, [pc, #108]	; (80032d0 <RTC_ExitInitMode+0x84>)
 8003262:	2180      	movs	r1, #128	; 0x80
 8003264:	438a      	bics	r2, r1
 8003266:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <RTC_ExitInitMode+0x84>)
 800326a:	699b      	ldr	r3, [r3, #24]
 800326c:	2220      	movs	r2, #32
 800326e:	4013      	ands	r3, r2
 8003270:	d10d      	bne.n	800328e <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	0018      	movs	r0, r3
 8003276:	f7ff ff7f 	bl	8003178 <HAL_RTC_WaitForSynchro>
 800327a:	1e03      	subs	r3, r0, #0
 800327c:	d021      	beq.n	80032c2 <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2229      	movs	r2, #41	; 0x29
 8003282:	2103      	movs	r1, #3
 8003284:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8003286:	193b      	adds	r3, r7, r4
 8003288:	2203      	movs	r2, #3
 800328a:	701a      	strb	r2, [r3, #0]
 800328c:	e019      	b.n	80032c2 <RTC_ExitInitMode+0x76>
  }
  else /* WA 2.7.1 Calendar initialization may fail in case of consecutive INIT mode entry.
          Please look at STM32G0 Errata sheet on the internet for details. */
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <RTC_ExitInitMode+0x84>)
 8003290:	699a      	ldr	r2, [r3, #24]
 8003292:	4b0f      	ldr	r3, [pc, #60]	; (80032d0 <RTC_ExitInitMode+0x84>)
 8003294:	2120      	movs	r1, #32
 8003296:	438a      	bics	r2, r1
 8003298:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	0018      	movs	r0, r3
 800329e:	f7ff ff6b 	bl	8003178 <HAL_RTC_WaitForSynchro>
 80032a2:	1e03      	subs	r3, r0, #0
 80032a4:	d007      	beq.n	80032b6 <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2229      	movs	r2, #41	; 0x29
 80032aa:	2103      	movs	r1, #3
 80032ac:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 80032ae:	230f      	movs	r3, #15
 80032b0:	18fb      	adds	r3, r7, r3
 80032b2:	2203      	movs	r2, #3
 80032b4:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 80032b6:	4b06      	ldr	r3, [pc, #24]	; (80032d0 <RTC_ExitInitMode+0x84>)
 80032b8:	699a      	ldr	r2, [r3, #24]
 80032ba:	4b05      	ldr	r3, [pc, #20]	; (80032d0 <RTC_ExitInitMode+0x84>)
 80032bc:	2120      	movs	r1, #32
 80032be:	430a      	orrs	r2, r1
 80032c0:	619a      	str	r2, [r3, #24]
  }

  return status;
 80032c2:	230f      	movs	r3, #15
 80032c4:	18fb      	adds	r3, r7, r3
 80032c6:	781b      	ldrb	r3, [r3, #0]
}
 80032c8:	0018      	movs	r0, r3
 80032ca:	46bd      	mov	sp, r7
 80032cc:	b005      	add	sp, #20
 80032ce:	bd90      	pop	{r4, r7, pc}
 80032d0:	40002800 	.word	0x40002800

080032d4 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b084      	sub	sp, #16
 80032d8:	af00      	add	r7, sp, #0
 80032da:	0002      	movs	r2, r0
 80032dc:	1dfb      	adds	r3, r7, #7
 80032de:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 80032e0:	2300      	movs	r3, #0
 80032e2:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 80032e4:	230b      	movs	r3, #11
 80032e6:	18fb      	adds	r3, r7, r3
 80032e8:	1dfa      	adds	r2, r7, #7
 80032ea:	7812      	ldrb	r2, [r2, #0]
 80032ec:	701a      	strb	r2, [r3, #0]

  while(Param >= 10U)
 80032ee:	e008      	b.n	8003302 <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 80032f6:	220b      	movs	r2, #11
 80032f8:	18bb      	adds	r3, r7, r2
 80032fa:	18ba      	adds	r2, r7, r2
 80032fc:	7812      	ldrb	r2, [r2, #0]
 80032fe:	3a0a      	subs	r2, #10
 8003300:	701a      	strb	r2, [r3, #0]
  while(Param >= 10U)
 8003302:	210b      	movs	r1, #11
 8003304:	187b      	adds	r3, r7, r1
 8003306:	781b      	ldrb	r3, [r3, #0]
 8003308:	2b09      	cmp	r3, #9
 800330a:	d8f1      	bhi.n	80032f0 <RTC_ByteToBcd2+0x1c>
  }

  return  ((uint8_t)(bcdhigh << 4U) | Param);
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	011b      	lsls	r3, r3, #4
 8003312:	b2da      	uxtb	r2, r3
 8003314:	187b      	adds	r3, r7, r1
 8003316:	781b      	ldrb	r3, [r3, #0]
 8003318:	4313      	orrs	r3, r2
 800331a:	b2db      	uxtb	r3, r3
}
 800331c:	0018      	movs	r0, r3
 800331e:	46bd      	mov	sp, r7
 8003320:	b004      	add	sp, #16
 8003322:	bd80      	pop	{r7, pc}

08003324 <HAL_RTCEx_SetCalibrationOutPut>:
  *             @arg RTC_CALIBOUTPUT_512HZ: A signal has a regular waveform at 512Hz.
  *             @arg RTC_CALIBOUTPUT_1HZ: A signal has a regular waveform at 1Hz.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetCalibrationOutPut(RTC_HandleTypeDef* hrtc, uint32_t CalibOutput)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_RTC_CALIB_OUTPUT(CalibOutput));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	2228      	movs	r2, #40	; 0x28
 8003332:	5c9b      	ldrb	r3, [r3, r2]
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_RTCEx_SetCalibrationOutPut+0x18>
 8003338:	2302      	movs	r3, #2
 800333a:	e035      	b.n	80033a8 <HAL_RTCEx_SetCalibrationOutPut+0x84>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2228      	movs	r2, #40	; 0x28
 8003340:	2101      	movs	r1, #1
 8003342:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2229      	movs	r2, #41	; 0x29
 8003348:	2102      	movs	r1, #2
 800334a:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	22ca      	movs	r2, #202	; 0xca
 8003352:	625a      	str	r2, [r3, #36]	; 0x24
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	2253      	movs	r2, #83	; 0x53
 800335a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Clear flags before config */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_COSEL;
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	699a      	ldr	r2, [r3, #24]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	4912      	ldr	r1, [pc, #72]	; (80033b0 <HAL_RTCEx_SetCalibrationOutPut+0x8c>)
 8003368:	400a      	ands	r2, r1
 800336a:	619a      	str	r2, [r3, #24]

  /* Configure the RTC_CR register */
  hrtc->Instance->CR |= (uint32_t)CalibOutput;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	6999      	ldr	r1, [r3, #24]
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	683a      	ldr	r2, [r7, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	619a      	str	r2, [r3, #24]

  __HAL_RTC_CALIBRATION_OUTPUT_ENABLE(hrtc);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	699a      	ldr	r2, [r3, #24]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2180      	movs	r1, #128	; 0x80
 8003388:	0409      	lsls	r1, r1, #16
 800338a:	430a      	orrs	r2, r1
 800338c:	619a      	str	r2, [r3, #24]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	22ff      	movs	r2, #255	; 0xff
 8003394:	625a      	str	r2, [r3, #36]	; 0x24

  /* Change RTC state */
  hrtc->State = HAL_RTC_STATE_READY;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2229      	movs	r2, #41	; 0x29
 800339a:	2101      	movs	r1, #1
 800339c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2228      	movs	r2, #40	; 0x28
 80033a2:	2100      	movs	r1, #0
 80033a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033a6:	2300      	movs	r3, #0
}
 80033a8:	0018      	movs	r0, r3
 80033aa:	46bd      	mov	sp, r7
 80033ac:	b002      	add	sp, #8
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	fff7ffff 	.word	0xfff7ffff

080033b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b084      	sub	sp, #16
 80033b8:	af00      	add	r7, sp, #0
 80033ba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033c2:	2301      	movs	r3, #1
 80033c4:	e0a8      	b.n	8003518 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d109      	bne.n	80033e2 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	2382      	movs	r3, #130	; 0x82
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	429a      	cmp	r2, r3
 80033d8:	d009      	beq.n	80033ee <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	2200      	movs	r2, #0
 80033de:	61da      	str	r2, [r3, #28]
 80033e0:	e005      	b.n	80033ee <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	2200      	movs	r2, #0
 80033e6:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	225d      	movs	r2, #93	; 0x5d
 80033f8:	5c9b      	ldrb	r3, [r3, r2]
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d107      	bne.n	8003410 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	225c      	movs	r2, #92	; 0x5c
 8003404:	2100      	movs	r1, #0
 8003406:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	0018      	movs	r0, r3
 800340c:	f7fd fc3e 	bl	8000c8c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	225d      	movs	r2, #93	; 0x5d
 8003414:	2102      	movs	r1, #2
 8003416:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681a      	ldr	r2, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	2140      	movs	r1, #64	; 0x40
 8003424:	438a      	bics	r2, r1
 8003426:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	23e0      	movs	r3, #224	; 0xe0
 800342e:	00db      	lsls	r3, r3, #3
 8003430:	429a      	cmp	r2, r3
 8003432:	d902      	bls.n	800343a <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003434:	2300      	movs	r3, #0
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e002      	b.n	8003440 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	015b      	lsls	r3, r3, #5
 800343e:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	68da      	ldr	r2, [r3, #12]
 8003444:	23f0      	movs	r3, #240	; 0xf0
 8003446:	011b      	lsls	r3, r3, #4
 8003448:	429a      	cmp	r2, r3
 800344a:	d008      	beq.n	800345e <HAL_SPI_Init+0xaa>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	68da      	ldr	r2, [r3, #12]
 8003450:	23e0      	movs	r3, #224	; 0xe0
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	429a      	cmp	r2, r3
 8003456:	d002      	beq.n	800345e <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2200      	movs	r2, #0
 800345c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685a      	ldr	r2, [r3, #4]
 8003462:	2382      	movs	r3, #130	; 0x82
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	401a      	ands	r2, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6899      	ldr	r1, [r3, #8]
 800346c:	2384      	movs	r3, #132	; 0x84
 800346e:	021b      	lsls	r3, r3, #8
 8003470:	400b      	ands	r3, r1
 8003472:	431a      	orrs	r2, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	691b      	ldr	r3, [r3, #16]
 8003478:	2102      	movs	r1, #2
 800347a:	400b      	ands	r3, r1
 800347c:	431a      	orrs	r2, r3
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	695b      	ldr	r3, [r3, #20]
 8003482:	2101      	movs	r1, #1
 8003484:	400b      	ands	r3, r1
 8003486:	431a      	orrs	r2, r3
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6999      	ldr	r1, [r3, #24]
 800348c:	2380      	movs	r3, #128	; 0x80
 800348e:	009b      	lsls	r3, r3, #2
 8003490:	400b      	ands	r3, r1
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	69db      	ldr	r3, [r3, #28]
 8003498:	2138      	movs	r1, #56	; 0x38
 800349a:	400b      	ands	r3, r1
 800349c:	431a      	orrs	r2, r3
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	6a1b      	ldr	r3, [r3, #32]
 80034a2:	2180      	movs	r1, #128	; 0x80
 80034a4:	400b      	ands	r3, r1
 80034a6:	431a      	orrs	r2, r3
 80034a8:	0011      	movs	r1, r2
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ae:	2380      	movs	r3, #128	; 0x80
 80034b0:	019b      	lsls	r3, r3, #6
 80034b2:	401a      	ands	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	430a      	orrs	r2, r1
 80034ba:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	699b      	ldr	r3, [r3, #24]
 80034c0:	0c1b      	lsrs	r3, r3, #16
 80034c2:	2204      	movs	r2, #4
 80034c4:	401a      	ands	r2, r3
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ca:	2110      	movs	r1, #16
 80034cc:	400b      	ands	r3, r1
 80034ce:	431a      	orrs	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80034d4:	2108      	movs	r1, #8
 80034d6:	400b      	ands	r3, r1
 80034d8:	431a      	orrs	r2, r3
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68d9      	ldr	r1, [r3, #12]
 80034de:	23f0      	movs	r3, #240	; 0xf0
 80034e0:	011b      	lsls	r3, r3, #4
 80034e2:	400b      	ands	r3, r1
 80034e4:	431a      	orrs	r2, r3
 80034e6:	0011      	movs	r1, r2
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	2380      	movs	r3, #128	; 0x80
 80034ec:	015b      	lsls	r3, r3, #5
 80034ee:	401a      	ands	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69da      	ldr	r2, [r3, #28]
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4907      	ldr	r1, [pc, #28]	; (8003520 <HAL_SPI_Init+0x16c>)
 8003504:	400a      	ands	r2, r1
 8003506:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	225d      	movs	r2, #93	; 0x5d
 8003512:	2101      	movs	r1, #1
 8003514:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	0018      	movs	r0, r3
 800351a:	46bd      	mov	sp, r7
 800351c:	b004      	add	sp, #16
 800351e:	bd80      	pop	{r7, pc}
 8003520:	fffff7ff 	.word	0xfffff7ff

08003524 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003524:	b580      	push	{r7, lr}
 8003526:	b082      	sub	sp, #8
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d101      	bne.n	8003536 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003532:	2301      	movs	r3, #1
 8003534:	e04a      	b.n	80035cc <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	223d      	movs	r2, #61	; 0x3d
 800353a:	5c9b      	ldrb	r3, [r3, r2]
 800353c:	b2db      	uxtb	r3, r3
 800353e:	2b00      	cmp	r3, #0
 8003540:	d107      	bne.n	8003552 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	223c      	movs	r2, #60	; 0x3c
 8003546:	2100      	movs	r1, #0
 8003548:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	0018      	movs	r0, r3
 800354e:	f000 f841 	bl	80035d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	223d      	movs	r2, #61	; 0x3d
 8003556:	2102      	movs	r1, #2
 8003558:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681a      	ldr	r2, [r3, #0]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	3304      	adds	r3, #4
 8003562:	0019      	movs	r1, r3
 8003564:	0010      	movs	r0, r2
 8003566:	f000 f9eb 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2248      	movs	r2, #72	; 0x48
 800356e:	2101      	movs	r1, #1
 8003570:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	223e      	movs	r2, #62	; 0x3e
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	223f      	movs	r2, #63	; 0x3f
 800357e:	2101      	movs	r1, #1
 8003580:	5499      	strb	r1, [r3, r2]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	2240      	movs	r2, #64	; 0x40
 8003586:	2101      	movs	r1, #1
 8003588:	5499      	strb	r1, [r3, r2]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2241      	movs	r2, #65	; 0x41
 800358e:	2101      	movs	r1, #1
 8003590:	5499      	strb	r1, [r3, r2]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2242      	movs	r2, #66	; 0x42
 8003596:	2101      	movs	r1, #1
 8003598:	5499      	strb	r1, [r3, r2]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2243      	movs	r2, #67	; 0x43
 800359e:	2101      	movs	r1, #1
 80035a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2244      	movs	r2, #68	; 0x44
 80035a6:	2101      	movs	r1, #1
 80035a8:	5499      	strb	r1, [r3, r2]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	2245      	movs	r2, #69	; 0x45
 80035ae:	2101      	movs	r1, #1
 80035b0:	5499      	strb	r1, [r3, r2]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2246      	movs	r2, #70	; 0x46
 80035b6:	2101      	movs	r1, #1
 80035b8:	5499      	strb	r1, [r3, r2]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	2247      	movs	r2, #71	; 0x47
 80035be:	2101      	movs	r1, #1
 80035c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	223d      	movs	r2, #61	; 0x3d
 80035c6:	2101      	movs	r1, #1
 80035c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80035ca:	2300      	movs	r3, #0
}
 80035cc:	0018      	movs	r0, r3
 80035ce:	46bd      	mov	sp, r7
 80035d0:	b002      	add	sp, #8
 80035d2:	bd80      	pop	{r7, pc}

080035d4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80035d4:	b580      	push	{r7, lr}
 80035d6:	b082      	sub	sp, #8
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80035dc:	46c0      	nop			; (mov r8, r8)
 80035de:	46bd      	mov	sp, r7
 80035e0:	b002      	add	sp, #8
 80035e2:	bd80      	pop	{r7, pc}

080035e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	b084      	sub	sp, #16
 80035e8:	af00      	add	r7, sp, #0
 80035ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	223d      	movs	r2, #61	; 0x3d
 80035f0:	5c9b      	ldrb	r3, [r3, r2]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d001      	beq.n	80035fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e042      	b.n	8003682 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	223d      	movs	r2, #61	; 0x3d
 8003600:	2102      	movs	r1, #2
 8003602:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	68da      	ldr	r2, [r3, #12]
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	2101      	movs	r1, #1
 8003610:	430a      	orrs	r2, r1
 8003612:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	4a1c      	ldr	r2, [pc, #112]	; (800368c <HAL_TIM_Base_Start_IT+0xa8>)
 800361a:	4293      	cmp	r3, r2
 800361c:	d00f      	beq.n	800363e <HAL_TIM_Base_Start_IT+0x5a>
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	2380      	movs	r3, #128	; 0x80
 8003624:	05db      	lsls	r3, r3, #23
 8003626:	429a      	cmp	r2, r3
 8003628:	d009      	beq.n	800363e <HAL_TIM_Base_Start_IT+0x5a>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a18      	ldr	r2, [pc, #96]	; (8003690 <HAL_TIM_Base_Start_IT+0xac>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIM_Base_Start_IT+0x5a>
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	4a16      	ldr	r2, [pc, #88]	; (8003694 <HAL_TIM_Base_Start_IT+0xb0>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d116      	bne.n	800366c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	4a14      	ldr	r2, [pc, #80]	; (8003698 <HAL_TIM_Base_Start_IT+0xb4>)
 8003646:	4013      	ands	r3, r2
 8003648:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2b06      	cmp	r3, #6
 800364e:	d016      	beq.n	800367e <HAL_TIM_Base_Start_IT+0x9a>
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	2380      	movs	r3, #128	; 0x80
 8003654:	025b      	lsls	r3, r3, #9
 8003656:	429a      	cmp	r2, r3
 8003658:	d011      	beq.n	800367e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	2101      	movs	r1, #1
 8003666:	430a      	orrs	r2, r1
 8003668:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366a:	e008      	b.n	800367e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2101      	movs	r1, #1
 8003678:	430a      	orrs	r2, r1
 800367a:	601a      	str	r2, [r3, #0]
 800367c:	e000      	b.n	8003680 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800367e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003680:	2300      	movs	r3, #0
}
 8003682:	0018      	movs	r0, r3
 8003684:	46bd      	mov	sp, r7
 8003686:	b004      	add	sp, #16
 8003688:	bd80      	pop	{r7, pc}
 800368a:	46c0      	nop			; (mov r8, r8)
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40000400 	.word	0x40000400
 8003694:	40014000 	.word	0x40014000
 8003698:	00010007 	.word	0x00010007

0800369c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	691b      	ldr	r3, [r3, #16]
 80036aa:	2202      	movs	r2, #2
 80036ac:	4013      	ands	r3, r2
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d124      	bne.n	80036fc <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	2202      	movs	r2, #2
 80036ba:	4013      	ands	r3, r2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d11d      	bne.n	80036fc <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	2203      	movs	r2, #3
 80036c6:	4252      	negs	r2, r2
 80036c8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2201      	movs	r2, #1
 80036ce:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	699b      	ldr	r3, [r3, #24]
 80036d6:	2203      	movs	r2, #3
 80036d8:	4013      	ands	r3, r2
 80036da:	d004      	beq.n	80036e6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	0018      	movs	r0, r3
 80036e0:	f000 f916 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 80036e4:	e007      	b.n	80036f6 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	0018      	movs	r0, r3
 80036ea:	f000 f909 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	0018      	movs	r0, r3
 80036f2:	f000 f915 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2200      	movs	r2, #0
 80036fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	691b      	ldr	r3, [r3, #16]
 8003702:	2204      	movs	r2, #4
 8003704:	4013      	ands	r3, r2
 8003706:	2b04      	cmp	r3, #4
 8003708:	d125      	bne.n	8003756 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	68db      	ldr	r3, [r3, #12]
 8003710:	2204      	movs	r2, #4
 8003712:	4013      	ands	r3, r2
 8003714:	2b04      	cmp	r3, #4
 8003716:	d11e      	bne.n	8003756 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2205      	movs	r2, #5
 800371e:	4252      	negs	r2, r2
 8003720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2202      	movs	r2, #2
 8003726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	699a      	ldr	r2, [r3, #24]
 800372e:	23c0      	movs	r3, #192	; 0xc0
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	4013      	ands	r3, r2
 8003734:	d004      	beq.n	8003740 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	0018      	movs	r0, r3
 800373a:	f000 f8e9 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 800373e:	e007      	b.n	8003750 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	0018      	movs	r0, r3
 8003744:	f000 f8dc 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	0018      	movs	r0, r3
 800374c:	f000 f8e8 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	691b      	ldr	r3, [r3, #16]
 800375c:	2208      	movs	r2, #8
 800375e:	4013      	ands	r3, r2
 8003760:	2b08      	cmp	r3, #8
 8003762:	d124      	bne.n	80037ae <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	68db      	ldr	r3, [r3, #12]
 800376a:	2208      	movs	r2, #8
 800376c:	4013      	ands	r3, r2
 800376e:	2b08      	cmp	r3, #8
 8003770:	d11d      	bne.n	80037ae <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2209      	movs	r2, #9
 8003778:	4252      	negs	r2, r2
 800377a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2204      	movs	r2, #4
 8003780:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	69db      	ldr	r3, [r3, #28]
 8003788:	2203      	movs	r2, #3
 800378a:	4013      	ands	r3, r2
 800378c:	d004      	beq.n	8003798 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	0018      	movs	r0, r3
 8003792:	f000 f8bd 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 8003796:	e007      	b.n	80037a8 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	0018      	movs	r0, r3
 800379c:	f000 f8b0 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	0018      	movs	r0, r3
 80037a4:	f000 f8bc 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	691b      	ldr	r3, [r3, #16]
 80037b4:	2210      	movs	r2, #16
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b10      	cmp	r3, #16
 80037ba:	d125      	bne.n	8003808 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	2210      	movs	r2, #16
 80037c4:	4013      	ands	r3, r2
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d11e      	bne.n	8003808 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2211      	movs	r2, #17
 80037d0:	4252      	negs	r2, r2
 80037d2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2208      	movs	r2, #8
 80037d8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	69da      	ldr	r2, [r3, #28]
 80037e0:	23c0      	movs	r3, #192	; 0xc0
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4013      	ands	r3, r2
 80037e6:	d004      	beq.n	80037f2 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	0018      	movs	r0, r3
 80037ec:	f000 f890 	bl	8003910 <HAL_TIM_IC_CaptureCallback>
 80037f0:	e007      	b.n	8003802 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	0018      	movs	r0, r3
 80037f6:	f000 f883 	bl	8003900 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	0018      	movs	r0, r3
 80037fe:	f000 f88f 	bl	8003920 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	2200      	movs	r2, #0
 8003806:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	691b      	ldr	r3, [r3, #16]
 800380e:	2201      	movs	r2, #1
 8003810:	4013      	ands	r3, r2
 8003812:	2b01      	cmp	r3, #1
 8003814:	d10f      	bne.n	8003836 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2201      	movs	r2, #1
 800381e:	4013      	ands	r3, r2
 8003820:	2b01      	cmp	r3, #1
 8003822:	d108      	bne.n	8003836 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	2202      	movs	r2, #2
 800382a:	4252      	negs	r2, r2
 800382c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	0018      	movs	r0, r3
 8003832:	f7fd f9a5 	bl	8000b80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	691b      	ldr	r3, [r3, #16]
 800383c:	2280      	movs	r2, #128	; 0x80
 800383e:	4013      	ands	r3, r2
 8003840:	2b80      	cmp	r3, #128	; 0x80
 8003842:	d10f      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	2280      	movs	r2, #128	; 0x80
 800384c:	4013      	ands	r3, r2
 800384e:	2b80      	cmp	r3, #128	; 0x80
 8003850:	d108      	bne.n	8003864 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2281      	movs	r2, #129	; 0x81
 8003858:	4252      	negs	r2, r2
 800385a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	0018      	movs	r0, r3
 8003860:	f000 f8f6 	bl	8003a50 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	691a      	ldr	r2, [r3, #16]
 800386a:	2380      	movs	r3, #128	; 0x80
 800386c:	005b      	lsls	r3, r3, #1
 800386e:	401a      	ands	r2, r3
 8003870:	2380      	movs	r3, #128	; 0x80
 8003872:	005b      	lsls	r3, r3, #1
 8003874:	429a      	cmp	r2, r3
 8003876:	d10e      	bne.n	8003896 <HAL_TIM_IRQHandler+0x1fa>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	2280      	movs	r2, #128	; 0x80
 8003880:	4013      	ands	r3, r2
 8003882:	2b80      	cmp	r3, #128	; 0x80
 8003884:	d107      	bne.n	8003896 <HAL_TIM_IRQHandler+0x1fa>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	4a1c      	ldr	r2, [pc, #112]	; (80038fc <HAL_TIM_IRQHandler+0x260>)
 800388c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	0018      	movs	r0, r3
 8003892:	f000 f8e5 	bl	8003a60 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	691b      	ldr	r3, [r3, #16]
 800389c:	2240      	movs	r2, #64	; 0x40
 800389e:	4013      	ands	r3, r2
 80038a0:	2b40      	cmp	r3, #64	; 0x40
 80038a2:	d10f      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x228>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	2240      	movs	r2, #64	; 0x40
 80038ac:	4013      	ands	r3, r2
 80038ae:	2b40      	cmp	r3, #64	; 0x40
 80038b0:	d108      	bne.n	80038c4 <HAL_TIM_IRQHandler+0x228>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	2241      	movs	r2, #65	; 0x41
 80038b8:	4252      	negs	r2, r2
 80038ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	0018      	movs	r0, r3
 80038c0:	f000 f836 	bl	8003930 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	691b      	ldr	r3, [r3, #16]
 80038ca:	2220      	movs	r2, #32
 80038cc:	4013      	ands	r3, r2
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d10f      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x256>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	2220      	movs	r2, #32
 80038da:	4013      	ands	r3, r2
 80038dc:	2b20      	cmp	r3, #32
 80038de:	d108      	bne.n	80038f2 <HAL_TIM_IRQHandler+0x256>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2221      	movs	r2, #33	; 0x21
 80038e6:	4252      	negs	r2, r2
 80038e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	0018      	movs	r0, r3
 80038ee:	f000 f8a7 	bl	8003a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80038f2:	46c0      	nop			; (mov r8, r8)
 80038f4:	46bd      	mov	sp, r7
 80038f6:	b002      	add	sp, #8
 80038f8:	bd80      	pop	{r7, pc}
 80038fa:	46c0      	nop			; (mov r8, r8)
 80038fc:	fffffeff 	.word	0xfffffeff

08003900 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b082      	sub	sp, #8
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003908:	46c0      	nop			; (mov r8, r8)
 800390a:	46bd      	mov	sp, r7
 800390c:	b002      	add	sp, #8
 800390e:	bd80      	pop	{r7, pc}

08003910 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	46bd      	mov	sp, r7
 800391c:	b002      	add	sp, #8
 800391e:	bd80      	pop	{r7, pc}

08003920 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b082      	sub	sp, #8
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003928:	46c0      	nop			; (mov r8, r8)
 800392a:	46bd      	mov	sp, r7
 800392c:	b002      	add	sp, #8
 800392e:	bd80      	pop	{r7, pc}

08003930 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003938:	46c0      	nop			; (mov r8, r8)
 800393a:	46bd      	mov	sp, r7
 800393c:	b002      	add	sp, #8
 800393e:	bd80      	pop	{r7, pc}

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b084      	sub	sp, #16
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a34      	ldr	r2, [pc, #208]	; (8003a24 <TIM_Base_SetConfig+0xe4>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d008      	beq.n	800396a <TIM_Base_SetConfig+0x2a>
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	2380      	movs	r3, #128	; 0x80
 800395c:	05db      	lsls	r3, r3, #23
 800395e:	429a      	cmp	r2, r3
 8003960:	d003      	beq.n	800396a <TIM_Base_SetConfig+0x2a>
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	4a30      	ldr	r2, [pc, #192]	; (8003a28 <TIM_Base_SetConfig+0xe8>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d108      	bne.n	800397c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	2270      	movs	r2, #112	; 0x70
 800396e:	4393      	bics	r3, r2
 8003970:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	685b      	ldr	r3, [r3, #4]
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a29      	ldr	r2, [pc, #164]	; (8003a24 <TIM_Base_SetConfig+0xe4>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d018      	beq.n	80039b6 <TIM_Base_SetConfig+0x76>
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	2380      	movs	r3, #128	; 0x80
 8003988:	05db      	lsls	r3, r3, #23
 800398a:	429a      	cmp	r2, r3
 800398c:	d013      	beq.n	80039b6 <TIM_Base_SetConfig+0x76>
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	4a25      	ldr	r2, [pc, #148]	; (8003a28 <TIM_Base_SetConfig+0xe8>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d00f      	beq.n	80039b6 <TIM_Base_SetConfig+0x76>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	4a24      	ldr	r2, [pc, #144]	; (8003a2c <TIM_Base_SetConfig+0xec>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00b      	beq.n	80039b6 <TIM_Base_SetConfig+0x76>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	4a23      	ldr	r2, [pc, #140]	; (8003a30 <TIM_Base_SetConfig+0xf0>)
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d007      	beq.n	80039b6 <TIM_Base_SetConfig+0x76>
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a22      	ldr	r2, [pc, #136]	; (8003a34 <TIM_Base_SetConfig+0xf4>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d003      	beq.n	80039b6 <TIM_Base_SetConfig+0x76>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a21      	ldr	r2, [pc, #132]	; (8003a38 <TIM_Base_SetConfig+0xf8>)
 80039b2:	4293      	cmp	r3, r2
 80039b4:	d108      	bne.n	80039c8 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	4a20      	ldr	r2, [pc, #128]	; (8003a3c <TIM_Base_SetConfig+0xfc>)
 80039ba:	4013      	ands	r3, r2
 80039bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	68db      	ldr	r3, [r3, #12]
 80039c2:	68fa      	ldr	r2, [r7, #12]
 80039c4:	4313      	orrs	r3, r2
 80039c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	4393      	bics	r3, r2
 80039ce:	001a      	movs	r2, r3
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	695b      	ldr	r3, [r3, #20]
 80039d4:	4313      	orrs	r3, r2
 80039d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68fa      	ldr	r2, [r7, #12]
 80039dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80039e6:	683b      	ldr	r3, [r7, #0]
 80039e8:	681a      	ldr	r2, [r3, #0]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a0c      	ldr	r2, [pc, #48]	; (8003a24 <TIM_Base_SetConfig+0xe4>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d00b      	beq.n	8003a0e <TIM_Base_SetConfig+0xce>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a0d      	ldr	r2, [pc, #52]	; (8003a30 <TIM_Base_SetConfig+0xf0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d007      	beq.n	8003a0e <TIM_Base_SetConfig+0xce>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a0c      	ldr	r2, [pc, #48]	; (8003a34 <TIM_Base_SetConfig+0xf4>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d003      	beq.n	8003a0e <TIM_Base_SetConfig+0xce>
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a0b      	ldr	r2, [pc, #44]	; (8003a38 <TIM_Base_SetConfig+0xf8>)
 8003a0a:	4293      	cmp	r3, r2
 8003a0c:	d103      	bne.n	8003a16 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	691a      	ldr	r2, [r3, #16]
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2201      	movs	r2, #1
 8003a1a:	615a      	str	r2, [r3, #20]
}
 8003a1c:	46c0      	nop			; (mov r8, r8)
 8003a1e:	46bd      	mov	sp, r7
 8003a20:	b004      	add	sp, #16
 8003a22:	bd80      	pop	{r7, pc}
 8003a24:	40012c00 	.word	0x40012c00
 8003a28:	40000400 	.word	0x40000400
 8003a2c:	40002000 	.word	0x40002000
 8003a30:	40014000 	.word	0x40014000
 8003a34:	40014400 	.word	0x40014400
 8003a38:	40014800 	.word	0x40014800
 8003a3c:	fffffcff 	.word	0xfffffcff

08003a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b082      	sub	sp, #8
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003a48:	46c0      	nop			; (mov r8, r8)
 8003a4a:	46bd      	mov	sp, r7
 8003a4c:	b002      	add	sp, #8
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b082      	sub	sp, #8
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003a58:	46c0      	nop			; (mov r8, r8)
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	b002      	add	sp, #8
 8003a5e:	bd80      	pop	{r7, pc}

08003a60 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b082      	sub	sp, #8
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003a68:	46c0      	nop			; (mov r8, r8)
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d101      	bne.n	8003a82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e046      	b.n	8003b10 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2288      	movs	r2, #136	; 0x88
 8003a86:	589b      	ldr	r3, [r3, r2]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d107      	bne.n	8003a9c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2284      	movs	r2, #132	; 0x84
 8003a90:	2100      	movs	r1, #0
 8003a92:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	0018      	movs	r0, r3
 8003a98:	f7fd f9d0 	bl	8000e3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2288      	movs	r2, #136	; 0x88
 8003aa0:	2124      	movs	r1, #36	; 0x24
 8003aa2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	2101      	movs	r1, #1
 8003ab0:	438a      	bics	r2, r1
 8003ab2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 fb72 	bl	80041a0 <UART_SetConfig>
 8003abc:	0003      	movs	r3, r0
 8003abe:	2b01      	cmp	r3, #1
 8003ac0:	d101      	bne.n	8003ac6 <HAL_UART_Init+0x56>
  {
    return HAL_ERROR;
 8003ac2:	2301      	movs	r3, #1
 8003ac4:	e024      	b.n	8003b10 <HAL_UART_Init+0xa0>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d003      	beq.n	8003ad6 <HAL_UART_Init+0x66>
  {
    UART_AdvFeatureConfig(huart);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f000 fe23 	bl	800471c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	685a      	ldr	r2, [r3, #4]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	490d      	ldr	r1, [pc, #52]	; (8003b18 <HAL_UART_Init+0xa8>)
 8003ae2:	400a      	ands	r2, r1
 8003ae4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	689a      	ldr	r2, [r3, #8]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	212a      	movs	r1, #42	; 0x2a
 8003af2:	438a      	bics	r2, r1
 8003af4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681a      	ldr	r2, [r3, #0]
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	2101      	movs	r1, #1
 8003b02:	430a      	orrs	r2, r1
 8003b04:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	0018      	movs	r0, r3
 8003b0a:	f000 febb 	bl	8004884 <UART_CheckIdleState>
 8003b0e:	0003      	movs	r3, r0
}
 8003b10:	0018      	movs	r0, r3
 8003b12:	46bd      	mov	sp, r7
 8003b14:	b002      	add	sp, #8
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	ffffb7ff 	.word	0xffffb7ff

08003b1c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003b1c:	b5b0      	push	{r4, r5, r7, lr}
 8003b1e:	b0aa      	sub	sp, #168	; 0xa8
 8003b20:	af00      	add	r7, sp, #0
 8003b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	22a4      	movs	r2, #164	; 0xa4
 8003b2c:	18b9      	adds	r1, r7, r2
 8003b2e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	20a0      	movs	r0, #160	; 0xa0
 8003b38:	1839      	adds	r1, r7, r0
 8003b3a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	249c      	movs	r4, #156	; 0x9c
 8003b44:	1939      	adds	r1, r7, r4
 8003b46:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003b48:	0011      	movs	r1, r2
 8003b4a:	18bb      	adds	r3, r7, r2
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4aa2      	ldr	r2, [pc, #648]	; (8003dd8 <HAL_UART_IRQHandler+0x2bc>)
 8003b50:	4013      	ands	r3, r2
 8003b52:	2298      	movs	r2, #152	; 0x98
 8003b54:	18bd      	adds	r5, r7, r2
 8003b56:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8003b58:	18bb      	adds	r3, r7, r2
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d11a      	bne.n	8003b96 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003b60:	187b      	adds	r3, r7, r1
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	2220      	movs	r2, #32
 8003b66:	4013      	ands	r3, r2
 8003b68:	d015      	beq.n	8003b96 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003b6a:	183b      	adds	r3, r7, r0
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2220      	movs	r2, #32
 8003b70:	4013      	ands	r3, r2
 8003b72:	d105      	bne.n	8003b80 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003b74:	193b      	adds	r3, r7, r4
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	2380      	movs	r3, #128	; 0x80
 8003b7a:	055b      	lsls	r3, r3, #21
 8003b7c:	4013      	ands	r3, r2
 8003b7e:	d00a      	beq.n	8003b96 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d100      	bne.n	8003b8a <HAL_UART_IRQHandler+0x6e>
 8003b88:	e2dc      	b.n	8004144 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b8e:	687a      	ldr	r2, [r7, #4]
 8003b90:	0010      	movs	r0, r2
 8003b92:	4798      	blx	r3
      }
      return;
 8003b94:	e2d6      	b.n	8004144 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b96:	2398      	movs	r3, #152	; 0x98
 8003b98:	18fb      	adds	r3, r7, r3
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d100      	bne.n	8003ba2 <HAL_UART_IRQHandler+0x86>
 8003ba0:	e122      	b.n	8003de8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8003ba2:	239c      	movs	r3, #156	; 0x9c
 8003ba4:	18fb      	adds	r3, r7, r3
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a8c      	ldr	r2, [pc, #560]	; (8003ddc <HAL_UART_IRQHandler+0x2c0>)
 8003baa:	4013      	ands	r3, r2
 8003bac:	d106      	bne.n	8003bbc <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8003bae:	23a0      	movs	r3, #160	; 0xa0
 8003bb0:	18fb      	adds	r3, r7, r3
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	4a8a      	ldr	r2, [pc, #552]	; (8003de0 <HAL_UART_IRQHandler+0x2c4>)
 8003bb6:	4013      	ands	r3, r2
 8003bb8:	d100      	bne.n	8003bbc <HAL_UART_IRQHandler+0xa0>
 8003bba:	e115      	b.n	8003de8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003bbc:	23a4      	movs	r3, #164	; 0xa4
 8003bbe:	18fb      	adds	r3, r7, r3
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	d012      	beq.n	8003bee <HAL_UART_IRQHandler+0xd2>
 8003bc8:	23a0      	movs	r3, #160	; 0xa0
 8003bca:	18fb      	adds	r3, r7, r3
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	2380      	movs	r3, #128	; 0x80
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	d00b      	beq.n	8003bee <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2290      	movs	r2, #144	; 0x90
 8003be2:	589b      	ldr	r3, [r3, r2]
 8003be4:	2201      	movs	r2, #1
 8003be6:	431a      	orrs	r2, r3
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2190      	movs	r1, #144	; 0x90
 8003bec:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003bee:	23a4      	movs	r3, #164	; 0xa4
 8003bf0:	18fb      	adds	r3, r7, r3
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	2202      	movs	r2, #2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	d011      	beq.n	8003c1e <HAL_UART_IRQHandler+0x102>
 8003bfa:	239c      	movs	r3, #156	; 0x9c
 8003bfc:	18fb      	adds	r3, r7, r3
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	2201      	movs	r2, #1
 8003c02:	4013      	ands	r3, r2
 8003c04:	d00b      	beq.n	8003c1e <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2290      	movs	r2, #144	; 0x90
 8003c12:	589b      	ldr	r3, [r3, r2]
 8003c14:	2204      	movs	r2, #4
 8003c16:	431a      	orrs	r2, r3
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2190      	movs	r1, #144	; 0x90
 8003c1c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c1e:	23a4      	movs	r3, #164	; 0xa4
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2204      	movs	r2, #4
 8003c26:	4013      	ands	r3, r2
 8003c28:	d011      	beq.n	8003c4e <HAL_UART_IRQHandler+0x132>
 8003c2a:	239c      	movs	r3, #156	; 0x9c
 8003c2c:	18fb      	adds	r3, r7, r3
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2201      	movs	r2, #1
 8003c32:	4013      	ands	r3, r2
 8003c34:	d00b      	beq.n	8003c4e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	2204      	movs	r2, #4
 8003c3c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	2290      	movs	r2, #144	; 0x90
 8003c42:	589b      	ldr	r3, [r3, r2]
 8003c44:	2202      	movs	r2, #2
 8003c46:	431a      	orrs	r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2190      	movs	r1, #144	; 0x90
 8003c4c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003c4e:	23a4      	movs	r3, #164	; 0xa4
 8003c50:	18fb      	adds	r3, r7, r3
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2208      	movs	r2, #8
 8003c56:	4013      	ands	r3, r2
 8003c58:	d017      	beq.n	8003c8a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c5a:	23a0      	movs	r3, #160	; 0xa0
 8003c5c:	18fb      	adds	r3, r7, r3
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2220      	movs	r2, #32
 8003c62:	4013      	ands	r3, r2
 8003c64:	d105      	bne.n	8003c72 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8003c66:	239c      	movs	r3, #156	; 0x9c
 8003c68:	18fb      	adds	r3, r7, r3
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a5b      	ldr	r2, [pc, #364]	; (8003ddc <HAL_UART_IRQHandler+0x2c0>)
 8003c6e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8003c70:	d00b      	beq.n	8003c8a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	2208      	movs	r2, #8
 8003c78:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2290      	movs	r2, #144	; 0x90
 8003c7e:	589b      	ldr	r3, [r3, r2]
 8003c80:	2208      	movs	r2, #8
 8003c82:	431a      	orrs	r2, r3
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2190      	movs	r1, #144	; 0x90
 8003c88:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c8a:	23a4      	movs	r3, #164	; 0xa4
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	2380      	movs	r3, #128	; 0x80
 8003c92:	011b      	lsls	r3, r3, #4
 8003c94:	4013      	ands	r3, r2
 8003c96:	d013      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1a4>
 8003c98:	23a0      	movs	r3, #160	; 0xa0
 8003c9a:	18fb      	adds	r3, r7, r3
 8003c9c:	681a      	ldr	r2, [r3, #0]
 8003c9e:	2380      	movs	r3, #128	; 0x80
 8003ca0:	04db      	lsls	r3, r3, #19
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	d00c      	beq.n	8003cc0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	0112      	lsls	r2, r2, #4
 8003cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	2290      	movs	r2, #144	; 0x90
 8003cb4:	589b      	ldr	r3, [r3, r2]
 8003cb6:	2220      	movs	r2, #32
 8003cb8:	431a      	orrs	r2, r3
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	2190      	movs	r1, #144	; 0x90
 8003cbe:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	2290      	movs	r2, #144	; 0x90
 8003cc4:	589b      	ldr	r3, [r3, r2]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d100      	bne.n	8003ccc <HAL_UART_IRQHandler+0x1b0>
 8003cca:	e23d      	b.n	8004148 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8003ccc:	23a4      	movs	r3, #164	; 0xa4
 8003cce:	18fb      	adds	r3, r7, r3
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2220      	movs	r2, #32
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d015      	beq.n	8003d04 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8003cd8:	23a0      	movs	r3, #160	; 0xa0
 8003cda:	18fb      	adds	r3, r7, r3
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2220      	movs	r2, #32
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	d106      	bne.n	8003cf2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8003ce4:	239c      	movs	r3, #156	; 0x9c
 8003ce6:	18fb      	adds	r3, r7, r3
 8003ce8:	681a      	ldr	r2, [r3, #0]
 8003cea:	2380      	movs	r3, #128	; 0x80
 8003cec:	055b      	lsls	r3, r3, #21
 8003cee:	4013      	ands	r3, r2
 8003cf0:	d008      	beq.n	8003d04 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d004      	beq.n	8003d04 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	0010      	movs	r0, r2
 8003d02:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2290      	movs	r2, #144	; 0x90
 8003d08:	589b      	ldr	r3, [r3, r2]
 8003d0a:	2194      	movs	r1, #148	; 0x94
 8003d0c:	187a      	adds	r2, r7, r1
 8003d0e:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	2240      	movs	r2, #64	; 0x40
 8003d18:	4013      	ands	r3, r2
 8003d1a:	2b40      	cmp	r3, #64	; 0x40
 8003d1c:	d004      	beq.n	8003d28 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003d1e:	187b      	adds	r3, r7, r1
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	2228      	movs	r2, #40	; 0x28
 8003d24:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d26:	d04c      	beq.n	8003dc2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fec0 	bl	8004ab0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	2240      	movs	r2, #64	; 0x40
 8003d38:	4013      	ands	r3, r2
 8003d3a:	2b40      	cmp	r3, #64	; 0x40
 8003d3c:	d13c      	bne.n	8003db8 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8003d42:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8003d44:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d46:	2090      	movs	r0, #144	; 0x90
 8003d48:	183a      	adds	r2, r7, r0
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	2301      	movs	r3, #1
 8003d4e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d52:	f383 8810 	msr	PRIMASK, r3
}
 8003d56:	46c0      	nop			; (mov r8, r8)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	689a      	ldr	r2, [r3, #8]
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2140      	movs	r1, #64	; 0x40
 8003d64:	438a      	bics	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
 8003d68:	183b      	adds	r3, r7, r0
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003d70:	f383 8810 	msr	PRIMASK, r3
}
 8003d74:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2280      	movs	r2, #128	; 0x80
 8003d7a:	589b      	ldr	r3, [r3, r2]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d016      	beq.n	8003dae <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2280      	movs	r2, #128	; 0x80
 8003d84:	589b      	ldr	r3, [r3, r2]
 8003d86:	4a17      	ldr	r2, [pc, #92]	; (8003de4 <HAL_UART_IRQHandler+0x2c8>)
 8003d88:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	2280      	movs	r2, #128	; 0x80
 8003d8e:	589b      	ldr	r3, [r3, r2]
 8003d90:	0018      	movs	r0, r3
 8003d92:	f7fd fafd 	bl	8001390 <HAL_DMA_Abort_IT>
 8003d96:	1e03      	subs	r3, r0, #0
 8003d98:	d01c      	beq.n	8003dd4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2280      	movs	r2, #128	; 0x80
 8003d9e:	589b      	ldr	r3, [r3, r2]
 8003da0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	2180      	movs	r1, #128	; 0x80
 8003da6:	5852      	ldr	r2, [r2, r1]
 8003da8:	0010      	movs	r0, r2
 8003daa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dac:	e012      	b.n	8003dd4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	0018      	movs	r0, r3
 8003db2:	f000 f9e1 	bl	8004178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003db6:	e00d      	b.n	8003dd4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	0018      	movs	r0, r3
 8003dbc:	f000 f9dc 	bl	8004178 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dc0:	e008      	b.n	8003dd4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	0018      	movs	r0, r3
 8003dc6:	f000 f9d7 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2290      	movs	r2, #144	; 0x90
 8003dce:	2100      	movs	r1, #0
 8003dd0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003dd2:	e1b9      	b.n	8004148 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dd4:	46c0      	nop			; (mov r8, r8)
    return;
 8003dd6:	e1b7      	b.n	8004148 <HAL_UART_IRQHandler+0x62c>
 8003dd8:	0000080f 	.word	0x0000080f
 8003ddc:	10000001 	.word	0x10000001
 8003de0:	04000120 	.word	0x04000120
 8003de4:	08004b7d 	.word	0x08004b7d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d000      	beq.n	8003df2 <HAL_UART_IRQHandler+0x2d6>
 8003df0:	e13e      	b.n	8004070 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003df2:	23a4      	movs	r3, #164	; 0xa4
 8003df4:	18fb      	adds	r3, r7, r3
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	2210      	movs	r2, #16
 8003dfa:	4013      	ands	r3, r2
 8003dfc:	d100      	bne.n	8003e00 <HAL_UART_IRQHandler+0x2e4>
 8003dfe:	e137      	b.n	8004070 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e00:	23a0      	movs	r3, #160	; 0xa0
 8003e02:	18fb      	adds	r3, r7, r3
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2210      	movs	r2, #16
 8003e08:	4013      	ands	r3, r2
 8003e0a:	d100      	bne.n	8003e0e <HAL_UART_IRQHandler+0x2f2>
 8003e0c:	e130      	b.n	8004070 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2210      	movs	r2, #16
 8003e14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	2240      	movs	r2, #64	; 0x40
 8003e1e:	4013      	ands	r3, r2
 8003e20:	2b40      	cmp	r3, #64	; 0x40
 8003e22:	d000      	beq.n	8003e26 <HAL_UART_IRQHandler+0x30a>
 8003e24:	e0a4      	b.n	8003f70 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2280      	movs	r2, #128	; 0x80
 8003e2a:	589b      	ldr	r3, [r3, r2]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	685a      	ldr	r2, [r3, #4]
 8003e30:	217e      	movs	r1, #126	; 0x7e
 8003e32:	187b      	adds	r3, r7, r1
 8003e34:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8003e36:	187b      	adds	r3, r7, r1
 8003e38:	881b      	ldrh	r3, [r3, #0]
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d100      	bne.n	8003e40 <HAL_UART_IRQHandler+0x324>
 8003e3e:	e185      	b.n	800414c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	225c      	movs	r2, #92	; 0x5c
 8003e44:	5a9b      	ldrh	r3, [r3, r2]
 8003e46:	187a      	adds	r2, r7, r1
 8003e48:	8812      	ldrh	r2, [r2, #0]
 8003e4a:	429a      	cmp	r2, r3
 8003e4c:	d300      	bcc.n	8003e50 <HAL_UART_IRQHandler+0x334>
 8003e4e:	e17d      	b.n	800414c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	187a      	adds	r2, r7, r1
 8003e54:	215e      	movs	r1, #94	; 0x5e
 8003e56:	8812      	ldrh	r2, [r2, #0]
 8003e58:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	2280      	movs	r2, #128	; 0x80
 8003e5e:	589b      	ldr	r3, [r3, r2]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2220      	movs	r2, #32
 8003e66:	4013      	ands	r3, r2
 8003e68:	d170      	bne.n	8003f4c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e6a:	f3ef 8310 	mrs	r3, PRIMASK
 8003e6e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003e70:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003e72:	67bb      	str	r3, [r7, #120]	; 0x78
 8003e74:	2301      	movs	r3, #1
 8003e76:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7a:	f383 8810 	msr	PRIMASK, r3
}
 8003e7e:	46c0      	nop			; (mov r8, r8)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	681a      	ldr	r2, [r3, #0]
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	49b4      	ldr	r1, [pc, #720]	; (800415c <HAL_UART_IRQHandler+0x640>)
 8003e8c:	400a      	ands	r2, r1
 8003e8e:	601a      	str	r2, [r3, #0]
 8003e90:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e92:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e96:	f383 8810 	msr	PRIMASK, r3
}
 8003e9a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e9c:	f3ef 8310 	mrs	r3, PRIMASK
 8003ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8003ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ea4:	677b      	str	r3, [r7, #116]	; 0x74
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003eaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003eac:	f383 8810 	msr	PRIMASK, r3
}
 8003eb0:	46c0      	nop			; (mov r8, r8)
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	689a      	ldr	r2, [r3, #8]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	438a      	bics	r2, r1
 8003ec0:	609a      	str	r2, [r3, #8]
 8003ec2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ec4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ec6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ec8:	f383 8810 	msr	PRIMASK, r3
}
 8003ecc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003ece:	f3ef 8310 	mrs	r3, PRIMASK
 8003ed2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8003ed4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003ed6:	673b      	str	r3, [r7, #112]	; 0x70
 8003ed8:	2301      	movs	r3, #1
 8003eda:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003edc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ede:	f383 8810 	msr	PRIMASK, r3
}
 8003ee2:	46c0      	nop			; (mov r8, r8)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	689a      	ldr	r2, [r3, #8]
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	2140      	movs	r1, #64	; 0x40
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	609a      	str	r2, [r3, #8]
 8003ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003ef6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ef8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003efa:	f383 8810 	msr	PRIMASK, r3
}
 8003efe:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	228c      	movs	r2, #140	; 0x8c
 8003f04:	2120      	movs	r1, #32
 8003f06:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f0e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f12:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8003f14:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003f16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f18:	2301      	movs	r3, #1
 8003f1a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f1c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003f1e:	f383 8810 	msr	PRIMASK, r3
}
 8003f22:	46c0      	nop			; (mov r8, r8)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681a      	ldr	r2, [r3, #0]
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2110      	movs	r1, #16
 8003f30:	438a      	bics	r2, r1
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f36:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003f3a:	f383 8810 	msr	PRIMASK, r3
}
 8003f3e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2280      	movs	r2, #128	; 0x80
 8003f44:	589b      	ldr	r3, [r3, r2]
 8003f46:	0018      	movs	r0, r3
 8003f48:	f7fd f9c0 	bl	80012cc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2202      	movs	r2, #2
 8003f50:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	225c      	movs	r2, #92	; 0x5c
 8003f56:	5a9a      	ldrh	r2, [r3, r2]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	215e      	movs	r1, #94	; 0x5e
 8003f5c:	5a5b      	ldrh	r3, [r3, r1]
 8003f5e:	b29b      	uxth	r3, r3
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	b29a      	uxth	r2, r3
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	0011      	movs	r1, r2
 8003f68:	0018      	movs	r0, r3
 8003f6a:	f000 f90d 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003f6e:	e0ed      	b.n	800414c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	225c      	movs	r2, #92	; 0x5c
 8003f74:	5a99      	ldrh	r1, [r3, r2]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	225e      	movs	r2, #94	; 0x5e
 8003f7a:	5a9b      	ldrh	r3, [r3, r2]
 8003f7c:	b29a      	uxth	r2, r3
 8003f7e:	208e      	movs	r0, #142	; 0x8e
 8003f80:	183b      	adds	r3, r7, r0
 8003f82:	1a8a      	subs	r2, r1, r2
 8003f84:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	225e      	movs	r2, #94	; 0x5e
 8003f8a:	5a9b      	ldrh	r3, [r3, r2]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d100      	bne.n	8003f94 <HAL_UART_IRQHandler+0x478>
 8003f92:	e0dd      	b.n	8004150 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003f94:	183b      	adds	r3, r7, r0
 8003f96:	881b      	ldrh	r3, [r3, #0]
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d100      	bne.n	8003f9e <HAL_UART_IRQHandler+0x482>
 8003f9c:	e0d8      	b.n	8004150 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f9e:	f3ef 8310 	mrs	r3, PRIMASK
 8003fa2:	60fb      	str	r3, [r7, #12]
  return(result);
 8003fa4:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003fa6:	2488      	movs	r4, #136	; 0x88
 8003fa8:	193a      	adds	r2, r7, r4
 8003faa:	6013      	str	r3, [r2, #0]
 8003fac:	2301      	movs	r3, #1
 8003fae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	f383 8810 	msr	PRIMASK, r3
}
 8003fb6:	46c0      	nop			; (mov r8, r8)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4967      	ldr	r1, [pc, #412]	; (8004160 <HAL_UART_IRQHandler+0x644>)
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	601a      	str	r2, [r3, #0]
 8003fc8:	193b      	adds	r3, r7, r4
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fce:	697b      	ldr	r3, [r7, #20]
 8003fd0:	f383 8810 	msr	PRIMASK, r3
}
 8003fd4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd6:	f3ef 8310 	mrs	r3, PRIMASK
 8003fda:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fdc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003fde:	2484      	movs	r4, #132	; 0x84
 8003fe0:	193a      	adds	r2, r7, r4
 8003fe2:	6013      	str	r3, [r2, #0]
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f383 8810 	msr	PRIMASK, r3
}
 8003fee:	46c0      	nop			; (mov r8, r8)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	689a      	ldr	r2, [r3, #8]
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	495a      	ldr	r1, [pc, #360]	; (8004164 <HAL_UART_IRQHandler+0x648>)
 8003ffc:	400a      	ands	r2, r1
 8003ffe:	609a      	str	r2, [r3, #8]
 8004000:	193b      	adds	r3, r7, r4
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004006:	6a3b      	ldr	r3, [r7, #32]
 8004008:	f383 8810 	msr	PRIMASK, r3
}
 800400c:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	228c      	movs	r2, #140	; 0x8c
 8004012:	2120      	movs	r1, #32
 8004014:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2200      	movs	r2, #0
 800401a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004022:	f3ef 8310 	mrs	r3, PRIMASK
 8004026:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800402a:	2480      	movs	r4, #128	; 0x80
 800402c:	193a      	adds	r2, r7, r4
 800402e:	6013      	str	r3, [r2, #0]
 8004030:	2301      	movs	r3, #1
 8004032:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	681a      	ldr	r2, [r3, #0]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2110      	movs	r1, #16
 8004048:	438a      	bics	r2, r1
 800404a:	601a      	str	r2, [r3, #0]
 800404c:	193b      	adds	r3, r7, r4
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004052:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004054:	f383 8810 	msr	PRIMASK, r3
}
 8004058:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2202      	movs	r2, #2
 800405e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004060:	183b      	adds	r3, r7, r0
 8004062:	881a      	ldrh	r2, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f000 f88d 	bl	8004188 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800406e:	e06f      	b.n	8004150 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004070:	23a4      	movs	r3, #164	; 0xa4
 8004072:	18fb      	adds	r3, r7, r3
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	2380      	movs	r3, #128	; 0x80
 8004078:	035b      	lsls	r3, r3, #13
 800407a:	4013      	ands	r3, r2
 800407c:	d010      	beq.n	80040a0 <HAL_UART_IRQHandler+0x584>
 800407e:	239c      	movs	r3, #156	; 0x9c
 8004080:	18fb      	adds	r3, r7, r3
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	2380      	movs	r3, #128	; 0x80
 8004086:	03db      	lsls	r3, r3, #15
 8004088:	4013      	ands	r3, r2
 800408a:	d009      	beq.n	80040a0 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	2280      	movs	r2, #128	; 0x80
 8004092:	0352      	lsls	r2, r2, #13
 8004094:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	0018      	movs	r0, r3
 800409a:	f000 fdb2 	bl	8004c02 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800409e:	e05a      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80040a0:	23a4      	movs	r3, #164	; 0xa4
 80040a2:	18fb      	adds	r3, r7, r3
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	2280      	movs	r2, #128	; 0x80
 80040a8:	4013      	ands	r3, r2
 80040aa:	d016      	beq.n	80040da <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80040ac:	23a0      	movs	r3, #160	; 0xa0
 80040ae:	18fb      	adds	r3, r7, r3
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	2280      	movs	r2, #128	; 0x80
 80040b4:	4013      	ands	r3, r2
 80040b6:	d106      	bne.n	80040c6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80040b8:	239c      	movs	r3, #156	; 0x9c
 80040ba:	18fb      	adds	r3, r7, r3
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	041b      	lsls	r3, r3, #16
 80040c2:	4013      	ands	r3, r2
 80040c4:	d009      	beq.n	80040da <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d042      	beq.n	8004154 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80040d2:	687a      	ldr	r2, [r7, #4]
 80040d4:	0010      	movs	r0, r2
 80040d6:	4798      	blx	r3
    }
    return;
 80040d8:	e03c      	b.n	8004154 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80040da:	23a4      	movs	r3, #164	; 0xa4
 80040dc:	18fb      	adds	r3, r7, r3
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2240      	movs	r2, #64	; 0x40
 80040e2:	4013      	ands	r3, r2
 80040e4:	d00a      	beq.n	80040fc <HAL_UART_IRQHandler+0x5e0>
 80040e6:	23a0      	movs	r3, #160	; 0xa0
 80040e8:	18fb      	adds	r3, r7, r3
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2240      	movs	r2, #64	; 0x40
 80040ee:	4013      	ands	r3, r2
 80040f0:	d004      	beq.n	80040fc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0018      	movs	r0, r3
 80040f6:	f000 fd58 	bl	8004baa <UART_EndTransmit_IT>
    return;
 80040fa:	e02c      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80040fc:	23a4      	movs	r3, #164	; 0xa4
 80040fe:	18fb      	adds	r3, r7, r3
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	2380      	movs	r3, #128	; 0x80
 8004104:	041b      	lsls	r3, r3, #16
 8004106:	4013      	ands	r3, r2
 8004108:	d00b      	beq.n	8004122 <HAL_UART_IRQHandler+0x606>
 800410a:	23a0      	movs	r3, #160	; 0xa0
 800410c:	18fb      	adds	r3, r7, r3
 800410e:	681a      	ldr	r2, [r3, #0]
 8004110:	2380      	movs	r3, #128	; 0x80
 8004112:	05db      	lsls	r3, r3, #23
 8004114:	4013      	ands	r3, r2
 8004116:	d004      	beq.n	8004122 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	0018      	movs	r0, r3
 800411c:	f000 fd81 	bl	8004c22 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004120:	e019      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8004122:	23a4      	movs	r3, #164	; 0xa4
 8004124:	18fb      	adds	r3, r7, r3
 8004126:	681a      	ldr	r2, [r3, #0]
 8004128:	2380      	movs	r3, #128	; 0x80
 800412a:	045b      	lsls	r3, r3, #17
 800412c:	4013      	ands	r3, r2
 800412e:	d012      	beq.n	8004156 <HAL_UART_IRQHandler+0x63a>
 8004130:	23a0      	movs	r3, #160	; 0xa0
 8004132:	18fb      	adds	r3, r7, r3
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	2b00      	cmp	r3, #0
 8004138:	da0d      	bge.n	8004156 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	0018      	movs	r0, r3
 800413e:	f000 fd68 	bl	8004c12 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8004142:	e008      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
      return;
 8004144:	46c0      	nop			; (mov r8, r8)
 8004146:	e006      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
    return;
 8004148:	46c0      	nop			; (mov r8, r8)
 800414a:	e004      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
      return;
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	e002      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
      return;
 8004150:	46c0      	nop			; (mov r8, r8)
 8004152:	e000      	b.n	8004156 <HAL_UART_IRQHandler+0x63a>
    return;
 8004154:	46c0      	nop			; (mov r8, r8)
  }
}
 8004156:	46bd      	mov	sp, r7
 8004158:	b02a      	add	sp, #168	; 0xa8
 800415a:	bdb0      	pop	{r4, r5, r7, pc}
 800415c:	fffffeff 	.word	0xfffffeff
 8004160:	fffffedf 	.word	0xfffffedf
 8004164:	effffffe 	.word	0xeffffffe

08004168 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004170:	46c0      	nop			; (mov r8, r8)
 8004172:	46bd      	mov	sp, r7
 8004174:	b002      	add	sp, #8
 8004176:	bd80      	pop	{r7, pc}

08004178 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004178:	b580      	push	{r7, lr}
 800417a:	b082      	sub	sp, #8
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004180:	46c0      	nop			; (mov r8, r8)
 8004182:	46bd      	mov	sp, r7
 8004184:	b002      	add	sp, #8
 8004186:	bd80      	pop	{r7, pc}

08004188 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b082      	sub	sp, #8
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
 8004190:	000a      	movs	r2, r1
 8004192:	1cbb      	adds	r3, r7, #2
 8004194:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004196:	46c0      	nop			; (mov r8, r8)
 8004198:	46bd      	mov	sp, r7
 800419a:	b002      	add	sp, #8
 800419c:	bd80      	pop	{r7, pc}
	...

080041a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80041a0:	b5b0      	push	{r4, r5, r7, lr}
 80041a2:	b090      	sub	sp, #64	; 0x40
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80041a8:	231a      	movs	r3, #26
 80041aa:	2220      	movs	r2, #32
 80041ac:	189b      	adds	r3, r3, r2
 80041ae:	19db      	adds	r3, r3, r7
 80041b0:	2200      	movs	r2, #0
 80041b2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80041b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b6:	689a      	ldr	r2, [r3, #8]
 80041b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	431a      	orrs	r2, r3
 80041be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c0:	695b      	ldr	r3, [r3, #20]
 80041c2:	431a      	orrs	r2, r3
 80041c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c6:	69db      	ldr	r3, [r3, #28]
 80041c8:	4313      	orrs	r3, r2
 80041ca:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80041cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4aaf      	ldr	r2, [pc, #700]	; (8004490 <UART_SetConfig+0x2f0>)
 80041d4:	4013      	ands	r3, r2
 80041d6:	0019      	movs	r1, r3
 80041d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041da:	681a      	ldr	r2, [r3, #0]
 80041dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041de:	430b      	orrs	r3, r1
 80041e0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	4aaa      	ldr	r2, [pc, #680]	; (8004494 <UART_SetConfig+0x2f4>)
 80041ea:	4013      	ands	r3, r2
 80041ec:	0018      	movs	r0, r3
 80041ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f0:	68d9      	ldr	r1, [r3, #12]
 80041f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	0003      	movs	r3, r0
 80041f8:	430b      	orrs	r3, r1
 80041fa:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80041fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041fe:	699b      	ldr	r3, [r3, #24]
 8004200:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004202:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	4aa4      	ldr	r2, [pc, #656]	; (8004498 <UART_SetConfig+0x2f8>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d004      	beq.n	8004216 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800420c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420e:	6a1b      	ldr	r3, [r3, #32]
 8004210:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004212:	4313      	orrs	r3, r2
 8004214:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689b      	ldr	r3, [r3, #8]
 800421c:	4a9f      	ldr	r2, [pc, #636]	; (800449c <UART_SetConfig+0x2fc>)
 800421e:	4013      	ands	r3, r2
 8004220:	0019      	movs	r1, r3
 8004222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004228:	430b      	orrs	r3, r1
 800422a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800422c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004232:	220f      	movs	r2, #15
 8004234:	4393      	bics	r3, r2
 8004236:	0018      	movs	r0, r3
 8004238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800423c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800423e:	681a      	ldr	r2, [r3, #0]
 8004240:	0003      	movs	r3, r0
 8004242:	430b      	orrs	r3, r1
 8004244:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a95      	ldr	r2, [pc, #596]	; (80044a0 <UART_SetConfig+0x300>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d131      	bne.n	80042b4 <UART_SetConfig+0x114>
 8004250:	4b94      	ldr	r3, [pc, #592]	; (80044a4 <UART_SetConfig+0x304>)
 8004252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004254:	2203      	movs	r2, #3
 8004256:	4013      	ands	r3, r2
 8004258:	2b03      	cmp	r3, #3
 800425a:	d01d      	beq.n	8004298 <UART_SetConfig+0xf8>
 800425c:	d823      	bhi.n	80042a6 <UART_SetConfig+0x106>
 800425e:	2b02      	cmp	r3, #2
 8004260:	d00c      	beq.n	800427c <UART_SetConfig+0xdc>
 8004262:	d820      	bhi.n	80042a6 <UART_SetConfig+0x106>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d002      	beq.n	800426e <UART_SetConfig+0xce>
 8004268:	2b01      	cmp	r3, #1
 800426a:	d00e      	beq.n	800428a <UART_SetConfig+0xea>
 800426c:	e01b      	b.n	80042a6 <UART_SetConfig+0x106>
 800426e:	231b      	movs	r3, #27
 8004270:	2220      	movs	r2, #32
 8004272:	189b      	adds	r3, r3, r2
 8004274:	19db      	adds	r3, r3, r7
 8004276:	2200      	movs	r2, #0
 8004278:	701a      	strb	r2, [r3, #0]
 800427a:	e0b4      	b.n	80043e6 <UART_SetConfig+0x246>
 800427c:	231b      	movs	r3, #27
 800427e:	2220      	movs	r2, #32
 8004280:	189b      	adds	r3, r3, r2
 8004282:	19db      	adds	r3, r3, r7
 8004284:	2202      	movs	r2, #2
 8004286:	701a      	strb	r2, [r3, #0]
 8004288:	e0ad      	b.n	80043e6 <UART_SetConfig+0x246>
 800428a:	231b      	movs	r3, #27
 800428c:	2220      	movs	r2, #32
 800428e:	189b      	adds	r3, r3, r2
 8004290:	19db      	adds	r3, r3, r7
 8004292:	2204      	movs	r2, #4
 8004294:	701a      	strb	r2, [r3, #0]
 8004296:	e0a6      	b.n	80043e6 <UART_SetConfig+0x246>
 8004298:	231b      	movs	r3, #27
 800429a:	2220      	movs	r2, #32
 800429c:	189b      	adds	r3, r3, r2
 800429e:	19db      	adds	r3, r3, r7
 80042a0:	2208      	movs	r2, #8
 80042a2:	701a      	strb	r2, [r3, #0]
 80042a4:	e09f      	b.n	80043e6 <UART_SetConfig+0x246>
 80042a6:	231b      	movs	r3, #27
 80042a8:	2220      	movs	r2, #32
 80042aa:	189b      	adds	r3, r3, r2
 80042ac:	19db      	adds	r3, r3, r7
 80042ae:	2210      	movs	r2, #16
 80042b0:	701a      	strb	r2, [r3, #0]
 80042b2:	e098      	b.n	80043e6 <UART_SetConfig+0x246>
 80042b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	4a7b      	ldr	r2, [pc, #492]	; (80044a8 <UART_SetConfig+0x308>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d131      	bne.n	8004322 <UART_SetConfig+0x182>
 80042be:	4b79      	ldr	r3, [pc, #484]	; (80044a4 <UART_SetConfig+0x304>)
 80042c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042c2:	220c      	movs	r2, #12
 80042c4:	4013      	ands	r3, r2
 80042c6:	2b0c      	cmp	r3, #12
 80042c8:	d01d      	beq.n	8004306 <UART_SetConfig+0x166>
 80042ca:	d823      	bhi.n	8004314 <UART_SetConfig+0x174>
 80042cc:	2b08      	cmp	r3, #8
 80042ce:	d00c      	beq.n	80042ea <UART_SetConfig+0x14a>
 80042d0:	d820      	bhi.n	8004314 <UART_SetConfig+0x174>
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <UART_SetConfig+0x13c>
 80042d6:	2b04      	cmp	r3, #4
 80042d8:	d00e      	beq.n	80042f8 <UART_SetConfig+0x158>
 80042da:	e01b      	b.n	8004314 <UART_SetConfig+0x174>
 80042dc:	231b      	movs	r3, #27
 80042de:	2220      	movs	r2, #32
 80042e0:	189b      	adds	r3, r3, r2
 80042e2:	19db      	adds	r3, r3, r7
 80042e4:	2200      	movs	r2, #0
 80042e6:	701a      	strb	r2, [r3, #0]
 80042e8:	e07d      	b.n	80043e6 <UART_SetConfig+0x246>
 80042ea:	231b      	movs	r3, #27
 80042ec:	2220      	movs	r2, #32
 80042ee:	189b      	adds	r3, r3, r2
 80042f0:	19db      	adds	r3, r3, r7
 80042f2:	2202      	movs	r2, #2
 80042f4:	701a      	strb	r2, [r3, #0]
 80042f6:	e076      	b.n	80043e6 <UART_SetConfig+0x246>
 80042f8:	231b      	movs	r3, #27
 80042fa:	2220      	movs	r2, #32
 80042fc:	189b      	adds	r3, r3, r2
 80042fe:	19db      	adds	r3, r3, r7
 8004300:	2204      	movs	r2, #4
 8004302:	701a      	strb	r2, [r3, #0]
 8004304:	e06f      	b.n	80043e6 <UART_SetConfig+0x246>
 8004306:	231b      	movs	r3, #27
 8004308:	2220      	movs	r2, #32
 800430a:	189b      	adds	r3, r3, r2
 800430c:	19db      	adds	r3, r3, r7
 800430e:	2208      	movs	r2, #8
 8004310:	701a      	strb	r2, [r3, #0]
 8004312:	e068      	b.n	80043e6 <UART_SetConfig+0x246>
 8004314:	231b      	movs	r3, #27
 8004316:	2220      	movs	r2, #32
 8004318:	189b      	adds	r3, r3, r2
 800431a:	19db      	adds	r3, r3, r7
 800431c:	2210      	movs	r2, #16
 800431e:	701a      	strb	r2, [r3, #0]
 8004320:	e061      	b.n	80043e6 <UART_SetConfig+0x246>
 8004322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a61      	ldr	r2, [pc, #388]	; (80044ac <UART_SetConfig+0x30c>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d106      	bne.n	800433a <UART_SetConfig+0x19a>
 800432c:	231b      	movs	r3, #27
 800432e:	2220      	movs	r2, #32
 8004330:	189b      	adds	r3, r3, r2
 8004332:	19db      	adds	r3, r3, r7
 8004334:	2200      	movs	r2, #0
 8004336:	701a      	strb	r2, [r3, #0]
 8004338:	e055      	b.n	80043e6 <UART_SetConfig+0x246>
 800433a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	4a5c      	ldr	r2, [pc, #368]	; (80044b0 <UART_SetConfig+0x310>)
 8004340:	4293      	cmp	r3, r2
 8004342:	d106      	bne.n	8004352 <UART_SetConfig+0x1b2>
 8004344:	231b      	movs	r3, #27
 8004346:	2220      	movs	r2, #32
 8004348:	189b      	adds	r3, r3, r2
 800434a:	19db      	adds	r3, r3, r7
 800434c:	2200      	movs	r2, #0
 800434e:	701a      	strb	r2, [r3, #0]
 8004350:	e049      	b.n	80043e6 <UART_SetConfig+0x246>
 8004352:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a50      	ldr	r2, [pc, #320]	; (8004498 <UART_SetConfig+0x2f8>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d13e      	bne.n	80043da <UART_SetConfig+0x23a>
 800435c:	4b51      	ldr	r3, [pc, #324]	; (80044a4 <UART_SetConfig+0x304>)
 800435e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004360:	23c0      	movs	r3, #192	; 0xc0
 8004362:	011b      	lsls	r3, r3, #4
 8004364:	4013      	ands	r3, r2
 8004366:	22c0      	movs	r2, #192	; 0xc0
 8004368:	0112      	lsls	r2, r2, #4
 800436a:	4293      	cmp	r3, r2
 800436c:	d027      	beq.n	80043be <UART_SetConfig+0x21e>
 800436e:	22c0      	movs	r2, #192	; 0xc0
 8004370:	0112      	lsls	r2, r2, #4
 8004372:	4293      	cmp	r3, r2
 8004374:	d82a      	bhi.n	80043cc <UART_SetConfig+0x22c>
 8004376:	2280      	movs	r2, #128	; 0x80
 8004378:	0112      	lsls	r2, r2, #4
 800437a:	4293      	cmp	r3, r2
 800437c:	d011      	beq.n	80043a2 <UART_SetConfig+0x202>
 800437e:	2280      	movs	r2, #128	; 0x80
 8004380:	0112      	lsls	r2, r2, #4
 8004382:	4293      	cmp	r3, r2
 8004384:	d822      	bhi.n	80043cc <UART_SetConfig+0x22c>
 8004386:	2b00      	cmp	r3, #0
 8004388:	d004      	beq.n	8004394 <UART_SetConfig+0x1f4>
 800438a:	2280      	movs	r2, #128	; 0x80
 800438c:	00d2      	lsls	r2, r2, #3
 800438e:	4293      	cmp	r3, r2
 8004390:	d00e      	beq.n	80043b0 <UART_SetConfig+0x210>
 8004392:	e01b      	b.n	80043cc <UART_SetConfig+0x22c>
 8004394:	231b      	movs	r3, #27
 8004396:	2220      	movs	r2, #32
 8004398:	189b      	adds	r3, r3, r2
 800439a:	19db      	adds	r3, r3, r7
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
 80043a0:	e021      	b.n	80043e6 <UART_SetConfig+0x246>
 80043a2:	231b      	movs	r3, #27
 80043a4:	2220      	movs	r2, #32
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	19db      	adds	r3, r3, r7
 80043aa:	2202      	movs	r2, #2
 80043ac:	701a      	strb	r2, [r3, #0]
 80043ae:	e01a      	b.n	80043e6 <UART_SetConfig+0x246>
 80043b0:	231b      	movs	r3, #27
 80043b2:	2220      	movs	r2, #32
 80043b4:	189b      	adds	r3, r3, r2
 80043b6:	19db      	adds	r3, r3, r7
 80043b8:	2204      	movs	r2, #4
 80043ba:	701a      	strb	r2, [r3, #0]
 80043bc:	e013      	b.n	80043e6 <UART_SetConfig+0x246>
 80043be:	231b      	movs	r3, #27
 80043c0:	2220      	movs	r2, #32
 80043c2:	189b      	adds	r3, r3, r2
 80043c4:	19db      	adds	r3, r3, r7
 80043c6:	2208      	movs	r2, #8
 80043c8:	701a      	strb	r2, [r3, #0]
 80043ca:	e00c      	b.n	80043e6 <UART_SetConfig+0x246>
 80043cc:	231b      	movs	r3, #27
 80043ce:	2220      	movs	r2, #32
 80043d0:	189b      	adds	r3, r3, r2
 80043d2:	19db      	adds	r3, r3, r7
 80043d4:	2210      	movs	r2, #16
 80043d6:	701a      	strb	r2, [r3, #0]
 80043d8:	e005      	b.n	80043e6 <UART_SetConfig+0x246>
 80043da:	231b      	movs	r3, #27
 80043dc:	2220      	movs	r2, #32
 80043de:	189b      	adds	r3, r3, r2
 80043e0:	19db      	adds	r3, r3, r7
 80043e2:	2210      	movs	r2, #16
 80043e4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80043e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <UART_SetConfig+0x2f8>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d000      	beq.n	80043f2 <UART_SetConfig+0x252>
 80043f0:	e0a9      	b.n	8004546 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80043f2:	231b      	movs	r3, #27
 80043f4:	2220      	movs	r2, #32
 80043f6:	189b      	adds	r3, r3, r2
 80043f8:	19db      	adds	r3, r3, r7
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	d015      	beq.n	800442c <UART_SetConfig+0x28c>
 8004400:	dc18      	bgt.n	8004434 <UART_SetConfig+0x294>
 8004402:	2b04      	cmp	r3, #4
 8004404:	d00d      	beq.n	8004422 <UART_SetConfig+0x282>
 8004406:	dc15      	bgt.n	8004434 <UART_SetConfig+0x294>
 8004408:	2b00      	cmp	r3, #0
 800440a:	d002      	beq.n	8004412 <UART_SetConfig+0x272>
 800440c:	2b02      	cmp	r3, #2
 800440e:	d005      	beq.n	800441c <UART_SetConfig+0x27c>
 8004410:	e010      	b.n	8004434 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004412:	f7fe fadd 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8004416:	0003      	movs	r3, r0
 8004418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800441a:	e014      	b.n	8004446 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800441c:	4b25      	ldr	r3, [pc, #148]	; (80044b4 <UART_SetConfig+0x314>)
 800441e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004420:	e011      	b.n	8004446 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004422:	f7fe fa49 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8004426:	0003      	movs	r3, r0
 8004428:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800442a:	e00c      	b.n	8004446 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800442c:	2380      	movs	r3, #128	; 0x80
 800442e:	021b      	lsls	r3, r3, #8
 8004430:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004432:	e008      	b.n	8004446 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8004434:	2300      	movs	r3, #0
 8004436:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004438:	231a      	movs	r3, #26
 800443a:	2220      	movs	r2, #32
 800443c:	189b      	adds	r3, r3, r2
 800443e:	19db      	adds	r3, r3, r7
 8004440:	2201      	movs	r2, #1
 8004442:	701a      	strb	r2, [r3, #0]
        break;
 8004444:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004448:	2b00      	cmp	r3, #0
 800444a:	d100      	bne.n	800444e <UART_SetConfig+0x2ae>
 800444c:	e14b      	b.n	80046e6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800444e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004450:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004452:	4b19      	ldr	r3, [pc, #100]	; (80044b8 <UART_SetConfig+0x318>)
 8004454:	0052      	lsls	r2, r2, #1
 8004456:	5ad3      	ldrh	r3, [r2, r3]
 8004458:	0019      	movs	r1, r3
 800445a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800445c:	f7fb fe54 	bl	8000108 <__udivsi3>
 8004460:	0003      	movs	r3, r0
 8004462:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004466:	685a      	ldr	r2, [r3, #4]
 8004468:	0013      	movs	r3, r2
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	189b      	adds	r3, r3, r2
 800446e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004470:	429a      	cmp	r2, r3
 8004472:	d305      	bcc.n	8004480 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800447a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447c:	429a      	cmp	r2, r3
 800447e:	d91d      	bls.n	80044bc <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8004480:	231a      	movs	r3, #26
 8004482:	2220      	movs	r2, #32
 8004484:	189b      	adds	r3, r3, r2
 8004486:	19db      	adds	r3, r3, r7
 8004488:	2201      	movs	r2, #1
 800448a:	701a      	strb	r2, [r3, #0]
 800448c:	e12b      	b.n	80046e6 <UART_SetConfig+0x546>
 800448e:	46c0      	nop			; (mov r8, r8)
 8004490:	cfff69f3 	.word	0xcfff69f3
 8004494:	ffffcfff 	.word	0xffffcfff
 8004498:	40008000 	.word	0x40008000
 800449c:	11fff4ff 	.word	0x11fff4ff
 80044a0:	40013800 	.word	0x40013800
 80044a4:	40021000 	.word	0x40021000
 80044a8:	40004400 	.word	0x40004400
 80044ac:	40004800 	.word	0x40004800
 80044b0:	40004c00 	.word	0x40004c00
 80044b4:	00f42400 	.word	0x00f42400
 80044b8:	0800773c 	.word	0x0800773c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80044bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044be:	61bb      	str	r3, [r7, #24]
 80044c0:	2300      	movs	r3, #0
 80044c2:	61fb      	str	r3, [r7, #28]
 80044c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80044c8:	4b92      	ldr	r3, [pc, #584]	; (8004714 <UART_SetConfig+0x574>)
 80044ca:	0052      	lsls	r2, r2, #1
 80044cc:	5ad3      	ldrh	r3, [r2, r3]
 80044ce:	613b      	str	r3, [r7, #16]
 80044d0:	2300      	movs	r3, #0
 80044d2:	617b      	str	r3, [r7, #20]
 80044d4:	693a      	ldr	r2, [r7, #16]
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	69b8      	ldr	r0, [r7, #24]
 80044da:	69f9      	ldr	r1, [r7, #28]
 80044dc:	f7fb ff8a 	bl	80003f4 <__aeabi_uldivmod>
 80044e0:	0002      	movs	r2, r0
 80044e2:	000b      	movs	r3, r1
 80044e4:	0e11      	lsrs	r1, r2, #24
 80044e6:	021d      	lsls	r5, r3, #8
 80044e8:	430d      	orrs	r5, r1
 80044ea:	0214      	lsls	r4, r2, #8
 80044ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ee:	685b      	ldr	r3, [r3, #4]
 80044f0:	085b      	lsrs	r3, r3, #1
 80044f2:	60bb      	str	r3, [r7, #8]
 80044f4:	2300      	movs	r3, #0
 80044f6:	60fb      	str	r3, [r7, #12]
 80044f8:	68b8      	ldr	r0, [r7, #8]
 80044fa:	68f9      	ldr	r1, [r7, #12]
 80044fc:	1900      	adds	r0, r0, r4
 80044fe:	4169      	adcs	r1, r5
 8004500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	603b      	str	r3, [r7, #0]
 8004506:	2300      	movs	r3, #0
 8004508:	607b      	str	r3, [r7, #4]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f7fb ff71 	bl	80003f4 <__aeabi_uldivmod>
 8004512:	0002      	movs	r2, r0
 8004514:	000b      	movs	r3, r1
 8004516:	0013      	movs	r3, r2
 8004518:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800451a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800451c:	23c0      	movs	r3, #192	; 0xc0
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	429a      	cmp	r2, r3
 8004522:	d309      	bcc.n	8004538 <UART_SetConfig+0x398>
 8004524:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004526:	2380      	movs	r3, #128	; 0x80
 8004528:	035b      	lsls	r3, r3, #13
 800452a:	429a      	cmp	r2, r3
 800452c:	d204      	bcs.n	8004538 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800452e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004534:	60da      	str	r2, [r3, #12]
 8004536:	e0d6      	b.n	80046e6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8004538:	231a      	movs	r3, #26
 800453a:	2220      	movs	r2, #32
 800453c:	189b      	adds	r3, r3, r2
 800453e:	19db      	adds	r3, r3, r7
 8004540:	2201      	movs	r2, #1
 8004542:	701a      	strb	r2, [r3, #0]
 8004544:	e0cf      	b.n	80046e6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004548:	69da      	ldr	r2, [r3, #28]
 800454a:	2380      	movs	r3, #128	; 0x80
 800454c:	021b      	lsls	r3, r3, #8
 800454e:	429a      	cmp	r2, r3
 8004550:	d000      	beq.n	8004554 <UART_SetConfig+0x3b4>
 8004552:	e070      	b.n	8004636 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8004554:	231b      	movs	r3, #27
 8004556:	2220      	movs	r2, #32
 8004558:	189b      	adds	r3, r3, r2
 800455a:	19db      	adds	r3, r3, r7
 800455c:	781b      	ldrb	r3, [r3, #0]
 800455e:	2b08      	cmp	r3, #8
 8004560:	d015      	beq.n	800458e <UART_SetConfig+0x3ee>
 8004562:	dc18      	bgt.n	8004596 <UART_SetConfig+0x3f6>
 8004564:	2b04      	cmp	r3, #4
 8004566:	d00d      	beq.n	8004584 <UART_SetConfig+0x3e4>
 8004568:	dc15      	bgt.n	8004596 <UART_SetConfig+0x3f6>
 800456a:	2b00      	cmp	r3, #0
 800456c:	d002      	beq.n	8004574 <UART_SetConfig+0x3d4>
 800456e:	2b02      	cmp	r3, #2
 8004570:	d005      	beq.n	800457e <UART_SetConfig+0x3de>
 8004572:	e010      	b.n	8004596 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004574:	f7fe fa2c 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 8004578:	0003      	movs	r3, r0
 800457a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800457c:	e014      	b.n	80045a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800457e:	4b66      	ldr	r3, [pc, #408]	; (8004718 <UART_SetConfig+0x578>)
 8004580:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004582:	e011      	b.n	80045a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004584:	f7fe f998 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 8004588:	0003      	movs	r3, r0
 800458a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800458c:	e00c      	b.n	80045a8 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800458e:	2380      	movs	r3, #128	; 0x80
 8004590:	021b      	lsls	r3, r3, #8
 8004592:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004594:	e008      	b.n	80045a8 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8004596:	2300      	movs	r3, #0
 8004598:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800459a:	231a      	movs	r3, #26
 800459c:	2220      	movs	r2, #32
 800459e:	189b      	adds	r3, r3, r2
 80045a0:	19db      	adds	r3, r3, r7
 80045a2:	2201      	movs	r2, #1
 80045a4:	701a      	strb	r2, [r3, #0]
        break;
 80045a6:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80045a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d100      	bne.n	80045b0 <UART_SetConfig+0x410>
 80045ae:	e09a      	b.n	80046e6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045b4:	4b57      	ldr	r3, [pc, #348]	; (8004714 <UART_SetConfig+0x574>)
 80045b6:	0052      	lsls	r2, r2, #1
 80045b8:	5ad3      	ldrh	r3, [r2, r3]
 80045ba:	0019      	movs	r1, r3
 80045bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80045be:	f7fb fda3 	bl	8000108 <__udivsi3>
 80045c2:	0003      	movs	r3, r0
 80045c4:	005a      	lsls	r2, r3, #1
 80045c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	085b      	lsrs	r3, r3, #1
 80045cc:	18d2      	adds	r2, r2, r3
 80045ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	0019      	movs	r1, r3
 80045d4:	0010      	movs	r0, r2
 80045d6:	f7fb fd97 	bl	8000108 <__udivsi3>
 80045da:	0003      	movs	r3, r0
 80045dc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80045de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045e0:	2b0f      	cmp	r3, #15
 80045e2:	d921      	bls.n	8004628 <UART_SetConfig+0x488>
 80045e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045e6:	2380      	movs	r3, #128	; 0x80
 80045e8:	025b      	lsls	r3, r3, #9
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d21c      	bcs.n	8004628 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80045ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	200e      	movs	r0, #14
 80045f4:	2420      	movs	r4, #32
 80045f6:	1903      	adds	r3, r0, r4
 80045f8:	19db      	adds	r3, r3, r7
 80045fa:	210f      	movs	r1, #15
 80045fc:	438a      	bics	r2, r1
 80045fe:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004600:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004602:	085b      	lsrs	r3, r3, #1
 8004604:	b29b      	uxth	r3, r3
 8004606:	2207      	movs	r2, #7
 8004608:	4013      	ands	r3, r2
 800460a:	b299      	uxth	r1, r3
 800460c:	1903      	adds	r3, r0, r4
 800460e:	19db      	adds	r3, r3, r7
 8004610:	1902      	adds	r2, r0, r4
 8004612:	19d2      	adds	r2, r2, r7
 8004614:	8812      	ldrh	r2, [r2, #0]
 8004616:	430a      	orrs	r2, r1
 8004618:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800461a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	1902      	adds	r2, r0, r4
 8004620:	19d2      	adds	r2, r2, r7
 8004622:	8812      	ldrh	r2, [r2, #0]
 8004624:	60da      	str	r2, [r3, #12]
 8004626:	e05e      	b.n	80046e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8004628:	231a      	movs	r3, #26
 800462a:	2220      	movs	r2, #32
 800462c:	189b      	adds	r3, r3, r2
 800462e:	19db      	adds	r3, r3, r7
 8004630:	2201      	movs	r2, #1
 8004632:	701a      	strb	r2, [r3, #0]
 8004634:	e057      	b.n	80046e6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004636:	231b      	movs	r3, #27
 8004638:	2220      	movs	r2, #32
 800463a:	189b      	adds	r3, r3, r2
 800463c:	19db      	adds	r3, r3, r7
 800463e:	781b      	ldrb	r3, [r3, #0]
 8004640:	2b08      	cmp	r3, #8
 8004642:	d015      	beq.n	8004670 <UART_SetConfig+0x4d0>
 8004644:	dc18      	bgt.n	8004678 <UART_SetConfig+0x4d8>
 8004646:	2b04      	cmp	r3, #4
 8004648:	d00d      	beq.n	8004666 <UART_SetConfig+0x4c6>
 800464a:	dc15      	bgt.n	8004678 <UART_SetConfig+0x4d8>
 800464c:	2b00      	cmp	r3, #0
 800464e:	d002      	beq.n	8004656 <UART_SetConfig+0x4b6>
 8004650:	2b02      	cmp	r3, #2
 8004652:	d005      	beq.n	8004660 <UART_SetConfig+0x4c0>
 8004654:	e010      	b.n	8004678 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004656:	f7fe f9bb 	bl	80029d0 <HAL_RCC_GetPCLK1Freq>
 800465a:	0003      	movs	r3, r0
 800465c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800465e:	e014      	b.n	800468a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004660:	4b2d      	ldr	r3, [pc, #180]	; (8004718 <UART_SetConfig+0x578>)
 8004662:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004664:	e011      	b.n	800468a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004666:	f7fe f927 	bl	80028b8 <HAL_RCC_GetSysClockFreq>
 800466a:	0003      	movs	r3, r0
 800466c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800466e:	e00c      	b.n	800468a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004670:	2380      	movs	r3, #128	; 0x80
 8004672:	021b      	lsls	r3, r3, #8
 8004674:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004676:	e008      	b.n	800468a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8004678:	2300      	movs	r3, #0
 800467a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800467c:	231a      	movs	r3, #26
 800467e:	2220      	movs	r2, #32
 8004680:	189b      	adds	r3, r3, r2
 8004682:	19db      	adds	r3, r3, r7
 8004684:	2201      	movs	r2, #1
 8004686:	701a      	strb	r2, [r3, #0]
        break;
 8004688:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800468a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800468c:	2b00      	cmp	r3, #0
 800468e:	d02a      	beq.n	80046e6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004692:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004694:	4b1f      	ldr	r3, [pc, #124]	; (8004714 <UART_SetConfig+0x574>)
 8004696:	0052      	lsls	r2, r2, #1
 8004698:	5ad3      	ldrh	r3, [r2, r3]
 800469a:	0019      	movs	r1, r3
 800469c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800469e:	f7fb fd33 	bl	8000108 <__udivsi3>
 80046a2:	0003      	movs	r3, r0
 80046a4:	001a      	movs	r2, r3
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	685b      	ldr	r3, [r3, #4]
 80046aa:	085b      	lsrs	r3, r3, #1
 80046ac:	18d2      	adds	r2, r2, r3
 80046ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046b0:	685b      	ldr	r3, [r3, #4]
 80046b2:	0019      	movs	r1, r3
 80046b4:	0010      	movs	r0, r2
 80046b6:	f7fb fd27 	bl	8000108 <__udivsi3>
 80046ba:	0003      	movs	r3, r0
 80046bc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80046be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c0:	2b0f      	cmp	r3, #15
 80046c2:	d90a      	bls.n	80046da <UART_SetConfig+0x53a>
 80046c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046c6:	2380      	movs	r3, #128	; 0x80
 80046c8:	025b      	lsls	r3, r3, #9
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d205      	bcs.n	80046da <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80046ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	60da      	str	r2, [r3, #12]
 80046d8:	e005      	b.n	80046e6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80046da:	231a      	movs	r3, #26
 80046dc:	2220      	movs	r2, #32
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	19db      	adds	r3, r3, r7
 80046e2:	2201      	movs	r2, #1
 80046e4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80046e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046e8:	226a      	movs	r2, #106	; 0x6a
 80046ea:	2101      	movs	r1, #1
 80046ec:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	2268      	movs	r2, #104	; 0x68
 80046f2:	2101      	movs	r1, #1
 80046f4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80046f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f8:	2200      	movs	r2, #0
 80046fa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80046fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046fe:	2200      	movs	r2, #0
 8004700:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004702:	231a      	movs	r3, #26
 8004704:	2220      	movs	r2, #32
 8004706:	189b      	adds	r3, r3, r2
 8004708:	19db      	adds	r3, r3, r7
 800470a:	781b      	ldrb	r3, [r3, #0]
}
 800470c:	0018      	movs	r0, r3
 800470e:	46bd      	mov	sp, r7
 8004710:	b010      	add	sp, #64	; 0x40
 8004712:	bdb0      	pop	{r4, r5, r7, pc}
 8004714:	0800773c 	.word	0x0800773c
 8004718:	00f42400 	.word	0x00f42400

0800471c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800471c:	b580      	push	{r7, lr}
 800471e:	b082      	sub	sp, #8
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004728:	2201      	movs	r2, #1
 800472a:	4013      	ands	r3, r2
 800472c:	d00b      	beq.n	8004746 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	685b      	ldr	r3, [r3, #4]
 8004734:	4a4a      	ldr	r2, [pc, #296]	; (8004860 <UART_AdvFeatureConfig+0x144>)
 8004736:	4013      	ands	r3, r2
 8004738:	0019      	movs	r1, r3
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	430a      	orrs	r2, r1
 8004744:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474a:	2202      	movs	r2, #2
 800474c:	4013      	ands	r3, r2
 800474e:	d00b      	beq.n	8004768 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	685b      	ldr	r3, [r3, #4]
 8004756:	4a43      	ldr	r2, [pc, #268]	; (8004864 <UART_AdvFeatureConfig+0x148>)
 8004758:	4013      	ands	r3, r2
 800475a:	0019      	movs	r1, r3
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	430a      	orrs	r2, r1
 8004766:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800476c:	2204      	movs	r2, #4
 800476e:	4013      	ands	r3, r2
 8004770:	d00b      	beq.n	800478a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	685b      	ldr	r3, [r3, #4]
 8004778:	4a3b      	ldr	r2, [pc, #236]	; (8004868 <UART_AdvFeatureConfig+0x14c>)
 800477a:	4013      	ands	r3, r2
 800477c:	0019      	movs	r1, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	430a      	orrs	r2, r1
 8004788:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800478e:	2208      	movs	r2, #8
 8004790:	4013      	ands	r3, r2
 8004792:	d00b      	beq.n	80047ac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	4a34      	ldr	r2, [pc, #208]	; (800486c <UART_AdvFeatureConfig+0x150>)
 800479c:	4013      	ands	r3, r2
 800479e:	0019      	movs	r1, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	430a      	orrs	r2, r1
 80047aa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b0:	2210      	movs	r2, #16
 80047b2:	4013      	ands	r3, r2
 80047b4:	d00b      	beq.n	80047ce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	689b      	ldr	r3, [r3, #8]
 80047bc:	4a2c      	ldr	r2, [pc, #176]	; (8004870 <UART_AdvFeatureConfig+0x154>)
 80047be:	4013      	ands	r3, r2
 80047c0:	0019      	movs	r1, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	430a      	orrs	r2, r1
 80047cc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d2:	2220      	movs	r2, #32
 80047d4:	4013      	ands	r3, r2
 80047d6:	d00b      	beq.n	80047f0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	689b      	ldr	r3, [r3, #8]
 80047de:	4a25      	ldr	r2, [pc, #148]	; (8004874 <UART_AdvFeatureConfig+0x158>)
 80047e0:	4013      	ands	r3, r2
 80047e2:	0019      	movs	r1, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	430a      	orrs	r2, r1
 80047ee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047f4:	2240      	movs	r2, #64	; 0x40
 80047f6:	4013      	ands	r3, r2
 80047f8:	d01d      	beq.n	8004836 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	4a1d      	ldr	r2, [pc, #116]	; (8004878 <UART_AdvFeatureConfig+0x15c>)
 8004802:	4013      	ands	r3, r2
 8004804:	0019      	movs	r1, r3
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004816:	2380      	movs	r3, #128	; 0x80
 8004818:	035b      	lsls	r3, r3, #13
 800481a:	429a      	cmp	r2, r3
 800481c:	d10b      	bne.n	8004836 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	4a15      	ldr	r2, [pc, #84]	; (800487c <UART_AdvFeatureConfig+0x160>)
 8004826:	4013      	ands	r3, r2
 8004828:	0019      	movs	r1, r3
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	430a      	orrs	r2, r1
 8004834:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800483a:	2280      	movs	r2, #128	; 0x80
 800483c:	4013      	ands	r3, r2
 800483e:	d00b      	beq.n	8004858 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	4a0e      	ldr	r2, [pc, #56]	; (8004880 <UART_AdvFeatureConfig+0x164>)
 8004848:	4013      	ands	r3, r2
 800484a:	0019      	movs	r1, r3
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	430a      	orrs	r2, r1
 8004856:	605a      	str	r2, [r3, #4]
  }
}
 8004858:	46c0      	nop			; (mov r8, r8)
 800485a:	46bd      	mov	sp, r7
 800485c:	b002      	add	sp, #8
 800485e:	bd80      	pop	{r7, pc}
 8004860:	fffdffff 	.word	0xfffdffff
 8004864:	fffeffff 	.word	0xfffeffff
 8004868:	fffbffff 	.word	0xfffbffff
 800486c:	ffff7fff 	.word	0xffff7fff
 8004870:	ffffefff 	.word	0xffffefff
 8004874:	ffffdfff 	.word	0xffffdfff
 8004878:	ffefffff 	.word	0xffefffff
 800487c:	ff9fffff 	.word	0xff9fffff
 8004880:	fff7ffff 	.word	0xfff7ffff

08004884 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	b086      	sub	sp, #24
 8004888:	af02      	add	r7, sp, #8
 800488a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2290      	movs	r2, #144	; 0x90
 8004890:	2100      	movs	r1, #0
 8004892:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004894:	f7fc fc4c 	bl	8001130 <HAL_GetTick>
 8004898:	0003      	movs	r3, r0
 800489a:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2208      	movs	r2, #8
 80048a4:	4013      	ands	r3, r2
 80048a6:	2b08      	cmp	r3, #8
 80048a8:	d10c      	bne.n	80048c4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2280      	movs	r2, #128	; 0x80
 80048ae:	0391      	lsls	r1, r2, #14
 80048b0:	6878      	ldr	r0, [r7, #4]
 80048b2:	4a1a      	ldr	r2, [pc, #104]	; (800491c <UART_CheckIdleState+0x98>)
 80048b4:	9200      	str	r2, [sp, #0]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f000 f832 	bl	8004920 <UART_WaitOnFlagUntilTimeout>
 80048bc:	1e03      	subs	r3, r0, #0
 80048be:	d001      	beq.n	80048c4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048c0:	2303      	movs	r3, #3
 80048c2:	e026      	b.n	8004912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	2204      	movs	r2, #4
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d10c      	bne.n	80048ec <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2280      	movs	r2, #128	; 0x80
 80048d6:	03d1      	lsls	r1, r2, #15
 80048d8:	6878      	ldr	r0, [r7, #4]
 80048da:	4a10      	ldr	r2, [pc, #64]	; (800491c <UART_CheckIdleState+0x98>)
 80048dc:	9200      	str	r2, [sp, #0]
 80048de:	2200      	movs	r2, #0
 80048e0:	f000 f81e 	bl	8004920 <UART_WaitOnFlagUntilTimeout>
 80048e4:	1e03      	subs	r3, r0, #0
 80048e6:	d001      	beq.n	80048ec <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80048e8:	2303      	movs	r3, #3
 80048ea:	e012      	b.n	8004912 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2288      	movs	r2, #136	; 0x88
 80048f0:	2120      	movs	r1, #32
 80048f2:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	228c      	movs	r2, #140	; 0x8c
 80048f8:	2120      	movs	r1, #32
 80048fa:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2200      	movs	r2, #0
 8004900:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2284      	movs	r2, #132	; 0x84
 800490c:	2100      	movs	r1, #0
 800490e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	0018      	movs	r0, r3
 8004914:	46bd      	mov	sp, r7
 8004916:	b004      	add	sp, #16
 8004918:	bd80      	pop	{r7, pc}
 800491a:	46c0      	nop			; (mov r8, r8)
 800491c:	01ffffff 	.word	0x01ffffff

08004920 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b094      	sub	sp, #80	; 0x50
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	603b      	str	r3, [r7, #0]
 800492c:	1dfb      	adds	r3, r7, #7
 800492e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004930:	e0a7      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004932:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004934:	3301      	adds	r3, #1
 8004936:	d100      	bne.n	800493a <UART_WaitOnFlagUntilTimeout+0x1a>
 8004938:	e0a3      	b.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800493a:	f7fc fbf9 	bl	8001130 <HAL_GetTick>
 800493e:	0002      	movs	r2, r0
 8004940:	683b      	ldr	r3, [r7, #0]
 8004942:	1ad3      	subs	r3, r2, r3
 8004944:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004946:	429a      	cmp	r2, r3
 8004948:	d302      	bcc.n	8004950 <UART_WaitOnFlagUntilTimeout+0x30>
 800494a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800494c:	2b00      	cmp	r3, #0
 800494e:	d13f      	bne.n	80049d0 <UART_WaitOnFlagUntilTimeout+0xb0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004950:	f3ef 8310 	mrs	r3, PRIMASK
 8004954:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004958:	647b      	str	r3, [r7, #68]	; 0x44
 800495a:	2301      	movs	r3, #1
 800495c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800495e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004960:	f383 8810 	msr	PRIMASK, r3
}
 8004964:	46c0      	nop			; (mov r8, r8)
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681a      	ldr	r2, [r3, #0]
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	494e      	ldr	r1, [pc, #312]	; (8004aac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004972:	400a      	ands	r2, r1
 8004974:	601a      	str	r2, [r3, #0]
 8004976:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004978:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800497a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800497c:	f383 8810 	msr	PRIMASK, r3
}
 8004980:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004982:	f3ef 8310 	mrs	r3, PRIMASK
 8004986:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800498a:	643b      	str	r3, [r7, #64]	; 0x40
 800498c:	2301      	movs	r3, #1
 800498e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004992:	f383 8810 	msr	PRIMASK, r3
}
 8004996:	46c0      	nop			; (mov r8, r8)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	689a      	ldr	r2, [r3, #8]
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	2101      	movs	r1, #1
 80049a4:	438a      	bics	r2, r1
 80049a6:	609a      	str	r2, [r3, #8]
 80049a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80049aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80049ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80049ae:	f383 8810 	msr	PRIMASK, r3
}
 80049b2:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	2288      	movs	r2, #136	; 0x88
 80049b8:	2120      	movs	r1, #32
 80049ba:	5099      	str	r1, [r3, r2]
        huart->RxState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	228c      	movs	r2, #140	; 0x8c
 80049c0:	2120      	movs	r1, #32
 80049c2:	5099      	str	r1, [r3, r2]

        __HAL_UNLOCK(huart);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2284      	movs	r2, #132	; 0x84
 80049c8:	2100      	movs	r1, #0
 80049ca:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80049cc:	2303      	movs	r3, #3
 80049ce:	e069      	b.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	2204      	movs	r2, #4
 80049d8:	4013      	ands	r3, r2
 80049da:	d052      	beq.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	69da      	ldr	r2, [r3, #28]
 80049e2:	2380      	movs	r3, #128	; 0x80
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	401a      	ands	r2, r3
 80049e8:	2380      	movs	r3, #128	; 0x80
 80049ea:	011b      	lsls	r3, r3, #4
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d148      	bne.n	8004a82 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2280      	movs	r2, #128	; 0x80
 80049f6:	0112      	lsls	r2, r2, #4
 80049f8:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80049fa:	f3ef 8310 	mrs	r3, PRIMASK
 80049fe:	613b      	str	r3, [r7, #16]
  return(result);
 8004a00:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a04:	2301      	movs	r3, #1
 8004a06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f383 8810 	msr	PRIMASK, r3
}
 8004a0e:	46c0      	nop			; (mov r8, r8)
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4924      	ldr	r1, [pc, #144]	; (8004aac <UART_WaitOnFlagUntilTimeout+0x18c>)
 8004a1c:	400a      	ands	r2, r1
 8004a1e:	601a      	str	r2, [r3, #0]
 8004a20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a22:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	f383 8810 	msr	PRIMASK, r3
}
 8004a2a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a2c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a30:	61fb      	str	r3, [r7, #28]
  return(result);
 8004a32:	69fb      	ldr	r3, [r7, #28]
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a36:	2301      	movs	r3, #1
 8004a38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a3a:	6a3b      	ldr	r3, [r7, #32]
 8004a3c:	f383 8810 	msr	PRIMASK, r3
}
 8004a40:	46c0      	nop			; (mov r8, r8)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	689a      	ldr	r2, [r3, #8]
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	2101      	movs	r1, #1
 8004a4e:	438a      	bics	r2, r1
 8004a50:	609a      	str	r2, [r3, #8]
 8004a52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a54:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	2288      	movs	r2, #136	; 0x88
 8004a62:	2120      	movs	r1, #32
 8004a64:	5099      	str	r1, [r3, r2]
          huart->RxState = HAL_UART_STATE_READY;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	228c      	movs	r2, #140	; 0x8c
 8004a6a:	2120      	movs	r1, #32
 8004a6c:	5099      	str	r1, [r3, r2]
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2290      	movs	r2, #144	; 0x90
 8004a72:	2120      	movs	r1, #32
 8004a74:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2284      	movs	r2, #132	; 0x84
 8004a7a:	2100      	movs	r1, #0
 8004a7c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004a7e:	2303      	movs	r3, #3
 8004a80:	e010      	b.n	8004aa4 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69db      	ldr	r3, [r3, #28]
 8004a88:	68ba      	ldr	r2, [r7, #8]
 8004a8a:	4013      	ands	r3, r2
 8004a8c:	68ba      	ldr	r2, [r7, #8]
 8004a8e:	1ad3      	subs	r3, r2, r3
 8004a90:	425a      	negs	r2, r3
 8004a92:	4153      	adcs	r3, r2
 8004a94:	b2db      	uxtb	r3, r3
 8004a96:	001a      	movs	r2, r3
 8004a98:	1dfb      	adds	r3, r7, #7
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	429a      	cmp	r2, r3
 8004a9e:	d100      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x182>
 8004aa0:	e747      	b.n	8004932 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004aa2:	2300      	movs	r3, #0
}
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	46bd      	mov	sp, r7
 8004aa8:	b014      	add	sp, #80	; 0x50
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	fffffe5f 	.word	0xfffffe5f

08004ab0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004ab0:	b580      	push	{r7, lr}
 8004ab2:	b08e      	sub	sp, #56	; 0x38
 8004ab4:	af00      	add	r7, sp, #0
 8004ab6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab8:	f3ef 8310 	mrs	r3, PRIMASK
 8004abc:	617b      	str	r3, [r7, #20]
  return(result);
 8004abe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	f383 8810 	msr	PRIMASK, r3
}
 8004acc:	46c0      	nop			; (mov r8, r8)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	681a      	ldr	r2, [r3, #0]
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4926      	ldr	r1, [pc, #152]	; (8004b74 <UART_EndRxTransfer+0xc4>)
 8004ada:	400a      	ands	r2, r1
 8004adc:	601a      	str	r2, [r3, #0]
 8004ade:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ae0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	f383 8810 	msr	PRIMASK, r3
}
 8004ae8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004aea:	f3ef 8310 	mrs	r3, PRIMASK
 8004aee:	623b      	str	r3, [r7, #32]
  return(result);
 8004af0:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004af2:	633b      	str	r3, [r7, #48]	; 0x30
 8004af4:	2301      	movs	r3, #1
 8004af6:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f383 8810 	msr	PRIMASK, r3
}
 8004afe:	46c0      	nop			; (mov r8, r8)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689a      	ldr	r2, [r3, #8]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	491b      	ldr	r1, [pc, #108]	; (8004b78 <UART_EndRxTransfer+0xc8>)
 8004b0c:	400a      	ands	r2, r1
 8004b0e:	609a      	str	r2, [r3, #8]
 8004b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b12:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b16:	f383 8810 	msr	PRIMASK, r3
}
 8004b1a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b20:	2b01      	cmp	r3, #1
 8004b22:	d118      	bne.n	8004b56 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b24:	f3ef 8310 	mrs	r3, PRIMASK
 8004b28:	60bb      	str	r3, [r7, #8]
  return(result);
 8004b2a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b2e:	2301      	movs	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	f383 8810 	msr	PRIMASK, r3
}
 8004b38:	46c0      	nop			; (mov r8, r8)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	681a      	ldr	r2, [r3, #0]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	2110      	movs	r1, #16
 8004b46:	438a      	bics	r2, r1
 8004b48:	601a      	str	r2, [r3, #0]
 8004b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b4c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	f383 8810 	msr	PRIMASK, r3
}
 8004b54:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	228c      	movs	r2, #140	; 0x8c
 8004b5a:	2120      	movs	r1, #32
 8004b5c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	2200      	movs	r2, #0
 8004b62:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	2200      	movs	r2, #0
 8004b68:	675a      	str	r2, [r3, #116]	; 0x74
}
 8004b6a:	46c0      	nop			; (mov r8, r8)
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	b00e      	add	sp, #56	; 0x38
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	46c0      	nop			; (mov r8, r8)
 8004b74:	fffffedf 	.word	0xfffffedf
 8004b78:	effffffe 	.word	0xeffffffe

08004b7c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b88:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	225e      	movs	r2, #94	; 0x5e
 8004b8e:	2100      	movs	r1, #0
 8004b90:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2256      	movs	r2, #86	; 0x56
 8004b96:	2100      	movs	r1, #0
 8004b98:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	0018      	movs	r0, r3
 8004b9e:	f7ff faeb 	bl	8004178 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b004      	add	sp, #16
 8004ba8:	bd80      	pop	{r7, pc}

08004baa <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004baa:	b580      	push	{r7, lr}
 8004bac:	b086      	sub	sp, #24
 8004bae:	af00      	add	r7, sp, #0
 8004bb0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bb2:	f3ef 8310 	mrs	r3, PRIMASK
 8004bb6:	60bb      	str	r3, [r7, #8]
  return(result);
 8004bb8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004bba:	617b      	str	r3, [r7, #20]
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	f383 8810 	msr	PRIMASK, r3
}
 8004bc6:	46c0      	nop			; (mov r8, r8)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	2140      	movs	r1, #64	; 0x40
 8004bd4:	438a      	bics	r2, r1
 8004bd6:	601a      	str	r2, [r3, #0]
 8004bd8:	697b      	ldr	r3, [r7, #20]
 8004bda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bdc:	693b      	ldr	r3, [r7, #16]
 8004bde:	f383 8810 	msr	PRIMASK, r3
}
 8004be2:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2288      	movs	r2, #136	; 0x88
 8004be8:	2120      	movs	r1, #32
 8004bea:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	0018      	movs	r0, r3
 8004bf6:	f7ff fab7 	bl	8004168 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	b006      	add	sp, #24
 8004c00:	bd80      	pop	{r7, pc}

08004c02 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004c02:	b580      	push	{r7, lr}
 8004c04:	b082      	sub	sp, #8
 8004c06:	af00      	add	r7, sp, #0
 8004c08:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b002      	add	sp, #8
 8004c10:	bd80      	pop	{r7, pc}

08004c12 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004c12:	b580      	push	{r7, lr}
 8004c14:	b082      	sub	sp, #8
 8004c16:	af00      	add	r7, sp, #0
 8004c18:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004c1a:	46c0      	nop			; (mov r8, r8)
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	b002      	add	sp, #8
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b082      	sub	sp, #8
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004c2a:	46c0      	nop			; (mov r8, r8)
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b002      	add	sp, #8
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2284      	movs	r2, #132	; 0x84
 8004c40:	5c9b      	ldrb	r3, [r3, r2]
 8004c42:	2b01      	cmp	r3, #1
 8004c44:	d101      	bne.n	8004c4a <HAL_UARTEx_DisableFifoMode+0x16>
 8004c46:	2302      	movs	r3, #2
 8004c48:	e027      	b.n	8004c9a <HAL_UARTEx_DisableFifoMode+0x66>
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2284      	movs	r2, #132	; 0x84
 8004c4e:	2101      	movs	r1, #1
 8004c50:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	2288      	movs	r2, #136	; 0x88
 8004c56:	2124      	movs	r1, #36	; 0x24
 8004c58:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	681a      	ldr	r2, [r3, #0]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	2101      	movs	r1, #1
 8004c6e:	438a      	bics	r2, r1
 8004c70:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	4a0b      	ldr	r2, [pc, #44]	; (8004ca4 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004c76:	4013      	ands	r3, r2
 8004c78:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	68fa      	ldr	r2, [r7, #12]
 8004c86:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2288      	movs	r2, #136	; 0x88
 8004c8c:	2120      	movs	r1, #32
 8004c8e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2284      	movs	r2, #132	; 0x84
 8004c94:	2100      	movs	r1, #0
 8004c96:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004c98:	2300      	movs	r3, #0
}
 8004c9a:	0018      	movs	r0, r3
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	b004      	add	sp, #16
 8004ca0:	bd80      	pop	{r7, pc}
 8004ca2:	46c0      	nop			; (mov r8, r8)
 8004ca4:	dfffffff 	.word	0xdfffffff

08004ca8 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b084      	sub	sp, #16
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2284      	movs	r2, #132	; 0x84
 8004cb6:	5c9b      	ldrb	r3, [r3, r2]
 8004cb8:	2b01      	cmp	r3, #1
 8004cba:	d101      	bne.n	8004cc0 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8004cbc:	2302      	movs	r3, #2
 8004cbe:	e02e      	b.n	8004d1e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2284      	movs	r2, #132	; 0x84
 8004cc4:	2101      	movs	r1, #1
 8004cc6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2288      	movs	r2, #136	; 0x88
 8004ccc:	2124      	movs	r1, #36	; 0x24
 8004cce:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2101      	movs	r1, #1
 8004ce4:	438a      	bics	r2, r1
 8004ce6:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	00db      	lsls	r3, r3, #3
 8004cf0:	08d9      	lsrs	r1, r3, #3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	683a      	ldr	r2, [r7, #0]
 8004cf8:	430a      	orrs	r2, r1
 8004cfa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	0018      	movs	r0, r3
 8004d00:	f000 f854 	bl	8004dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	2288      	movs	r2, #136	; 0x88
 8004d10:	2120      	movs	r1, #32
 8004d12:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2284      	movs	r2, #132	; 0x84
 8004d18:	2100      	movs	r1, #0
 8004d1a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	0018      	movs	r0, r3
 8004d20:	46bd      	mov	sp, r7
 8004d22:	b004      	add	sp, #16
 8004d24:	bd80      	pop	{r7, pc}
	...

08004d28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b084      	sub	sp, #16
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
 8004d30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2284      	movs	r2, #132	; 0x84
 8004d36:	5c9b      	ldrb	r3, [r3, r2]
 8004d38:	2b01      	cmp	r3, #1
 8004d3a:	d101      	bne.n	8004d40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004d3c:	2302      	movs	r3, #2
 8004d3e:	e02f      	b.n	8004da0 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	2284      	movs	r2, #132	; 0x84
 8004d44:	2101      	movs	r1, #1
 8004d46:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2288      	movs	r2, #136	; 0x88
 8004d4c:	2124      	movs	r1, #36	; 0x24
 8004d4e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	2101      	movs	r1, #1
 8004d64:	438a      	bics	r2, r1
 8004d66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	4a0e      	ldr	r2, [pc, #56]	; (8004da8 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004d70:	4013      	ands	r3, r2
 8004d72:	0019      	movs	r1, r3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	683a      	ldr	r2, [r7, #0]
 8004d7a:	430a      	orrs	r2, r1
 8004d7c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	0018      	movs	r0, r3
 8004d82:	f000 f813 	bl	8004dac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2288      	movs	r2, #136	; 0x88
 8004d92:	2120      	movs	r1, #32
 8004d94:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2284      	movs	r2, #132	; 0x84
 8004d9a:	2100      	movs	r1, #0
 8004d9c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004d9e:	2300      	movs	r3, #0
}
 8004da0:	0018      	movs	r0, r3
 8004da2:	46bd      	mov	sp, r7
 8004da4:	b004      	add	sp, #16
 8004da6:	bd80      	pop	{r7, pc}
 8004da8:	f1ffffff 	.word	0xf1ffffff

08004dac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004dac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004dae:	b085      	sub	sp, #20
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d108      	bne.n	8004dce <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	226a      	movs	r2, #106	; 0x6a
 8004dc0:	2101      	movs	r1, #1
 8004dc2:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2268      	movs	r2, #104	; 0x68
 8004dc8:	2101      	movs	r1, #1
 8004dca:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004dcc:	e043      	b.n	8004e56 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004dce:	260f      	movs	r6, #15
 8004dd0:	19bb      	adds	r3, r7, r6
 8004dd2:	2208      	movs	r2, #8
 8004dd4:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004dd6:	200e      	movs	r0, #14
 8004dd8:	183b      	adds	r3, r7, r0
 8004dda:	2208      	movs	r2, #8
 8004ddc:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	689b      	ldr	r3, [r3, #8]
 8004de4:	0e5b      	lsrs	r3, r3, #25
 8004de6:	b2da      	uxtb	r2, r3
 8004de8:	240d      	movs	r4, #13
 8004dea:	193b      	adds	r3, r7, r4
 8004dec:	2107      	movs	r1, #7
 8004dee:	400a      	ands	r2, r1
 8004df0:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	689b      	ldr	r3, [r3, #8]
 8004df8:	0f5b      	lsrs	r3, r3, #29
 8004dfa:	b2da      	uxtb	r2, r3
 8004dfc:	250c      	movs	r5, #12
 8004dfe:	197b      	adds	r3, r7, r5
 8004e00:	2107      	movs	r1, #7
 8004e02:	400a      	ands	r2, r1
 8004e04:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e06:	183b      	adds	r3, r7, r0
 8004e08:	781b      	ldrb	r3, [r3, #0]
 8004e0a:	197a      	adds	r2, r7, r5
 8004e0c:	7812      	ldrb	r2, [r2, #0]
 8004e0e:	4914      	ldr	r1, [pc, #80]	; (8004e60 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e10:	5c8a      	ldrb	r2, [r1, r2]
 8004e12:	435a      	muls	r2, r3
 8004e14:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004e16:	197b      	adds	r3, r7, r5
 8004e18:	781b      	ldrb	r3, [r3, #0]
 8004e1a:	4a12      	ldr	r2, [pc, #72]	; (8004e64 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e1c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004e1e:	0019      	movs	r1, r3
 8004e20:	f7fb f9fc 	bl	800021c <__divsi3>
 8004e24:	0003      	movs	r3, r0
 8004e26:	b299      	uxth	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	226a      	movs	r2, #106	; 0x6a
 8004e2c:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e2e:	19bb      	adds	r3, r7, r6
 8004e30:	781b      	ldrb	r3, [r3, #0]
 8004e32:	193a      	adds	r2, r7, r4
 8004e34:	7812      	ldrb	r2, [r2, #0]
 8004e36:	490a      	ldr	r1, [pc, #40]	; (8004e60 <UARTEx_SetNbDataToProcess+0xb4>)
 8004e38:	5c8a      	ldrb	r2, [r1, r2]
 8004e3a:	435a      	muls	r2, r3
 8004e3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004e3e:	193b      	adds	r3, r7, r4
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	4a08      	ldr	r2, [pc, #32]	; (8004e64 <UARTEx_SetNbDataToProcess+0xb8>)
 8004e44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004e46:	0019      	movs	r1, r3
 8004e48:	f7fb f9e8 	bl	800021c <__divsi3>
 8004e4c:	0003      	movs	r3, r0
 8004e4e:	b299      	uxth	r1, r3
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2268      	movs	r2, #104	; 0x68
 8004e54:	5299      	strh	r1, [r3, r2]
}
 8004e56:	46c0      	nop			; (mov r8, r8)
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	b005      	add	sp, #20
 8004e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004e5e:	46c0      	nop			; (mov r8, r8)
 8004e60:	08007754 	.word	0x08007754
 8004e64:	0800775c 	.word	0x0800775c

08004e68 <__NVIC_SetPriority>:
{
 8004e68:	b590      	push	{r4, r7, lr}
 8004e6a:	b083      	sub	sp, #12
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	0002      	movs	r2, r0
 8004e70:	6039      	str	r1, [r7, #0]
 8004e72:	1dfb      	adds	r3, r7, #7
 8004e74:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004e76:	1dfb      	adds	r3, r7, #7
 8004e78:	781b      	ldrb	r3, [r3, #0]
 8004e7a:	2b7f      	cmp	r3, #127	; 0x7f
 8004e7c:	d828      	bhi.n	8004ed0 <__NVIC_SetPriority+0x68>
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004e7e:	4a2f      	ldr	r2, [pc, #188]	; (8004f3c <__NVIC_SetPriority+0xd4>)
 8004e80:	1dfb      	adds	r3, r7, #7
 8004e82:	781b      	ldrb	r3, [r3, #0]
 8004e84:	b25b      	sxtb	r3, r3
 8004e86:	089b      	lsrs	r3, r3, #2
 8004e88:	33c0      	adds	r3, #192	; 0xc0
 8004e8a:	009b      	lsls	r3, r3, #2
 8004e8c:	589b      	ldr	r3, [r3, r2]
 8004e8e:	1dfa      	adds	r2, r7, #7
 8004e90:	7812      	ldrb	r2, [r2, #0]
 8004e92:	0011      	movs	r1, r2
 8004e94:	2203      	movs	r2, #3
 8004e96:	400a      	ands	r2, r1
 8004e98:	00d2      	lsls	r2, r2, #3
 8004e9a:	21ff      	movs	r1, #255	; 0xff
 8004e9c:	4091      	lsls	r1, r2
 8004e9e:	000a      	movs	r2, r1
 8004ea0:	43d2      	mvns	r2, r2
 8004ea2:	401a      	ands	r2, r3
 8004ea4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	019b      	lsls	r3, r3, #6
 8004eaa:	22ff      	movs	r2, #255	; 0xff
 8004eac:	401a      	ands	r2, r3
 8004eae:	1dfb      	adds	r3, r7, #7
 8004eb0:	781b      	ldrb	r3, [r3, #0]
 8004eb2:	0018      	movs	r0, r3
 8004eb4:	2303      	movs	r3, #3
 8004eb6:	4003      	ands	r3, r0
 8004eb8:	00db      	lsls	r3, r3, #3
 8004eba:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ebc:	481f      	ldr	r0, [pc, #124]	; (8004f3c <__NVIC_SetPriority+0xd4>)
 8004ebe:	1dfb      	adds	r3, r7, #7
 8004ec0:	781b      	ldrb	r3, [r3, #0]
 8004ec2:	b25b      	sxtb	r3, r3
 8004ec4:	089b      	lsrs	r3, r3, #2
 8004ec6:	430a      	orrs	r2, r1
 8004ec8:	33c0      	adds	r3, #192	; 0xc0
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	501a      	str	r2, [r3, r0]
}
 8004ece:	e031      	b.n	8004f34 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004ed0:	4a1b      	ldr	r2, [pc, #108]	; (8004f40 <__NVIC_SetPriority+0xd8>)
 8004ed2:	1dfb      	adds	r3, r7, #7
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	230f      	movs	r3, #15
 8004eda:	400b      	ands	r3, r1
 8004edc:	3b08      	subs	r3, #8
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	3306      	adds	r3, #6
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	18d3      	adds	r3, r2, r3
 8004ee6:	3304      	adds	r3, #4
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	1dfa      	adds	r2, r7, #7
 8004eec:	7812      	ldrb	r2, [r2, #0]
 8004eee:	0011      	movs	r1, r2
 8004ef0:	2203      	movs	r2, #3
 8004ef2:	400a      	ands	r2, r1
 8004ef4:	00d2      	lsls	r2, r2, #3
 8004ef6:	21ff      	movs	r1, #255	; 0xff
 8004ef8:	4091      	lsls	r1, r2
 8004efa:	000a      	movs	r2, r1
 8004efc:	43d2      	mvns	r2, r2
 8004efe:	401a      	ands	r2, r3
 8004f00:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	019b      	lsls	r3, r3, #6
 8004f06:	22ff      	movs	r2, #255	; 0xff
 8004f08:	401a      	ands	r2, r3
 8004f0a:	1dfb      	adds	r3, r7, #7
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	0018      	movs	r0, r3
 8004f10:	2303      	movs	r3, #3
 8004f12:	4003      	ands	r3, r0
 8004f14:	00db      	lsls	r3, r3, #3
 8004f16:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004f18:	4809      	ldr	r0, [pc, #36]	; (8004f40 <__NVIC_SetPriority+0xd8>)
 8004f1a:	1dfb      	adds	r3, r7, #7
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	001c      	movs	r4, r3
 8004f20:	230f      	movs	r3, #15
 8004f22:	4023      	ands	r3, r4
 8004f24:	3b08      	subs	r3, #8
 8004f26:	089b      	lsrs	r3, r3, #2
 8004f28:	430a      	orrs	r2, r1
 8004f2a:	3306      	adds	r3, #6
 8004f2c:	009b      	lsls	r3, r3, #2
 8004f2e:	18c3      	adds	r3, r0, r3
 8004f30:	3304      	adds	r3, #4
 8004f32:	601a      	str	r2, [r3, #0]
}
 8004f34:	46c0      	nop			; (mov r8, r8)
 8004f36:	46bd      	mov	sp, r7
 8004f38:	b003      	add	sp, #12
 8004f3a:	bd90      	pop	{r4, r7, pc}
 8004f3c:	e000e100 	.word	0xe000e100
 8004f40:	e000ed00 	.word	0xe000ed00

08004f44 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004f44:	b580      	push	{r7, lr}
 8004f46:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004f48:	4b05      	ldr	r3, [pc, #20]	; (8004f60 <SysTick_Handler+0x1c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004f4c:	f001 fbbe 	bl	80066cc <xTaskGetSchedulerState>
 8004f50:	0003      	movs	r3, r0
 8004f52:	2b01      	cmp	r3, #1
 8004f54:	d001      	beq.n	8004f5a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004f56:	f002 f88f 	bl	8007078 <xPortSysTickHandler>
  }
}
 8004f5a:	46c0      	nop			; (mov r8, r8)
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bd80      	pop	{r7, pc}
 8004f60:	e000e010 	.word	0xe000e010

08004f64 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004f64:	b580      	push	{r7, lr}
 8004f66:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004f68:	2305      	movs	r3, #5
 8004f6a:	425b      	negs	r3, r3
 8004f6c:	2100      	movs	r1, #0
 8004f6e:	0018      	movs	r0, r3
 8004f70:	f7ff ff7a 	bl	8004e68 <__NVIC_SetPriority>
#endif
}
 8004f74:	46c0      	nop			; (mov r8, r8)
 8004f76:	46bd      	mov	sp, r7
 8004f78:	bd80      	pop	{r7, pc}
	...

08004f7c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b082      	sub	sp, #8
 8004f80:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f82:	f3ef 8305 	mrs	r3, IPSR
 8004f86:	603b      	str	r3, [r7, #0]
  return(result);
 8004f88:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d003      	beq.n	8004f96 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004f8e:	2306      	movs	r3, #6
 8004f90:	425b      	negs	r3, r3
 8004f92:	607b      	str	r3, [r7, #4]
 8004f94:	e00c      	b.n	8004fb0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004f96:	4b09      	ldr	r3, [pc, #36]	; (8004fbc <osKernelInitialize+0x40>)
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d105      	bne.n	8004faa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004f9e:	4b07      	ldr	r3, [pc, #28]	; (8004fbc <osKernelInitialize+0x40>)
 8004fa0:	2201      	movs	r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	607b      	str	r3, [r7, #4]
 8004fa8:	e002      	b.n	8004fb0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004faa:	2301      	movs	r3, #1
 8004fac:	425b      	negs	r3, r3
 8004fae:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004fb0:	687b      	ldr	r3, [r7, #4]
}
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	46bd      	mov	sp, r7
 8004fb6:	b002      	add	sp, #8
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	20000240 	.word	0x20000240

08004fc0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004fc6:	f3ef 8305 	mrs	r3, IPSR
 8004fca:	603b      	str	r3, [r7, #0]
  return(result);
 8004fcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d003      	beq.n	8004fda <osKernelStart+0x1a>
    stat = osErrorISR;
 8004fd2:	2306      	movs	r3, #6
 8004fd4:	425b      	negs	r3, r3
 8004fd6:	607b      	str	r3, [r7, #4]
 8004fd8:	e010      	b.n	8004ffc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004fda:	4b0b      	ldr	r3, [pc, #44]	; (8005008 <osKernelStart+0x48>)
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d109      	bne.n	8004ff6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004fe2:	f7ff ffbf 	bl	8004f64 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004fe6:	4b08      	ldr	r3, [pc, #32]	; (8005008 <osKernelStart+0x48>)
 8004fe8:	2202      	movs	r2, #2
 8004fea:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004fec:	f000 ff84 	bl	8005ef8 <vTaskStartScheduler>
      stat = osOK;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	607b      	str	r3, [r7, #4]
 8004ff4:	e002      	b.n	8004ffc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	425b      	negs	r3, r3
 8004ffa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ffc:	687b      	ldr	r3, [r7, #4]
}
 8004ffe:	0018      	movs	r0, r3
 8005000:	46bd      	mov	sp, r7
 8005002:	b002      	add	sp, #8
 8005004:	bd80      	pop	{r7, pc}
 8005006:	46c0      	nop			; (mov r8, r8)
 8005008:	20000240 	.word	0x20000240

0800500c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800500c:	b5b0      	push	{r4, r5, r7, lr}
 800500e:	b08e      	sub	sp, #56	; 0x38
 8005010:	af04      	add	r7, sp, #16
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005018:	2300      	movs	r3, #0
 800501a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800501c:	f3ef 8305 	mrs	r3, IPSR
 8005020:	617b      	str	r3, [r7, #20]
  return(result);
 8005022:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005024:	2b00      	cmp	r3, #0
 8005026:	d000      	beq.n	800502a <osThreadNew+0x1e>
 8005028:	e081      	b.n	800512e <osThreadNew+0x122>
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	2b00      	cmp	r3, #0
 800502e:	d100      	bne.n	8005032 <osThreadNew+0x26>
 8005030:	e07d      	b.n	800512e <osThreadNew+0x122>
    stack = configMINIMAL_STACK_SIZE;
 8005032:	2380      	movs	r3, #128	; 0x80
 8005034:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005036:	2318      	movs	r3, #24
 8005038:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800503a:	2300      	movs	r3, #0
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800503e:	2301      	movs	r3, #1
 8005040:	425b      	negs	r3, r3
 8005042:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2b00      	cmp	r3, #0
 8005048:	d044      	beq.n	80050d4 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <osThreadNew+0x4c>
        name = attr->name;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	699b      	ldr	r3, [r3, #24]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d002      	beq.n	8005066 <osThreadNew+0x5a>
        prio = (UBaseType_t)attr->priority;
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	699b      	ldr	r3, [r3, #24]
 8005064:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d007      	beq.n	800507c <osThreadNew+0x70>
 800506c:	69fb      	ldr	r3, [r7, #28]
 800506e:	2b38      	cmp	r3, #56	; 0x38
 8005070:	d804      	bhi.n	800507c <osThreadNew+0x70>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	2201      	movs	r2, #1
 8005078:	4013      	ands	r3, r2
 800507a:	d001      	beq.n	8005080 <osThreadNew+0x74>
        return (NULL);
 800507c:	2300      	movs	r3, #0
 800507e:	e057      	b.n	8005130 <osThreadNew+0x124>
      }

      if (attr->stack_size > 0U) {
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	695b      	ldr	r3, [r3, #20]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d003      	beq.n	8005090 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	695b      	ldr	r3, [r3, #20]
 800508c:	089b      	lsrs	r3, r3, #2
 800508e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	689b      	ldr	r3, [r3, #8]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d00e      	beq.n	80050b6 <osThreadNew+0xaa>
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	68db      	ldr	r3, [r3, #12]
 800509c:	2ba7      	cmp	r3, #167	; 0xa7
 800509e:	d90a      	bls.n	80050b6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d006      	beq.n	80050b6 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	695b      	ldr	r3, [r3, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d002      	beq.n	80050b6 <osThreadNew+0xaa>
        mem = 1;
 80050b0:	2301      	movs	r3, #1
 80050b2:	61bb      	str	r3, [r7, #24]
 80050b4:	e010      	b.n	80050d8 <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	689b      	ldr	r3, [r3, #8]
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d10c      	bne.n	80050d8 <osThreadNew+0xcc>
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d108      	bne.n	80050d8 <osThreadNew+0xcc>
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	691b      	ldr	r3, [r3, #16]
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d104      	bne.n	80050d8 <osThreadNew+0xcc>
          mem = 0;
 80050ce:	2300      	movs	r3, #0
 80050d0:	61bb      	str	r3, [r7, #24]
 80050d2:	e001      	b.n	80050d8 <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80050d8:	69bb      	ldr	r3, [r7, #24]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d112      	bne.n	8005104 <osThreadNew+0xf8>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	691a      	ldr	r2, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	689b      	ldr	r3, [r3, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80050e6:	68bd      	ldr	r5, [r7, #8]
 80050e8:	6a3c      	ldr	r4, [r7, #32]
 80050ea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80050ec:	68f8      	ldr	r0, [r7, #12]
 80050ee:	9302      	str	r3, [sp, #8]
 80050f0:	9201      	str	r2, [sp, #4]
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	9300      	str	r3, [sp, #0]
 80050f6:	002b      	movs	r3, r5
 80050f8:	0022      	movs	r2, r4
 80050fa:	f000 fd3e 	bl	8005b7a <xTaskCreateStatic>
 80050fe:	0003      	movs	r3, r0
 8005100:	613b      	str	r3, [r7, #16]
 8005102:	e014      	b.n	800512e <osThreadNew+0x122>
      #endif
    }
    else {
      if (mem == 0) {
 8005104:	69bb      	ldr	r3, [r7, #24]
 8005106:	2b00      	cmp	r3, #0
 8005108:	d111      	bne.n	800512e <osThreadNew+0x122>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800510a:	6a3b      	ldr	r3, [r7, #32]
 800510c:	b29a      	uxth	r2, r3
 800510e:	68bc      	ldr	r4, [r7, #8]
 8005110:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005112:	68f8      	ldr	r0, [r7, #12]
 8005114:	2310      	movs	r3, #16
 8005116:	18fb      	adds	r3, r7, r3
 8005118:	9301      	str	r3, [sp, #4]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	9300      	str	r3, [sp, #0]
 800511e:	0023      	movs	r3, r4
 8005120:	f000 fd6f 	bl	8005c02 <xTaskCreate>
 8005124:	0003      	movs	r3, r0
 8005126:	2b01      	cmp	r3, #1
 8005128:	d001      	beq.n	800512e <osThreadNew+0x122>
            hTask = NULL;
 800512a:	2300      	movs	r3, #0
 800512c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800512e:	693b      	ldr	r3, [r7, #16]
}
 8005130:	0018      	movs	r0, r3
 8005132:	46bd      	mov	sp, r7
 8005134:	b00a      	add	sp, #40	; 0x28
 8005136:	bdb0      	pop	{r4, r5, r7, pc}

08005138 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005138:	b580      	push	{r7, lr}
 800513a:	b084      	sub	sp, #16
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005140:	f3ef 8305 	mrs	r3, IPSR
 8005144:	60bb      	str	r3, [r7, #8]
  return(result);
 8005146:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005148:	2b00      	cmp	r3, #0
 800514a:	d003      	beq.n	8005154 <osDelay+0x1c>
    stat = osErrorISR;
 800514c:	2306      	movs	r3, #6
 800514e:	425b      	negs	r3, r3
 8005150:	60fb      	str	r3, [r7, #12]
 8005152:	e008      	b.n	8005166 <osDelay+0x2e>
  }
  else {
    stat = osOK;
 8005154:	2300      	movs	r3, #0
 8005156:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <osDelay+0x2e>
      vTaskDelay(ticks);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	0018      	movs	r0, r3
 8005162:	f000 fea3 	bl	8005eac <vTaskDelay>
    }
  }

  return (stat);
 8005166:	68fb      	ldr	r3, [r7, #12]
}
 8005168:	0018      	movs	r0, r3
 800516a:	46bd      	mov	sp, r7
 800516c:	b004      	add	sp, #16
 800516e:	bd80      	pop	{r7, pc}

08005170 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	4a06      	ldr	r2, [pc, #24]	; (8005198 <vApplicationGetIdleTaskMemory+0x28>)
 8005180:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005182:	68bb      	ldr	r3, [r7, #8]
 8005184:	4a05      	ldr	r2, [pc, #20]	; (800519c <vApplicationGetIdleTaskMemory+0x2c>)
 8005186:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2280      	movs	r2, #128	; 0x80
 800518c:	601a      	str	r2, [r3, #0]
}
 800518e:	46c0      	nop			; (mov r8, r8)
 8005190:	46bd      	mov	sp, r7
 8005192:	b004      	add	sp, #16
 8005194:	bd80      	pop	{r7, pc}
 8005196:	46c0      	nop			; (mov r8, r8)
 8005198:	20000244 	.word	0x20000244
 800519c:	200002ec 	.word	0x200002ec

080051a0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b084      	sub	sp, #16
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	60f8      	str	r0, [r7, #12]
 80051a8:	60b9      	str	r1, [r7, #8]
 80051aa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	4a06      	ldr	r2, [pc, #24]	; (80051c8 <vApplicationGetTimerTaskMemory+0x28>)
 80051b0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80051b2:	68bb      	ldr	r3, [r7, #8]
 80051b4:	4a05      	ldr	r2, [pc, #20]	; (80051cc <vApplicationGetTimerTaskMemory+0x2c>)
 80051b6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	2280      	movs	r2, #128	; 0x80
 80051bc:	0052      	lsls	r2, r2, #1
 80051be:	601a      	str	r2, [r3, #0]
}
 80051c0:	46c0      	nop			; (mov r8, r8)
 80051c2:	46bd      	mov	sp, r7
 80051c4:	b004      	add	sp, #16
 80051c6:	bd80      	pop	{r7, pc}
 80051c8:	200004ec 	.word	0x200004ec
 80051cc:	20000594 	.word	0x20000594

080051d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	3308      	adds	r3, #8
 80051dc:	001a      	movs	r2, r3
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2201      	movs	r2, #1
 80051e6:	4252      	negs	r2, r2
 80051e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	3308      	adds	r3, #8
 80051ee:	001a      	movs	r2, r3
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	3308      	adds	r3, #8
 80051f8:	001a      	movs	r2, r3
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	2200      	movs	r2, #0
 8005202:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005204:	46c0      	nop			; (mov r8, r8)
 8005206:	46bd      	mov	sp, r7
 8005208:	b002      	add	sp, #8
 800520a:	bd80      	pop	{r7, pc}

0800520c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b082      	sub	sp, #8
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800521a:	46c0      	nop			; (mov r8, r8)
 800521c:	46bd      	mov	sp, r7
 800521e:	b002      	add	sp, #8
 8005220:	bd80      	pop	{r7, pc}

08005222 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005222:	b580      	push	{r7, lr}
 8005224:	b084      	sub	sp, #16
 8005226:	af00      	add	r7, sp, #0
 8005228:	6078      	str	r0, [r7, #4]
 800522a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	685b      	ldr	r3, [r3, #4]
 8005230:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	68fa      	ldr	r2, [r7, #12]
 8005236:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	689a      	ldr	r2, [r3, #8]
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005240:	68fb      	ldr	r3, [r7, #12]
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	683a      	ldr	r2, [r7, #0]
 8005246:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	683a      	ldr	r2, [r7, #0]
 800524c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800524e:	683b      	ldr	r3, [r7, #0]
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	1c5a      	adds	r2, r3, #1
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	601a      	str	r2, [r3, #0]
}
 800525e:	46c0      	nop			; (mov r8, r8)
 8005260:	46bd      	mov	sp, r7
 8005262:	b004      	add	sp, #16
 8005264:	bd80      	pop	{r7, pc}

08005266 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005266:	b580      	push	{r7, lr}
 8005268:	b084      	sub	sp, #16
 800526a:	af00      	add	r7, sp, #0
 800526c:	6078      	str	r0, [r7, #4]
 800526e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	3301      	adds	r3, #1
 800527a:	d103      	bne.n	8005284 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	60fb      	str	r3, [r7, #12]
 8005282:	e00c      	b.n	800529e <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3308      	adds	r3, #8
 8005288:	60fb      	str	r3, [r7, #12]
 800528a:	e002      	b.n	8005292 <vListInsert+0x2c>
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	60fb      	str	r3, [r7, #12]
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	68ba      	ldr	r2, [r7, #8]
 800529a:	429a      	cmp	r2, r3
 800529c:	d2f6      	bcs.n	800528c <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	685a      	ldr	r2, [r3, #4]
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	683a      	ldr	r2, [r7, #0]
 80052ac:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	683a      	ldr	r2, [r7, #0]
 80052b8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	687a      	ldr	r2, [r7, #4]
 80052be:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	1c5a      	adds	r2, r3, #1
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	601a      	str	r2, [r3, #0]
}
 80052ca:	46c0      	nop			; (mov r8, r8)
 80052cc:	46bd      	mov	sp, r7
 80052ce:	b004      	add	sp, #16
 80052d0:	bd80      	pop	{r7, pc}

080052d2 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80052d2:	b580      	push	{r7, lr}
 80052d4:	b084      	sub	sp, #16
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	691b      	ldr	r3, [r3, #16]
 80052de:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	6892      	ldr	r2, [r2, #8]
 80052e8:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	687a      	ldr	r2, [r7, #4]
 80052f0:	6852      	ldr	r2, [r2, #4]
 80052f2:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	685b      	ldr	r3, [r3, #4]
 80052f8:	687a      	ldr	r2, [r7, #4]
 80052fa:	429a      	cmp	r2, r3
 80052fc:	d103      	bne.n	8005306 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	689a      	ldr	r2, [r3, #8]
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2200      	movs	r2, #0
 800530a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	1e5a      	subs	r2, r3, #1
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
}
 800531a:	0018      	movs	r0, r3
 800531c:	46bd      	mov	sp, r7
 800531e:	b004      	add	sp, #16
 8005320:	bd80      	pop	{r7, pc}

08005322 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005322:	b580      	push	{r7, lr}
 8005324:	b084      	sub	sp, #16
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d101      	bne.n	800533a <xQueueGenericReset+0x18>
 8005336:	b672      	cpsid	i
 8005338:	e7fe      	b.n	8005338 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 800533a:	f001 fe41 	bl	8006fc0 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800533e:	68fb      	ldr	r3, [r7, #12]
 8005340:	681a      	ldr	r2, [r3, #0]
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800534a:	434b      	muls	r3, r1
 800534c:	18d2      	adds	r2, r2, r3
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	2200      	movs	r2, #0
 8005356:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	681a      	ldr	r2, [r3, #0]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681a      	ldr	r2, [r3, #0]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005368:	1e59      	subs	r1, r3, #1
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800536e:	434b      	muls	r3, r1
 8005370:	18d2      	adds	r2, r2, r3
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2244      	movs	r2, #68	; 0x44
 800537a:	21ff      	movs	r1, #255	; 0xff
 800537c:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2245      	movs	r2, #69	; 0x45
 8005382:	21ff      	movs	r1, #255	; 0xff
 8005384:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d10d      	bne.n	80053a8 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	691b      	ldr	r3, [r3, #16]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d013      	beq.n	80053bc <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	3310      	adds	r3, #16
 8005398:	0018      	movs	r0, r3
 800539a:	f000 ffff 	bl	800639c <xTaskRemoveFromEventList>
 800539e:	1e03      	subs	r3, r0, #0
 80053a0:	d00c      	beq.n	80053bc <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80053a2:	f001 fdfd 	bl	8006fa0 <vPortYield>
 80053a6:	e009      	b.n	80053bc <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	3310      	adds	r3, #16
 80053ac:	0018      	movs	r0, r3
 80053ae:	f7ff ff0f 	bl	80051d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	3324      	adds	r3, #36	; 0x24
 80053b6:	0018      	movs	r0, r3
 80053b8:	f7ff ff0a 	bl	80051d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80053bc:	f001 fe12 	bl	8006fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80053c0:	2301      	movs	r3, #1
}
 80053c2:	0018      	movs	r0, r3
 80053c4:	46bd      	mov	sp, r7
 80053c6:	b004      	add	sp, #16
 80053c8:	bd80      	pop	{r7, pc}

080053ca <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80053ca:	b590      	push	{r4, r7, lr}
 80053cc:	b089      	sub	sp, #36	; 0x24
 80053ce:	af02      	add	r7, sp, #8
 80053d0:	60f8      	str	r0, [r7, #12]
 80053d2:	60b9      	str	r1, [r7, #8]
 80053d4:	607a      	str	r2, [r7, #4]
 80053d6:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d101      	bne.n	80053e2 <xQueueGenericCreateStatic+0x18>
 80053de:	b672      	cpsid	i
 80053e0:	e7fe      	b.n	80053e0 <xQueueGenericCreateStatic+0x16>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d101      	bne.n	80053ec <xQueueGenericCreateStatic+0x22>
 80053e8:	b672      	cpsid	i
 80053ea:	e7fe      	b.n	80053ea <xQueueGenericCreateStatic+0x20>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d002      	beq.n	80053f8 <xQueueGenericCreateStatic+0x2e>
 80053f2:	68bb      	ldr	r3, [r7, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d001      	beq.n	80053fc <xQueueGenericCreateStatic+0x32>
 80053f8:	2301      	movs	r3, #1
 80053fa:	e000      	b.n	80053fe <xQueueGenericCreateStatic+0x34>
 80053fc:	2300      	movs	r3, #0
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d101      	bne.n	8005406 <xQueueGenericCreateStatic+0x3c>
 8005402:	b672      	cpsid	i
 8005404:	e7fe      	b.n	8005404 <xQueueGenericCreateStatic+0x3a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2b00      	cmp	r3, #0
 800540a:	d102      	bne.n	8005412 <xQueueGenericCreateStatic+0x48>
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d101      	bne.n	8005416 <xQueueGenericCreateStatic+0x4c>
 8005412:	2301      	movs	r3, #1
 8005414:	e000      	b.n	8005418 <xQueueGenericCreateStatic+0x4e>
 8005416:	2300      	movs	r3, #0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <xQueueGenericCreateStatic+0x56>
 800541c:	b672      	cpsid	i
 800541e:	e7fe      	b.n	800541e <xQueueGenericCreateStatic+0x54>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005420:	2350      	movs	r3, #80	; 0x50
 8005422:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	2b50      	cmp	r3, #80	; 0x50
 8005428:	d001      	beq.n	800542e <xQueueGenericCreateStatic+0x64>
 800542a:	b672      	cpsid	i
 800542c:	e7fe      	b.n	800542c <xQueueGenericCreateStatic+0x62>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800542e:	693b      	ldr	r3, [r7, #16]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005430:	683b      	ldr	r3, [r7, #0]
 8005432:	617b      	str	r3, [r7, #20]

		if( pxNewQueue != NULL )
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d00e      	beq.n	8005458 <xQueueGenericCreateStatic+0x8e>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800543a:	697b      	ldr	r3, [r7, #20]
 800543c:	2246      	movs	r2, #70	; 0x46
 800543e:	2101      	movs	r1, #1
 8005440:	5499      	strb	r1, [r3, r2]
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005442:	2328      	movs	r3, #40	; 0x28
 8005444:	18fb      	adds	r3, r7, r3
 8005446:	781c      	ldrb	r4, [r3, #0]
 8005448:	687a      	ldr	r2, [r7, #4]
 800544a:	68b9      	ldr	r1, [r7, #8]
 800544c:	68f8      	ldr	r0, [r7, #12]
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	9300      	str	r3, [sp, #0]
 8005452:	0023      	movs	r3, r4
 8005454:	f000 f805 	bl	8005462 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005458:	697b      	ldr	r3, [r7, #20]
	}
 800545a:	0018      	movs	r0, r3
 800545c:	46bd      	mov	sp, r7
 800545e:	b007      	add	sp, #28
 8005460:	bd90      	pop	{r4, r7, pc}

08005462 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005462:	b580      	push	{r7, lr}
 8005464:	b084      	sub	sp, #16
 8005466:	af00      	add	r7, sp, #0
 8005468:	60f8      	str	r0, [r7, #12]
 800546a:	60b9      	str	r1, [r7, #8]
 800546c:	607a      	str	r2, [r7, #4]
 800546e:	001a      	movs	r2, r3
 8005470:	1cfb      	adds	r3, r7, #3
 8005472:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005474:	68bb      	ldr	r3, [r7, #8]
 8005476:	2b00      	cmp	r3, #0
 8005478:	d103      	bne.n	8005482 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800547a:	69bb      	ldr	r3, [r7, #24]
 800547c:	69ba      	ldr	r2, [r7, #24]
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	e002      	b.n	8005488 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005482:	69bb      	ldr	r3, [r7, #24]
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005488:	69bb      	ldr	r3, [r7, #24]
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800548e:	69bb      	ldr	r3, [r7, #24]
 8005490:	68ba      	ldr	r2, [r7, #8]
 8005492:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005494:	69bb      	ldr	r3, [r7, #24]
 8005496:	2101      	movs	r1, #1
 8005498:	0018      	movs	r0, r3
 800549a:	f7ff ff42 	bl	8005322 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	1cfa      	adds	r2, r7, #3
 80054a2:	214c      	movs	r1, #76	; 0x4c
 80054a4:	7812      	ldrb	r2, [r2, #0]
 80054a6:	545a      	strb	r2, [r3, r1]
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80054a8:	46c0      	nop			; (mov r8, r8)
 80054aa:	46bd      	mov	sp, r7
 80054ac:	b004      	add	sp, #16
 80054ae:	bd80      	pop	{r7, pc}

080054b0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b08a      	sub	sp, #40	; 0x28
 80054b4:	af00      	add	r7, sp, #0
 80054b6:	60f8      	str	r0, [r7, #12]
 80054b8:	60b9      	str	r1, [r7, #8]
 80054ba:	607a      	str	r2, [r7, #4]
 80054bc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80054be:	2300      	movs	r3, #0
 80054c0:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 80054c6:	6a3b      	ldr	r3, [r7, #32]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d101      	bne.n	80054d0 <xQueueGenericSend+0x20>
 80054cc:	b672      	cpsid	i
 80054ce:	e7fe      	b.n	80054ce <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d103      	bne.n	80054de <xQueueGenericSend+0x2e>
 80054d6:	6a3b      	ldr	r3, [r7, #32]
 80054d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <xQueueGenericSend+0x32>
 80054de:	2301      	movs	r3, #1
 80054e0:	e000      	b.n	80054e4 <xQueueGenericSend+0x34>
 80054e2:	2300      	movs	r3, #0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <xQueueGenericSend+0x3c>
 80054e8:	b672      	cpsid	i
 80054ea:	e7fe      	b.n	80054ea <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80054ec:	683b      	ldr	r3, [r7, #0]
 80054ee:	2b02      	cmp	r3, #2
 80054f0:	d103      	bne.n	80054fa <xQueueGenericSend+0x4a>
 80054f2:	6a3b      	ldr	r3, [r7, #32]
 80054f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d101      	bne.n	80054fe <xQueueGenericSend+0x4e>
 80054fa:	2301      	movs	r3, #1
 80054fc:	e000      	b.n	8005500 <xQueueGenericSend+0x50>
 80054fe:	2300      	movs	r3, #0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d101      	bne.n	8005508 <xQueueGenericSend+0x58>
 8005504:	b672      	cpsid	i
 8005506:	e7fe      	b.n	8005506 <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005508:	f001 f8e0 	bl	80066cc <xTaskGetSchedulerState>
 800550c:	1e03      	subs	r3, r0, #0
 800550e:	d102      	bne.n	8005516 <xQueueGenericSend+0x66>
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d101      	bne.n	800551a <xQueueGenericSend+0x6a>
 8005516:	2301      	movs	r3, #1
 8005518:	e000      	b.n	800551c <xQueueGenericSend+0x6c>
 800551a:	2300      	movs	r3, #0
 800551c:	2b00      	cmp	r3, #0
 800551e:	d101      	bne.n	8005524 <xQueueGenericSend+0x74>
 8005520:	b672      	cpsid	i
 8005522:	e7fe      	b.n	8005522 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005524:	f001 fd4c 	bl	8006fc0 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005528:	6a3b      	ldr	r3, [r7, #32]
 800552a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800552c:	6a3b      	ldr	r3, [r7, #32]
 800552e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005530:	429a      	cmp	r2, r3
 8005532:	d302      	bcc.n	800553a <xQueueGenericSend+0x8a>
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	2b02      	cmp	r3, #2
 8005538:	d11e      	bne.n	8005578 <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800553a:	683a      	ldr	r2, [r7, #0]
 800553c:	68b9      	ldr	r1, [r7, #8]
 800553e:	6a3b      	ldr	r3, [r7, #32]
 8005540:	0018      	movs	r0, r3
 8005542:	f000 f9a2 	bl	800588a <prvCopyDataToQueue>
 8005546:	0003      	movs	r3, r0
 8005548:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800554a:	6a3b      	ldr	r3, [r7, #32]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	2b00      	cmp	r3, #0
 8005550:	d009      	beq.n	8005566 <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005552:	6a3b      	ldr	r3, [r7, #32]
 8005554:	3324      	adds	r3, #36	; 0x24
 8005556:	0018      	movs	r0, r3
 8005558:	f000 ff20 	bl	800639c <xTaskRemoveFromEventList>
 800555c:	1e03      	subs	r3, r0, #0
 800555e:	d007      	beq.n	8005570 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005560:	f001 fd1e 	bl	8006fa0 <vPortYield>
 8005564:	e004      	b.n	8005570 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005566:	69fb      	ldr	r3, [r7, #28]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d001      	beq.n	8005570 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800556c:	f001 fd18 	bl	8006fa0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005570:	f001 fd38 	bl	8006fe4 <vPortExitCritical>
				return pdPASS;
 8005574:	2301      	movs	r3, #1
 8005576:	e05b      	b.n	8005630 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d103      	bne.n	8005586 <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800557e:	f001 fd31 	bl	8006fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005582:	2300      	movs	r3, #0
 8005584:	e054      	b.n	8005630 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	2b00      	cmp	r3, #0
 800558a:	d106      	bne.n	800559a <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800558c:	2314      	movs	r3, #20
 800558e:	18fb      	adds	r3, r7, r3
 8005590:	0018      	movs	r0, r3
 8005592:	f000 ff5f 	bl	8006454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005596:	2301      	movs	r3, #1
 8005598:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800559a:	f001 fd23 	bl	8006fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800559e:	f000 fd09 	bl	8005fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055a2:	f001 fd0d 	bl	8006fc0 <vPortEnterCritical>
 80055a6:	6a3b      	ldr	r3, [r7, #32]
 80055a8:	2244      	movs	r2, #68	; 0x44
 80055aa:	5c9b      	ldrb	r3, [r3, r2]
 80055ac:	b25b      	sxtb	r3, r3
 80055ae:	3301      	adds	r3, #1
 80055b0:	d103      	bne.n	80055ba <xQueueGenericSend+0x10a>
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2244      	movs	r2, #68	; 0x44
 80055b6:	2100      	movs	r1, #0
 80055b8:	5499      	strb	r1, [r3, r2]
 80055ba:	6a3b      	ldr	r3, [r7, #32]
 80055bc:	2245      	movs	r2, #69	; 0x45
 80055be:	5c9b      	ldrb	r3, [r3, r2]
 80055c0:	b25b      	sxtb	r3, r3
 80055c2:	3301      	adds	r3, #1
 80055c4:	d103      	bne.n	80055ce <xQueueGenericSend+0x11e>
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	2245      	movs	r2, #69	; 0x45
 80055ca:	2100      	movs	r1, #0
 80055cc:	5499      	strb	r1, [r3, r2]
 80055ce:	f001 fd09 	bl	8006fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055d2:	1d3a      	adds	r2, r7, #4
 80055d4:	2314      	movs	r3, #20
 80055d6:	18fb      	adds	r3, r7, r3
 80055d8:	0011      	movs	r1, r2
 80055da:	0018      	movs	r0, r3
 80055dc:	f000 ff4e 	bl	800647c <xTaskCheckForTimeOut>
 80055e0:	1e03      	subs	r3, r0, #0
 80055e2:	d11e      	bne.n	8005622 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055e4:	6a3b      	ldr	r3, [r7, #32]
 80055e6:	0018      	movs	r0, r3
 80055e8:	f000 fa54 	bl	8005a94 <prvIsQueueFull>
 80055ec:	1e03      	subs	r3, r0, #0
 80055ee:	d011      	beq.n	8005614 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055f0:	6a3b      	ldr	r3, [r7, #32]
 80055f2:	3310      	adds	r3, #16
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	0011      	movs	r1, r2
 80055f8:	0018      	movs	r0, r3
 80055fa:	f000 fe8b 	bl	8006314 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055fe:	6a3b      	ldr	r3, [r7, #32]
 8005600:	0018      	movs	r0, r3
 8005602:	f000 f9d3 	bl	80059ac <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005606:	f000 fce1 	bl	8005fcc <xTaskResumeAll>
 800560a:	1e03      	subs	r3, r0, #0
 800560c:	d18a      	bne.n	8005524 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800560e:	f001 fcc7 	bl	8006fa0 <vPortYield>
 8005612:	e787      	b.n	8005524 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005614:	6a3b      	ldr	r3, [r7, #32]
 8005616:	0018      	movs	r0, r3
 8005618:	f000 f9c8 	bl	80059ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800561c:	f000 fcd6 	bl	8005fcc <xTaskResumeAll>
 8005620:	e780      	b.n	8005524 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005622:	6a3b      	ldr	r3, [r7, #32]
 8005624:	0018      	movs	r0, r3
 8005626:	f000 f9c1 	bl	80059ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800562a:	f000 fccf 	bl	8005fcc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800562e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005630:	0018      	movs	r0, r3
 8005632:	46bd      	mov	sp, r7
 8005634:	b00a      	add	sp, #40	; 0x28
 8005636:	bd80      	pop	{r7, pc}

08005638 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005638:	b590      	push	{r4, r7, lr}
 800563a:	b08b      	sub	sp, #44	; 0x2c
 800563c:	af00      	add	r7, sp, #0
 800563e:	60f8      	str	r0, [r7, #12]
 8005640:	60b9      	str	r1, [r7, #8]
 8005642:	607a      	str	r2, [r7, #4]
 8005644:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800564a:	6a3b      	ldr	r3, [r7, #32]
 800564c:	2b00      	cmp	r3, #0
 800564e:	d101      	bne.n	8005654 <xQueueGenericSendFromISR+0x1c>
 8005650:	b672      	cpsid	i
 8005652:	e7fe      	b.n	8005652 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	2b00      	cmp	r3, #0
 8005658:	d103      	bne.n	8005662 <xQueueGenericSendFromISR+0x2a>
 800565a:	6a3b      	ldr	r3, [r7, #32]
 800565c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565e:	2b00      	cmp	r3, #0
 8005660:	d101      	bne.n	8005666 <xQueueGenericSendFromISR+0x2e>
 8005662:	2301      	movs	r3, #1
 8005664:	e000      	b.n	8005668 <xQueueGenericSendFromISR+0x30>
 8005666:	2300      	movs	r3, #0
 8005668:	2b00      	cmp	r3, #0
 800566a:	d101      	bne.n	8005670 <xQueueGenericSendFromISR+0x38>
 800566c:	b672      	cpsid	i
 800566e:	e7fe      	b.n	800566e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005670:	683b      	ldr	r3, [r7, #0]
 8005672:	2b02      	cmp	r3, #2
 8005674:	d103      	bne.n	800567e <xQueueGenericSendFromISR+0x46>
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800567a:	2b01      	cmp	r3, #1
 800567c:	d101      	bne.n	8005682 <xQueueGenericSendFromISR+0x4a>
 800567e:	2301      	movs	r3, #1
 8005680:	e000      	b.n	8005684 <xQueueGenericSendFromISR+0x4c>
 8005682:	2300      	movs	r3, #0
 8005684:	2b00      	cmp	r3, #0
 8005686:	d101      	bne.n	800568c <xQueueGenericSendFromISR+0x54>
 8005688:	b672      	cpsid	i
 800568a:	e7fe      	b.n	800568a <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800568c:	f001 fcc2 	bl	8007014 <ulSetInterruptMaskFromISR>
 8005690:	0003      	movs	r3, r0
 8005692:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005694:	6a3b      	ldr	r3, [r7, #32]
 8005696:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005698:	6a3b      	ldr	r3, [r7, #32]
 800569a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569c:	429a      	cmp	r2, r3
 800569e:	d302      	bcc.n	80056a6 <xQueueGenericSendFromISR+0x6e>
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	d131      	bne.n	800570a <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056a6:	241b      	movs	r4, #27
 80056a8:	193b      	adds	r3, r7, r4
 80056aa:	6a3a      	ldr	r2, [r7, #32]
 80056ac:	2145      	movs	r1, #69	; 0x45
 80056ae:	5c52      	ldrb	r2, [r2, r1]
 80056b0:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056b2:	6a3b      	ldr	r3, [r7, #32]
 80056b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056b6:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	68b9      	ldr	r1, [r7, #8]
 80056bc:	6a3b      	ldr	r3, [r7, #32]
 80056be:	0018      	movs	r0, r3
 80056c0:	f000 f8e3 	bl	800588a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80056c4:	193b      	adds	r3, r7, r4
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	b25b      	sxtb	r3, r3
 80056ca:	3301      	adds	r3, #1
 80056cc:	d111      	bne.n	80056f2 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80056ce:	6a3b      	ldr	r3, [r7, #32]
 80056d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d016      	beq.n	8005704 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80056d6:	6a3b      	ldr	r3, [r7, #32]
 80056d8:	3324      	adds	r3, #36	; 0x24
 80056da:	0018      	movs	r0, r3
 80056dc:	f000 fe5e 	bl	800639c <xTaskRemoveFromEventList>
 80056e0:	1e03      	subs	r3, r0, #0
 80056e2:	d00f      	beq.n	8005704 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d00c      	beq.n	8005704 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	601a      	str	r2, [r3, #0]
 80056f0:	e008      	b.n	8005704 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056f2:	231b      	movs	r3, #27
 80056f4:	18fb      	adds	r3, r7, r3
 80056f6:	781b      	ldrb	r3, [r3, #0]
 80056f8:	3301      	adds	r3, #1
 80056fa:	b2db      	uxtb	r3, r3
 80056fc:	b259      	sxtb	r1, r3
 80056fe:	6a3b      	ldr	r3, [r7, #32]
 8005700:	2245      	movs	r2, #69	; 0x45
 8005702:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 8005704:	2301      	movs	r3, #1
 8005706:	627b      	str	r3, [r7, #36]	; 0x24
		{
 8005708:	e001      	b.n	800570e <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800570a:	2300      	movs	r3, #0
 800570c:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	0018      	movs	r0, r3
 8005712:	f001 fc85 	bl	8007020 <vClearInterruptMaskFromISR>

	return xReturn;
 8005716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005718:	0018      	movs	r0, r3
 800571a:	46bd      	mov	sp, r7
 800571c:	b00b      	add	sp, #44	; 0x2c
 800571e:	bd90      	pop	{r4, r7, pc}

08005720 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005720:	b580      	push	{r7, lr}
 8005722:	b08a      	sub	sp, #40	; 0x28
 8005724:	af00      	add	r7, sp, #0
 8005726:	60f8      	str	r0, [r7, #12]
 8005728:	60b9      	str	r1, [r7, #8]
 800572a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800572c:	2300      	movs	r3, #0
 800572e:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005734:	6a3b      	ldr	r3, [r7, #32]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d101      	bne.n	800573e <xQueueReceive+0x1e>
 800573a:	b672      	cpsid	i
 800573c:	e7fe      	b.n	800573c <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	d103      	bne.n	800574c <xQueueReceive+0x2c>
 8005744:	6a3b      	ldr	r3, [r7, #32]
 8005746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005748:	2b00      	cmp	r3, #0
 800574a:	d101      	bne.n	8005750 <xQueueReceive+0x30>
 800574c:	2301      	movs	r3, #1
 800574e:	e000      	b.n	8005752 <xQueueReceive+0x32>
 8005750:	2300      	movs	r3, #0
 8005752:	2b00      	cmp	r3, #0
 8005754:	d101      	bne.n	800575a <xQueueReceive+0x3a>
 8005756:	b672      	cpsid	i
 8005758:	e7fe      	b.n	8005758 <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800575a:	f000 ffb7 	bl	80066cc <xTaskGetSchedulerState>
 800575e:	1e03      	subs	r3, r0, #0
 8005760:	d102      	bne.n	8005768 <xQueueReceive+0x48>
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <xQueueReceive+0x4c>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <xQueueReceive+0x4e>
 800576c:	2300      	movs	r3, #0
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <xQueueReceive+0x56>
 8005772:	b672      	cpsid	i
 8005774:	e7fe      	b.n	8005774 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005776:	f001 fc23 	bl	8006fc0 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800577e:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005780:	69fb      	ldr	r3, [r7, #28]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d01a      	beq.n	80057bc <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005786:	68ba      	ldr	r2, [r7, #8]
 8005788:	6a3b      	ldr	r3, [r7, #32]
 800578a:	0011      	movs	r1, r2
 800578c:	0018      	movs	r0, r3
 800578e:	f000 f8e7 	bl	8005960 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005792:	69fb      	ldr	r3, [r7, #28]
 8005794:	1e5a      	subs	r2, r3, #1
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800579a:	6a3b      	ldr	r3, [r7, #32]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d008      	beq.n	80057b4 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	3310      	adds	r3, #16
 80057a6:	0018      	movs	r0, r3
 80057a8:	f000 fdf8 	bl	800639c <xTaskRemoveFromEventList>
 80057ac:	1e03      	subs	r3, r0, #0
 80057ae:	d001      	beq.n	80057b4 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057b0:	f001 fbf6 	bl	8006fa0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057b4:	f001 fc16 	bl	8006fe4 <vPortExitCritical>
				return pdPASS;
 80057b8:	2301      	movs	r3, #1
 80057ba:	e062      	b.n	8005882 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d103      	bne.n	80057ca <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057c2:	f001 fc0f 	bl	8006fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057c6:	2300      	movs	r3, #0
 80057c8:	e05b      	b.n	8005882 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d106      	bne.n	80057de <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057d0:	2314      	movs	r3, #20
 80057d2:	18fb      	adds	r3, r7, r3
 80057d4:	0018      	movs	r0, r3
 80057d6:	f000 fe3d 	bl	8006454 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057da:	2301      	movs	r3, #1
 80057dc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057de:	f001 fc01 	bl	8006fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057e2:	f000 fbe7 	bl	8005fb4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057e6:	f001 fbeb 	bl	8006fc0 <vPortEnterCritical>
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	2244      	movs	r2, #68	; 0x44
 80057ee:	5c9b      	ldrb	r3, [r3, r2]
 80057f0:	b25b      	sxtb	r3, r3
 80057f2:	3301      	adds	r3, #1
 80057f4:	d103      	bne.n	80057fe <xQueueReceive+0xde>
 80057f6:	6a3b      	ldr	r3, [r7, #32]
 80057f8:	2244      	movs	r2, #68	; 0x44
 80057fa:	2100      	movs	r1, #0
 80057fc:	5499      	strb	r1, [r3, r2]
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	2245      	movs	r2, #69	; 0x45
 8005802:	5c9b      	ldrb	r3, [r3, r2]
 8005804:	b25b      	sxtb	r3, r3
 8005806:	3301      	adds	r3, #1
 8005808:	d103      	bne.n	8005812 <xQueueReceive+0xf2>
 800580a:	6a3b      	ldr	r3, [r7, #32]
 800580c:	2245      	movs	r2, #69	; 0x45
 800580e:	2100      	movs	r1, #0
 8005810:	5499      	strb	r1, [r3, r2]
 8005812:	f001 fbe7 	bl	8006fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005816:	1d3a      	adds	r2, r7, #4
 8005818:	2314      	movs	r3, #20
 800581a:	18fb      	adds	r3, r7, r3
 800581c:	0011      	movs	r1, r2
 800581e:	0018      	movs	r0, r3
 8005820:	f000 fe2c 	bl	800647c <xTaskCheckForTimeOut>
 8005824:	1e03      	subs	r3, r0, #0
 8005826:	d11e      	bne.n	8005866 <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005828:	6a3b      	ldr	r3, [r7, #32]
 800582a:	0018      	movs	r0, r3
 800582c:	f000 f91c 	bl	8005a68 <prvIsQueueEmpty>
 8005830:	1e03      	subs	r3, r0, #0
 8005832:	d011      	beq.n	8005858 <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005834:	6a3b      	ldr	r3, [r7, #32]
 8005836:	3324      	adds	r3, #36	; 0x24
 8005838:	687a      	ldr	r2, [r7, #4]
 800583a:	0011      	movs	r1, r2
 800583c:	0018      	movs	r0, r3
 800583e:	f000 fd69 	bl	8006314 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005842:	6a3b      	ldr	r3, [r7, #32]
 8005844:	0018      	movs	r0, r3
 8005846:	f000 f8b1 	bl	80059ac <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800584a:	f000 fbbf 	bl	8005fcc <xTaskResumeAll>
 800584e:	1e03      	subs	r3, r0, #0
 8005850:	d191      	bne.n	8005776 <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 8005852:	f001 fba5 	bl	8006fa0 <vPortYield>
 8005856:	e78e      	b.n	8005776 <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005858:	6a3b      	ldr	r3, [r7, #32]
 800585a:	0018      	movs	r0, r3
 800585c:	f000 f8a6 	bl	80059ac <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005860:	f000 fbb4 	bl	8005fcc <xTaskResumeAll>
 8005864:	e787      	b.n	8005776 <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	0018      	movs	r0, r3
 800586a:	f000 f89f 	bl	80059ac <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800586e:	f000 fbad 	bl	8005fcc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005872:	6a3b      	ldr	r3, [r7, #32]
 8005874:	0018      	movs	r0, r3
 8005876:	f000 f8f7 	bl	8005a68 <prvIsQueueEmpty>
 800587a:	1e03      	subs	r3, r0, #0
 800587c:	d100      	bne.n	8005880 <xQueueReceive+0x160>
 800587e:	e77a      	b.n	8005776 <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005880:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005882:	0018      	movs	r0, r3
 8005884:	46bd      	mov	sp, r7
 8005886:	b00a      	add	sp, #40	; 0x28
 8005888:	bd80      	pop	{r7, pc}

0800588a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800588a:	b580      	push	{r7, lr}
 800588c:	b086      	sub	sp, #24
 800588e:	af00      	add	r7, sp, #0
 8005890:	60f8      	str	r0, [r7, #12]
 8005892:	60b9      	str	r1, [r7, #8]
 8005894:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005896:	2300      	movs	r3, #0
 8005898:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800589e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d10e      	bne.n	80058c6 <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d14e      	bne.n	800594e <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 ff25 	bl	8006704 <xTaskPriorityDisinherit>
 80058ba:	0003      	movs	r3, r0
 80058bc:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	2200      	movs	r2, #0
 80058c2:	609a      	str	r2, [r3, #8]
 80058c4:	e043      	b.n	800594e <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d119      	bne.n	8005900 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	6858      	ldr	r0, [r3, #4]
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80058d4:	68bb      	ldr	r3, [r7, #8]
 80058d6:	0019      	movs	r1, r3
 80058d8:	f001 fe48 	bl	800756c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	685a      	ldr	r2, [r3, #4]
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058e4:	18d2      	adds	r2, r2, r3
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	689b      	ldr	r3, [r3, #8]
 80058f2:	429a      	cmp	r2, r3
 80058f4:	d32b      	bcc.n	800594e <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	681a      	ldr	r2, [r3, #0]
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	605a      	str	r2, [r3, #4]
 80058fe:	e026      	b.n	800594e <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	68d8      	ldr	r0, [r3, #12]
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005908:	68bb      	ldr	r3, [r7, #8]
 800590a:	0019      	movs	r1, r3
 800590c:	f001 fe2e 	bl	800756c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	68da      	ldr	r2, [r3, #12]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005918:	425b      	negs	r3, r3
 800591a:	18d2      	adds	r2, r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	68da      	ldr	r2, [r3, #12]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d207      	bcs.n	800593c <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	68fb      	ldr	r3, [r7, #12]
 8005932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005934:	425b      	negs	r3, r3
 8005936:	18d2      	adds	r2, r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2b02      	cmp	r3, #2
 8005940:	d105      	bne.n	800594e <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005942:	693b      	ldr	r3, [r7, #16]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d002      	beq.n	800594e <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005948:	693b      	ldr	r3, [r7, #16]
 800594a:	3b01      	subs	r3, #1
 800594c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	1c5a      	adds	r2, r3, #1
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005956:	697b      	ldr	r3, [r7, #20]
}
 8005958:	0018      	movs	r0, r3
 800595a:	46bd      	mov	sp, r7
 800595c:	b006      	add	sp, #24
 800595e:	bd80      	pop	{r7, pc}

08005960 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b082      	sub	sp, #8
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800596e:	2b00      	cmp	r3, #0
 8005970:	d018      	beq.n	80059a4 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	68da      	ldr	r2, [r3, #12]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800597a:	18d2      	adds	r2, r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	68da      	ldr	r2, [r3, #12]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	689b      	ldr	r3, [r3, #8]
 8005988:	429a      	cmp	r2, r3
 800598a:	d303      	bcc.n	8005994 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681a      	ldr	r2, [r3, #0]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	68d9      	ldr	r1, [r3, #12]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	0018      	movs	r0, r3
 80059a0:	f001 fde4 	bl	800756c <memcpy>
	}
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b084      	sub	sp, #16
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80059b4:	f001 fb04 	bl	8006fc0 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80059b8:	230f      	movs	r3, #15
 80059ba:	18fb      	adds	r3, r7, r3
 80059bc:	687a      	ldr	r2, [r7, #4]
 80059be:	2145      	movs	r1, #69	; 0x45
 80059c0:	5c52      	ldrb	r2, [r2, r1]
 80059c2:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059c4:	e013      	b.n	80059ee <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d016      	beq.n	80059fc <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	3324      	adds	r3, #36	; 0x24
 80059d2:	0018      	movs	r0, r3
 80059d4:	f000 fce2 	bl	800639c <xTaskRemoveFromEventList>
 80059d8:	1e03      	subs	r3, r0, #0
 80059da:	d001      	beq.n	80059e0 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80059dc:	f000 fd9e 	bl	800651c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80059e0:	210f      	movs	r1, #15
 80059e2:	187b      	adds	r3, r7, r1
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	3b01      	subs	r3, #1
 80059e8:	b2da      	uxtb	r2, r3
 80059ea:	187b      	adds	r3, r7, r1
 80059ec:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80059ee:	230f      	movs	r3, #15
 80059f0:	18fb      	adds	r3, r7, r3
 80059f2:	781b      	ldrb	r3, [r3, #0]
 80059f4:	b25b      	sxtb	r3, r3
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	dce5      	bgt.n	80059c6 <prvUnlockQueue+0x1a>
 80059fa:	e000      	b.n	80059fe <prvUnlockQueue+0x52>
					break;
 80059fc:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	2245      	movs	r2, #69	; 0x45
 8005a02:	21ff      	movs	r1, #255	; 0xff
 8005a04:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005a06:	f001 faed 	bl	8006fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a0a:	f001 fad9 	bl	8006fc0 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005a0e:	230e      	movs	r3, #14
 8005a10:	18fb      	adds	r3, r7, r3
 8005a12:	687a      	ldr	r2, [r7, #4]
 8005a14:	2144      	movs	r1, #68	; 0x44
 8005a16:	5c52      	ldrb	r2, [r2, r1]
 8005a18:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a1a:	e013      	b.n	8005a44 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	691b      	ldr	r3, [r3, #16]
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d016      	beq.n	8005a52 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	3310      	adds	r3, #16
 8005a28:	0018      	movs	r0, r3
 8005a2a:	f000 fcb7 	bl	800639c <xTaskRemoveFromEventList>
 8005a2e:	1e03      	subs	r3, r0, #0
 8005a30:	d001      	beq.n	8005a36 <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 8005a32:	f000 fd73 	bl	800651c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005a36:	210e      	movs	r1, #14
 8005a38:	187b      	adds	r3, r7, r1
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	3b01      	subs	r3, #1
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	187b      	adds	r3, r7, r1
 8005a42:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005a44:	230e      	movs	r3, #14
 8005a46:	18fb      	adds	r3, r7, r3
 8005a48:	781b      	ldrb	r3, [r3, #0]
 8005a4a:	b25b      	sxtb	r3, r3
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	dce5      	bgt.n	8005a1c <prvUnlockQueue+0x70>
 8005a50:	e000      	b.n	8005a54 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 8005a52:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	2244      	movs	r2, #68	; 0x44
 8005a58:	21ff      	movs	r1, #255	; 0xff
 8005a5a:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 8005a5c:	f001 fac2 	bl	8006fe4 <vPortExitCritical>
}
 8005a60:	46c0      	nop			; (mov r8, r8)
 8005a62:	46bd      	mov	sp, r7
 8005a64:	b004      	add	sp, #16
 8005a66:	bd80      	pop	{r7, pc}

08005a68 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a70:	f001 faa6 	bl	8006fc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d102      	bne.n	8005a82 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	60fb      	str	r3, [r7, #12]
 8005a80:	e001      	b.n	8005a86 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005a82:	2300      	movs	r3, #0
 8005a84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a86:	f001 faad 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 8005a8a:	68fb      	ldr	r3, [r7, #12]
}
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	46bd      	mov	sp, r7
 8005a90:	b004      	add	sp, #16
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a9c:	f001 fa90 	bl	8006fc0 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa8:	429a      	cmp	r2, r3
 8005aaa:	d102      	bne.n	8005ab2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005aac:	2301      	movs	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]
 8005ab0:	e001      	b.n	8005ab6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005ab6:	f001 fa95 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 8005aba:	68fb      	ldr	r3, [r7, #12]
}
 8005abc:	0018      	movs	r0, r3
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	b004      	add	sp, #16
 8005ac2:	bd80      	pop	{r7, pc}

08005ac4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b084      	sub	sp, #16
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
 8005acc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ace:	2300      	movs	r3, #0
 8005ad0:	60fb      	str	r3, [r7, #12]
 8005ad2:	e015      	b.n	8005b00 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005ad4:	4b0e      	ldr	r3, [pc, #56]	; (8005b10 <vQueueAddToRegistry+0x4c>)
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	00d2      	lsls	r2, r2, #3
 8005ada:	58d3      	ldr	r3, [r2, r3]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d10c      	bne.n	8005afa <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005ae0:	4b0b      	ldr	r3, [pc, #44]	; (8005b10 <vQueueAddToRegistry+0x4c>)
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	00d2      	lsls	r2, r2, #3
 8005ae6:	6839      	ldr	r1, [r7, #0]
 8005ae8:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005aea:	4a09      	ldr	r2, [pc, #36]	; (8005b10 <vQueueAddToRegistry+0x4c>)
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	00db      	lsls	r3, r3, #3
 8005af0:	18d3      	adds	r3, r2, r3
 8005af2:	3304      	adds	r3, #4
 8005af4:	687a      	ldr	r2, [r7, #4]
 8005af6:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005af8:	e006      	b.n	8005b08 <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	3301      	adds	r3, #1
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	2b07      	cmp	r3, #7
 8005b04:	d9e6      	bls.n	8005ad4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b06:	46c0      	nop			; (mov r8, r8)
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	b004      	add	sp, #16
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	20000994 	.word	0x20000994

08005b14 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005b24:	f001 fa4c 	bl	8006fc0 <vPortEnterCritical>
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	2244      	movs	r2, #68	; 0x44
 8005b2c:	5c9b      	ldrb	r3, [r3, r2]
 8005b2e:	b25b      	sxtb	r3, r3
 8005b30:	3301      	adds	r3, #1
 8005b32:	d103      	bne.n	8005b3c <vQueueWaitForMessageRestricted+0x28>
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	2244      	movs	r2, #68	; 0x44
 8005b38:	2100      	movs	r1, #0
 8005b3a:	5499      	strb	r1, [r3, r2]
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	2245      	movs	r2, #69	; 0x45
 8005b40:	5c9b      	ldrb	r3, [r3, r2]
 8005b42:	b25b      	sxtb	r3, r3
 8005b44:	3301      	adds	r3, #1
 8005b46:	d103      	bne.n	8005b50 <vQueueWaitForMessageRestricted+0x3c>
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	2245      	movs	r2, #69	; 0x45
 8005b4c:	2100      	movs	r1, #0
 8005b4e:	5499      	strb	r1, [r3, r2]
 8005b50:	f001 fa48 	bl	8006fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d106      	bne.n	8005b6a <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b5c:	697b      	ldr	r3, [r7, #20]
 8005b5e:	3324      	adds	r3, #36	; 0x24
 8005b60:	687a      	ldr	r2, [r7, #4]
 8005b62:	68b9      	ldr	r1, [r7, #8]
 8005b64:	0018      	movs	r0, r3
 8005b66:	f000 fbf3 	bl	8006350 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b6a:	697b      	ldr	r3, [r7, #20]
 8005b6c:	0018      	movs	r0, r3
 8005b6e:	f7ff ff1d 	bl	80059ac <prvUnlockQueue>
	}
 8005b72:	46c0      	nop			; (mov r8, r8)
 8005b74:	46bd      	mov	sp, r7
 8005b76:	b006      	add	sp, #24
 8005b78:	bd80      	pop	{r7, pc}

08005b7a <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b7a:	b590      	push	{r4, r7, lr}
 8005b7c:	b08d      	sub	sp, #52	; 0x34
 8005b7e:	af04      	add	r7, sp, #16
 8005b80:	60f8      	str	r0, [r7, #12]
 8005b82:	60b9      	str	r1, [r7, #8]
 8005b84:	607a      	str	r2, [r7, #4]
 8005b86:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d101      	bne.n	8005b92 <xTaskCreateStatic+0x18>
 8005b8e:	b672      	cpsid	i
 8005b90:	e7fe      	b.n	8005b90 <xTaskCreateStatic+0x16>
		configASSERT( pxTaskBuffer != NULL );
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d101      	bne.n	8005b9c <xTaskCreateStatic+0x22>
 8005b98:	b672      	cpsid	i
 8005b9a:	e7fe      	b.n	8005b9a <xTaskCreateStatic+0x20>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b9c:	23a8      	movs	r3, #168	; 0xa8
 8005b9e:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ba0:	697b      	ldr	r3, [r7, #20]
 8005ba2:	2ba8      	cmp	r3, #168	; 0xa8
 8005ba4:	d001      	beq.n	8005baa <xTaskCreateStatic+0x30>
 8005ba6:	b672      	cpsid	i
 8005ba8:	e7fe      	b.n	8005ba8 <xTaskCreateStatic+0x2e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005baa:	697b      	ldr	r3, [r7, #20]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d020      	beq.n	8005bf4 <xTaskCreateStatic+0x7a>
 8005bb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d01d      	beq.n	8005bf4 <xTaskCreateStatic+0x7a>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bba:	61fb      	str	r3, [r7, #28]
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bbc:	69fb      	ldr	r3, [r7, #28]
 8005bbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bc2:	69fb      	ldr	r3, [r7, #28]
 8005bc4:	22a5      	movs	r2, #165	; 0xa5
 8005bc6:	2102      	movs	r1, #2
 8005bc8:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bca:	683c      	ldr	r4, [r7, #0]
 8005bcc:	687a      	ldr	r2, [r7, #4]
 8005bce:	68b9      	ldr	r1, [r7, #8]
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9303      	str	r3, [sp, #12]
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	9302      	str	r3, [sp, #8]
 8005bda:	2318      	movs	r3, #24
 8005bdc:	18fb      	adds	r3, r7, r3
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	0023      	movs	r3, r4
 8005be6:	f000 f859 	bl	8005c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bea:	69fb      	ldr	r3, [r7, #28]
 8005bec:	0018      	movs	r0, r3
 8005bee:	f000 f8f5 	bl	8005ddc <prvAddNewTaskToReadyList>
 8005bf2:	e001      	b.n	8005bf8 <xTaskCreateStatic+0x7e>
		}
		else
		{
			xReturn = NULL;
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005bf8:	69bb      	ldr	r3, [r7, #24]
	}
 8005bfa:	0018      	movs	r0, r3
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	b009      	add	sp, #36	; 0x24
 8005c00:	bd90      	pop	{r4, r7, pc}

08005c02 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c02:	b590      	push	{r4, r7, lr}
 8005c04:	b08d      	sub	sp, #52	; 0x34
 8005c06:	af04      	add	r7, sp, #16
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	603b      	str	r3, [r7, #0]
 8005c0e:	1dbb      	adds	r3, r7, #6
 8005c10:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c12:	1dbb      	adds	r3, r7, #6
 8005c14:	881b      	ldrh	r3, [r3, #0]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	0018      	movs	r0, r3
 8005c1a:	f001 fa69 	bl	80070f0 <pvPortMalloc>
 8005c1e:	0003      	movs	r3, r0
 8005c20:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d010      	beq.n	8005c4a <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c28:	20a8      	movs	r0, #168	; 0xa8
 8005c2a:	f001 fa61 	bl	80070f0 <pvPortMalloc>
 8005c2e:	0003      	movs	r3, r0
 8005c30:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d003      	beq.n	8005c40 <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c38:	69fb      	ldr	r3, [r7, #28]
 8005c3a:	697a      	ldr	r2, [r7, #20]
 8005c3c:	631a      	str	r2, [r3, #48]	; 0x30
 8005c3e:	e006      	b.n	8005c4e <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c40:	697b      	ldr	r3, [r7, #20]
 8005c42:	0018      	movs	r0, r3
 8005c44:	f001 fb00 	bl	8007248 <vPortFree>
 8005c48:	e001      	b.n	8005c4e <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d01a      	beq.n	8005c8a <xTaskCreate+0x88>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	22a5      	movs	r2, #165	; 0xa5
 8005c58:	2100      	movs	r1, #0
 8005c5a:	5499      	strb	r1, [r3, r2]
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c5c:	1dbb      	adds	r3, r7, #6
 8005c5e:	881a      	ldrh	r2, [r3, #0]
 8005c60:	683c      	ldr	r4, [r7, #0]
 8005c62:	68b9      	ldr	r1, [r7, #8]
 8005c64:	68f8      	ldr	r0, [r7, #12]
 8005c66:	2300      	movs	r3, #0
 8005c68:	9303      	str	r3, [sp, #12]
 8005c6a:	69fb      	ldr	r3, [r7, #28]
 8005c6c:	9302      	str	r3, [sp, #8]
 8005c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c70:	9301      	str	r3, [sp, #4]
 8005c72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c74:	9300      	str	r3, [sp, #0]
 8005c76:	0023      	movs	r3, r4
 8005c78:	f000 f810 	bl	8005c9c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c7c:	69fb      	ldr	r3, [r7, #28]
 8005c7e:	0018      	movs	r0, r3
 8005c80:	f000 f8ac 	bl	8005ddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c84:	2301      	movs	r3, #1
 8005c86:	61bb      	str	r3, [r7, #24]
 8005c88:	e002      	b.n	8005c90 <xTaskCreate+0x8e>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	425b      	negs	r3, r3
 8005c8e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c90:	69bb      	ldr	r3, [r7, #24]
	}
 8005c92:	0018      	movs	r0, r3
 8005c94:	46bd      	mov	sp, r7
 8005c96:	b009      	add	sp, #36	; 0x24
 8005c98:	bd90      	pop	{r4, r7, pc}
	...

08005c9c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c9c:	b580      	push	{r7, lr}
 8005c9e:	b086      	sub	sp, #24
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	60b9      	str	r1, [r7, #8]
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cac:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	001a      	movs	r2, r3
 8005cb4:	21a5      	movs	r1, #165	; 0xa5
 8005cb6:	f001 fbcd 	bl	8007454 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005cbc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	4942      	ldr	r1, [pc, #264]	; (8005dcc <prvInitialiseNewTask+0x130>)
 8005cc2:	468c      	mov	ip, r1
 8005cc4:	4463      	add	r3, ip
 8005cc6:	009b      	lsls	r3, r3, #2
 8005cc8:	18d3      	adds	r3, r2, r3
 8005cca:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ccc:	693b      	ldr	r3, [r7, #16]
 8005cce:	2207      	movs	r2, #7
 8005cd0:	4393      	bics	r3, r2
 8005cd2:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	2207      	movs	r2, #7
 8005cd8:	4013      	ands	r3, r2
 8005cda:	d001      	beq.n	8005ce0 <prvInitialiseNewTask+0x44>
 8005cdc:	b672      	cpsid	i
 8005cde:	e7fe      	b.n	8005cde <prvInitialiseNewTask+0x42>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d020      	beq.n	8005d28 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	617b      	str	r3, [r7, #20]
 8005cea:	e013      	b.n	8005d14 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cec:	68ba      	ldr	r2, [r7, #8]
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	18d3      	adds	r3, r2, r3
 8005cf2:	7818      	ldrb	r0, [r3, #0]
 8005cf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005cf6:	2134      	movs	r1, #52	; 0x34
 8005cf8:	697b      	ldr	r3, [r7, #20]
 8005cfa:	18d3      	adds	r3, r2, r3
 8005cfc:	185b      	adds	r3, r3, r1
 8005cfe:	1c02      	adds	r2, r0, #0
 8005d00:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d02:	68ba      	ldr	r2, [r7, #8]
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	18d3      	adds	r3, r2, r3
 8005d08:	781b      	ldrb	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d006      	beq.n	8005d1c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d0e:	697b      	ldr	r3, [r7, #20]
 8005d10:	3301      	adds	r3, #1
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2b0f      	cmp	r3, #15
 8005d18:	d9e8      	bls.n	8005cec <prvInitialiseNewTask+0x50>
 8005d1a:	e000      	b.n	8005d1e <prvInitialiseNewTask+0x82>
			{
				break;
 8005d1c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d20:	2243      	movs	r2, #67	; 0x43
 8005d22:	2100      	movs	r1, #0
 8005d24:	5499      	strb	r1, [r3, r2]
 8005d26:	e003      	b.n	8005d30 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d2a:	2234      	movs	r2, #52	; 0x34
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d30:	6a3b      	ldr	r3, [r7, #32]
 8005d32:	2b37      	cmp	r3, #55	; 0x37
 8005d34:	d901      	bls.n	8005d3a <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d36:	2337      	movs	r3, #55	; 0x37
 8005d38:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d3c:	6a3a      	ldr	r2, [r7, #32]
 8005d3e:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d42:	6a3a      	ldr	r2, [r7, #32]
 8005d44:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d48:	2200      	movs	r2, #0
 8005d4a:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d4e:	3304      	adds	r3, #4
 8005d50:	0018      	movs	r0, r3
 8005d52:	f7ff fa5b 	bl	800520c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d58:	3318      	adds	r3, #24
 8005d5a:	0018      	movs	r0, r3
 8005d5c:	f7ff fa56 	bl	800520c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d62:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d64:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	2238      	movs	r2, #56	; 0x38
 8005d6a:	1ad2      	subs	r2, r2, r3
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d72:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d74:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	22a0      	movs	r2, #160	; 0xa0
 8005d7a:	2100      	movs	r1, #0
 8005d7c:	5099      	str	r1, [r3, r2]
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d80:	22a4      	movs	r2, #164	; 0xa4
 8005d82:	2100      	movs	r1, #0
 8005d84:	5499      	strb	r1, [r3, r2]
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d88:	3354      	adds	r3, #84	; 0x54
 8005d8a:	224c      	movs	r2, #76	; 0x4c
 8005d8c:	2100      	movs	r1, #0
 8005d8e:	0018      	movs	r0, r3
 8005d90:	f001 fb60 	bl	8007454 <memset>
 8005d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d96:	4a0e      	ldr	r2, [pc, #56]	; (8005dd0 <prvInitialiseNewTask+0x134>)
 8005d98:	659a      	str	r2, [r3, #88]	; 0x58
 8005d9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d9c:	4a0d      	ldr	r2, [pc, #52]	; (8005dd4 <prvInitialiseNewTask+0x138>)
 8005d9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8005da0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da2:	4a0d      	ldr	r2, [pc, #52]	; (8005dd8 <prvInitialiseNewTask+0x13c>)
 8005da4:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	68f9      	ldr	r1, [r7, #12]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	0018      	movs	r0, r3
 8005dae:	f001 f86b 	bl	8006e88 <pxPortInitialiseStack>
 8005db2:	0002      	movs	r2, r0
 8005db4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005db6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d002      	beq.n	8005dc4 <prvInitialiseNewTask+0x128>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005dc2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc4:	46c0      	nop			; (mov r8, r8)
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	b006      	add	sp, #24
 8005dca:	bd80      	pop	{r7, pc}
 8005dcc:	3fffffff 	.word	0x3fffffff
 8005dd0:	20001c20 	.word	0x20001c20
 8005dd4:	20001c88 	.word	0x20001c88
 8005dd8:	20001cf0 	.word	0x20001cf0

08005ddc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005de4:	f001 f8ec 	bl	8006fc0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005de8:	4b2a      	ldr	r3, [pc, #168]	; (8005e94 <prvAddNewTaskToReadyList+0xb8>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	1c5a      	adds	r2, r3, #1
 8005dee:	4b29      	ldr	r3, [pc, #164]	; (8005e94 <prvAddNewTaskToReadyList+0xb8>)
 8005df0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8005df2:	4b29      	ldr	r3, [pc, #164]	; (8005e98 <prvAddNewTaskToReadyList+0xbc>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dfa:	4b27      	ldr	r3, [pc, #156]	; (8005e98 <prvAddNewTaskToReadyList+0xbc>)
 8005dfc:	687a      	ldr	r2, [r7, #4]
 8005dfe:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e00:	4b24      	ldr	r3, [pc, #144]	; (8005e94 <prvAddNewTaskToReadyList+0xb8>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d110      	bne.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e08:	f000 fba2 	bl	8006550 <prvInitialiseTaskLists>
 8005e0c:	e00d      	b.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e0e:	4b23      	ldr	r3, [pc, #140]	; (8005e9c <prvAddNewTaskToReadyList+0xc0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e16:	4b20      	ldr	r3, [pc, #128]	; (8005e98 <prvAddNewTaskToReadyList+0xbc>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d802      	bhi.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e24:	4b1c      	ldr	r3, [pc, #112]	; (8005e98 <prvAddNewTaskToReadyList+0xbc>)
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e2a:	4b1d      	ldr	r3, [pc, #116]	; (8005ea0 <prvAddNewTaskToReadyList+0xc4>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	1c5a      	adds	r2, r3, #1
 8005e30:	4b1b      	ldr	r3, [pc, #108]	; (8005ea0 <prvAddNewTaskToReadyList+0xc4>)
 8005e32:	601a      	str	r2, [r3, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e34:	4b1a      	ldr	r3, [pc, #104]	; (8005ea0 <prvAddNewTaskToReadyList+0xc4>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4b18      	ldr	r3, [pc, #96]	; (8005ea4 <prvAddNewTaskToReadyList+0xc8>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d903      	bls.n	8005e50 <prvAddNewTaskToReadyList+0x74>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e4c:	4b15      	ldr	r3, [pc, #84]	; (8005ea4 <prvAddNewTaskToReadyList+0xc8>)
 8005e4e:	601a      	str	r2, [r3, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	0013      	movs	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	189b      	adds	r3, r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4a12      	ldr	r2, [pc, #72]	; (8005ea8 <prvAddNewTaskToReadyList+0xcc>)
 8005e5e:	189a      	adds	r2, r3, r2
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3304      	adds	r3, #4
 8005e64:	0019      	movs	r1, r3
 8005e66:	0010      	movs	r0, r2
 8005e68:	f7ff f9db 	bl	8005222 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e6c:	f001 f8ba 	bl	8006fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e70:	4b0a      	ldr	r3, [pc, #40]	; (8005e9c <prvAddNewTaskToReadyList+0xc0>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d008      	beq.n	8005e8a <prvAddNewTaskToReadyList+0xae>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e78:	4b07      	ldr	r3, [pc, #28]	; (8005e98 <prvAddNewTaskToReadyList+0xbc>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d201      	bcs.n	8005e8a <prvAddNewTaskToReadyList+0xae>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e86:	f001 f88b 	bl	8006fa0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e8a:	46c0      	nop			; (mov r8, r8)
 8005e8c:	46bd      	mov	sp, r7
 8005e8e:	b002      	add	sp, #8
 8005e90:	bd80      	pop	{r7, pc}
 8005e92:	46c0      	nop			; (mov r8, r8)
 8005e94:	20000ea8 	.word	0x20000ea8
 8005e98:	200009d4 	.word	0x200009d4
 8005e9c:	20000eb4 	.word	0x20000eb4
 8005ea0:	20000ec4 	.word	0x20000ec4
 8005ea4:	20000eb0 	.word	0x20000eb0
 8005ea8:	200009d8 	.word	0x200009d8

08005eac <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005eac:	b580      	push	{r7, lr}
 8005eae:	b084      	sub	sp, #16
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005eb4:	2300      	movs	r3, #0
 8005eb6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d010      	beq.n	8005ee0 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ebe:	4b0d      	ldr	r3, [pc, #52]	; (8005ef4 <vTaskDelay+0x48>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d001      	beq.n	8005eca <vTaskDelay+0x1e>
 8005ec6:	b672      	cpsid	i
 8005ec8:	e7fe      	b.n	8005ec8 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8005eca:	f000 f873 	bl	8005fb4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2100      	movs	r1, #0
 8005ed2:	0018      	movs	r0, r3
 8005ed4:	f000 fc72 	bl	80067bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ed8:	f000 f878 	bl	8005fcc <xTaskResumeAll>
 8005edc:	0003      	movs	r3, r0
 8005ede:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8005ee6:	f001 f85b 	bl	8006fa0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005eea:	46c0      	nop			; (mov r8, r8)
 8005eec:	46bd      	mov	sp, r7
 8005eee:	b004      	add	sp, #16
 8005ef0:	bd80      	pop	{r7, pc}
 8005ef2:	46c0      	nop			; (mov r8, r8)
 8005ef4:	20000ed0 	.word	0x20000ed0

08005ef8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005ef8:	b590      	push	{r4, r7, lr}
 8005efa:	b089      	sub	sp, #36	; 0x24
 8005efc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005efe:	2300      	movs	r3, #0
 8005f00:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005f02:	2300      	movs	r3, #0
 8005f04:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005f06:	003a      	movs	r2, r7
 8005f08:	1d39      	adds	r1, r7, #4
 8005f0a:	2308      	movs	r3, #8
 8005f0c:	18fb      	adds	r3, r7, r3
 8005f0e:	0018      	movs	r0, r3
 8005f10:	f7ff f92e 	bl	8005170 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005f14:	683c      	ldr	r4, [r7, #0]
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	68ba      	ldr	r2, [r7, #8]
 8005f1a:	491e      	ldr	r1, [pc, #120]	; (8005f94 <vTaskStartScheduler+0x9c>)
 8005f1c:	481e      	ldr	r0, [pc, #120]	; (8005f98 <vTaskStartScheduler+0xa0>)
 8005f1e:	9202      	str	r2, [sp, #8]
 8005f20:	9301      	str	r3, [sp, #4]
 8005f22:	2300      	movs	r3, #0
 8005f24:	9300      	str	r3, [sp, #0]
 8005f26:	2300      	movs	r3, #0
 8005f28:	0022      	movs	r2, r4
 8005f2a:	f7ff fe26 	bl	8005b7a <xTaskCreateStatic>
 8005f2e:	0002      	movs	r2, r0
 8005f30:	4b1a      	ldr	r3, [pc, #104]	; (8005f9c <vTaskStartScheduler+0xa4>)
 8005f32:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005f34:	4b19      	ldr	r3, [pc, #100]	; (8005f9c <vTaskStartScheduler+0xa4>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d002      	beq.n	8005f42 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005f3c:	2301      	movs	r3, #1
 8005f3e:	60fb      	str	r3, [r7, #12]
 8005f40:	e001      	b.n	8005f46 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005f42:	2300      	movs	r3, #0
 8005f44:	60fb      	str	r3, [r7, #12]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2b01      	cmp	r3, #1
 8005f4a:	d103      	bne.n	8005f54 <vTaskStartScheduler+0x5c>
		{
			xReturn = xTimerCreateTimerTask();
 8005f4c:	f000 fc8a 	bl	8006864 <xTimerCreateTimerTask>
 8005f50:	0003      	movs	r3, r0
 8005f52:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2b01      	cmp	r3, #1
 8005f58:	d113      	bne.n	8005f82 <vTaskStartScheduler+0x8a>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8005f5a:	b672      	cpsid	i
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005f5c:	4b10      	ldr	r3, [pc, #64]	; (8005fa0 <vTaskStartScheduler+0xa8>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	3354      	adds	r3, #84	; 0x54
 8005f62:	001a      	movs	r2, r3
 8005f64:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <vTaskStartScheduler+0xac>)
 8005f66:	601a      	str	r2, [r3, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005f68:	4b0f      	ldr	r3, [pc, #60]	; (8005fa8 <vTaskStartScheduler+0xb0>)
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	4252      	negs	r2, r2
 8005f6e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005f70:	4b0e      	ldr	r3, [pc, #56]	; (8005fac <vTaskStartScheduler+0xb4>)
 8005f72:	2201      	movs	r2, #1
 8005f74:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005f76:	4b0e      	ldr	r3, [pc, #56]	; (8005fb0 <vTaskStartScheduler+0xb8>)
 8005f78:	2200      	movs	r2, #0
 8005f7a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005f7c:	f000 ffec 	bl	8006f58 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005f80:	e004      	b.n	8005f8c <vTaskStartScheduler+0x94>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	d101      	bne.n	8005f8c <vTaskStartScheduler+0x94>
 8005f88:	b672      	cpsid	i
 8005f8a:	e7fe      	b.n	8005f8a <vTaskStartScheduler+0x92>
}
 8005f8c:	46c0      	nop			; (mov r8, r8)
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	b005      	add	sp, #20
 8005f92:	bd90      	pop	{r4, r7, pc}
 8005f94:	08007664 	.word	0x08007664
 8005f98:	08006531 	.word	0x08006531
 8005f9c:	20000ecc 	.word	0x20000ecc
 8005fa0:	200009d4 	.word	0x200009d4
 8005fa4:	2000005c 	.word	0x2000005c
 8005fa8:	20000ec8 	.word	0x20000ec8
 8005fac:	20000eb4 	.word	0x20000eb4
 8005fb0:	20000eac 	.word	0x20000eac

08005fb4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005fb8:	4b03      	ldr	r3, [pc, #12]	; (8005fc8 <vTaskSuspendAll+0x14>)
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	1c5a      	adds	r2, r3, #1
 8005fbe:	4b02      	ldr	r3, [pc, #8]	; (8005fc8 <vTaskSuspendAll+0x14>)
 8005fc0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005fc2:	46c0      	nop			; (mov r8, r8)
 8005fc4:	46bd      	mov	sp, r7
 8005fc6:	bd80      	pop	{r7, pc}
 8005fc8:	20000ed0 	.word	0x20000ed0

08005fcc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b084      	sub	sp, #16
 8005fd0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005fd6:	2300      	movs	r3, #0
 8005fd8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005fda:	4b3a      	ldr	r3, [pc, #232]	; (80060c4 <xTaskResumeAll+0xf8>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d101      	bne.n	8005fe6 <xTaskResumeAll+0x1a>
 8005fe2:	b672      	cpsid	i
 8005fe4:	e7fe      	b.n	8005fe4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005fe6:	f000 ffeb 	bl	8006fc0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005fea:	4b36      	ldr	r3, [pc, #216]	; (80060c4 <xTaskResumeAll+0xf8>)
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	1e5a      	subs	r2, r3, #1
 8005ff0:	4b34      	ldr	r3, [pc, #208]	; (80060c4 <xTaskResumeAll+0xf8>)
 8005ff2:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ff4:	4b33      	ldr	r3, [pc, #204]	; (80060c4 <xTaskResumeAll+0xf8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d15b      	bne.n	80060b4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005ffc:	4b32      	ldr	r3, [pc, #200]	; (80060c8 <xTaskResumeAll+0xfc>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d057      	beq.n	80060b4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006004:	e02f      	b.n	8006066 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006006:	4b31      	ldr	r3, [pc, #196]	; (80060cc <xTaskResumeAll+0x100>)
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	68db      	ldr	r3, [r3, #12]
 800600c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	3318      	adds	r3, #24
 8006012:	0018      	movs	r0, r3
 8006014:	f7ff f95d 	bl	80052d2 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	3304      	adds	r3, #4
 800601c:	0018      	movs	r0, r3
 800601e:	f7ff f958 	bl	80052d2 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006026:	4b2a      	ldr	r3, [pc, #168]	; (80060d0 <xTaskResumeAll+0x104>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d903      	bls.n	8006036 <xTaskResumeAll+0x6a>
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006032:	4b27      	ldr	r3, [pc, #156]	; (80060d0 <xTaskResumeAll+0x104>)
 8006034:	601a      	str	r2, [r3, #0]
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800603a:	0013      	movs	r3, r2
 800603c:	009b      	lsls	r3, r3, #2
 800603e:	189b      	adds	r3, r3, r2
 8006040:	009b      	lsls	r3, r3, #2
 8006042:	4a24      	ldr	r2, [pc, #144]	; (80060d4 <xTaskResumeAll+0x108>)
 8006044:	189a      	adds	r2, r3, r2
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	3304      	adds	r3, #4
 800604a:	0019      	movs	r1, r3
 800604c:	0010      	movs	r0, r2
 800604e:	f7ff f8e8 	bl	8005222 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006056:	4b20      	ldr	r3, [pc, #128]	; (80060d8 <xTaskResumeAll+0x10c>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800605c:	429a      	cmp	r2, r3
 800605e:	d302      	bcc.n	8006066 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8006060:	4b1e      	ldr	r3, [pc, #120]	; (80060dc <xTaskResumeAll+0x110>)
 8006062:	2201      	movs	r2, #1
 8006064:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006066:	4b19      	ldr	r3, [pc, #100]	; (80060cc <xTaskResumeAll+0x100>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d1cb      	bne.n	8006006 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	2b00      	cmp	r3, #0
 8006072:	d001      	beq.n	8006078 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006074:	f000 fb0c 	bl	8006690 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006078:	4b19      	ldr	r3, [pc, #100]	; (80060e0 <xTaskResumeAll+0x114>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00f      	beq.n	80060a4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006084:	f000 f83c 	bl	8006100 <xTaskIncrementTick>
 8006088:	1e03      	subs	r3, r0, #0
 800608a:	d002      	beq.n	8006092 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800608c:	4b13      	ldr	r3, [pc, #76]	; (80060dc <xTaskResumeAll+0x110>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	3b01      	subs	r3, #1
 8006096:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1f2      	bne.n	8006084 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800609e:	4b10      	ldr	r3, [pc, #64]	; (80060e0 <xTaskResumeAll+0x114>)
 80060a0:	2200      	movs	r2, #0
 80060a2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80060a4:	4b0d      	ldr	r3, [pc, #52]	; (80060dc <xTaskResumeAll+0x110>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d003      	beq.n	80060b4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80060ac:	2301      	movs	r3, #1
 80060ae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80060b0:	f000 ff76 	bl	8006fa0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80060b4:	f000 ff96 	bl	8006fe4 <vPortExitCritical>

	return xAlreadyYielded;
 80060b8:	68bb      	ldr	r3, [r7, #8]
}
 80060ba:	0018      	movs	r0, r3
 80060bc:	46bd      	mov	sp, r7
 80060be:	b004      	add	sp, #16
 80060c0:	bd80      	pop	{r7, pc}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	20000ed0 	.word	0x20000ed0
 80060c8:	20000ea8 	.word	0x20000ea8
 80060cc:	20000e68 	.word	0x20000e68
 80060d0:	20000eb0 	.word	0x20000eb0
 80060d4:	200009d8 	.word	0x200009d8
 80060d8:	200009d4 	.word	0x200009d4
 80060dc:	20000ebc 	.word	0x20000ebc
 80060e0:	20000eb8 	.word	0x20000eb8

080060e4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b082      	sub	sp, #8
 80060e8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80060ea:	4b04      	ldr	r3, [pc, #16]	; (80060fc <xTaskGetTickCount+0x18>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80060f0:	687b      	ldr	r3, [r7, #4]
}
 80060f2:	0018      	movs	r0, r3
 80060f4:	46bd      	mov	sp, r7
 80060f6:	b002      	add	sp, #8
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	20000eac 	.word	0x20000eac

08006100 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b086      	sub	sp, #24
 8006104:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800610a:	4b4a      	ldr	r3, [pc, #296]	; (8006234 <xTaskIncrementTick+0x134>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d000      	beq.n	8006114 <xTaskIncrementTick+0x14>
 8006112:	e084      	b.n	800621e <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006114:	4b48      	ldr	r3, [pc, #288]	; (8006238 <xTaskIncrementTick+0x138>)
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	3301      	adds	r3, #1
 800611a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800611c:	4b46      	ldr	r3, [pc, #280]	; (8006238 <xTaskIncrementTick+0x138>)
 800611e:	693a      	ldr	r2, [r7, #16]
 8006120:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	2b00      	cmp	r3, #0
 8006126:	d117      	bne.n	8006158 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8006128:	4b44      	ldr	r3, [pc, #272]	; (800623c <xTaskIncrementTick+0x13c>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d001      	beq.n	8006136 <xTaskIncrementTick+0x36>
 8006132:	b672      	cpsid	i
 8006134:	e7fe      	b.n	8006134 <xTaskIncrementTick+0x34>
 8006136:	4b41      	ldr	r3, [pc, #260]	; (800623c <xTaskIncrementTick+0x13c>)
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	60fb      	str	r3, [r7, #12]
 800613c:	4b40      	ldr	r3, [pc, #256]	; (8006240 <xTaskIncrementTick+0x140>)
 800613e:	681a      	ldr	r2, [r3, #0]
 8006140:	4b3e      	ldr	r3, [pc, #248]	; (800623c <xTaskIncrementTick+0x13c>)
 8006142:	601a      	str	r2, [r3, #0]
 8006144:	4b3e      	ldr	r3, [pc, #248]	; (8006240 <xTaskIncrementTick+0x140>)
 8006146:	68fa      	ldr	r2, [r7, #12]
 8006148:	601a      	str	r2, [r3, #0]
 800614a:	4b3e      	ldr	r3, [pc, #248]	; (8006244 <xTaskIncrementTick+0x144>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	1c5a      	adds	r2, r3, #1
 8006150:	4b3c      	ldr	r3, [pc, #240]	; (8006244 <xTaskIncrementTick+0x144>)
 8006152:	601a      	str	r2, [r3, #0]
 8006154:	f000 fa9c 	bl	8006690 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006158:	4b3b      	ldr	r3, [pc, #236]	; (8006248 <xTaskIncrementTick+0x148>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	693a      	ldr	r2, [r7, #16]
 800615e:	429a      	cmp	r2, r3
 8006160:	d349      	bcc.n	80061f6 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006162:	4b36      	ldr	r3, [pc, #216]	; (800623c <xTaskIncrementTick+0x13c>)
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d104      	bne.n	8006176 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800616c:	4b36      	ldr	r3, [pc, #216]	; (8006248 <xTaskIncrementTick+0x148>)
 800616e:	2201      	movs	r2, #1
 8006170:	4252      	negs	r2, r2
 8006172:	601a      	str	r2, [r3, #0]
					break;
 8006174:	e03f      	b.n	80061f6 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006176:	4b31      	ldr	r3, [pc, #196]	; (800623c <xTaskIncrementTick+0x13c>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	68db      	ldr	r3, [r3, #12]
 800617c:	68db      	ldr	r3, [r3, #12]
 800617e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	429a      	cmp	r2, r3
 800618c:	d203      	bcs.n	8006196 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800618e:	4b2e      	ldr	r3, [pc, #184]	; (8006248 <xTaskIncrementTick+0x148>)
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006194:	e02f      	b.n	80061f6 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	3304      	adds	r3, #4
 800619a:	0018      	movs	r0, r3
 800619c:	f7ff f899 	bl	80052d2 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80061a0:	68bb      	ldr	r3, [r7, #8]
 80061a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d004      	beq.n	80061b2 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	3318      	adds	r3, #24
 80061ac:	0018      	movs	r0, r3
 80061ae:	f7ff f890 	bl	80052d2 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80061b2:	68bb      	ldr	r3, [r7, #8]
 80061b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061b6:	4b25      	ldr	r3, [pc, #148]	; (800624c <xTaskIncrementTick+0x14c>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	429a      	cmp	r2, r3
 80061bc:	d903      	bls.n	80061c6 <xTaskIncrementTick+0xc6>
 80061be:	68bb      	ldr	r3, [r7, #8]
 80061c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061c2:	4b22      	ldr	r3, [pc, #136]	; (800624c <xTaskIncrementTick+0x14c>)
 80061c4:	601a      	str	r2, [r3, #0]
 80061c6:	68bb      	ldr	r3, [r7, #8]
 80061c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061ca:	0013      	movs	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	189b      	adds	r3, r3, r2
 80061d0:	009b      	lsls	r3, r3, #2
 80061d2:	4a1f      	ldr	r2, [pc, #124]	; (8006250 <xTaskIncrementTick+0x150>)
 80061d4:	189a      	adds	r2, r3, r2
 80061d6:	68bb      	ldr	r3, [r7, #8]
 80061d8:	3304      	adds	r3, #4
 80061da:	0019      	movs	r1, r3
 80061dc:	0010      	movs	r0, r2
 80061de:	f7ff f820 	bl	8005222 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80061e2:	68bb      	ldr	r3, [r7, #8]
 80061e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061e6:	4b1b      	ldr	r3, [pc, #108]	; (8006254 <xTaskIncrementTick+0x154>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ec:	429a      	cmp	r2, r3
 80061ee:	d3b8      	bcc.n	8006162 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80061f0:	2301      	movs	r3, #1
 80061f2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061f4:	e7b5      	b.n	8006162 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80061f6:	4b17      	ldr	r3, [pc, #92]	; (8006254 <xTaskIncrementTick+0x154>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061fc:	4914      	ldr	r1, [pc, #80]	; (8006250 <xTaskIncrementTick+0x150>)
 80061fe:	0013      	movs	r3, r2
 8006200:	009b      	lsls	r3, r3, #2
 8006202:	189b      	adds	r3, r3, r2
 8006204:	009b      	lsls	r3, r3, #2
 8006206:	585b      	ldr	r3, [r3, r1]
 8006208:	2b01      	cmp	r3, #1
 800620a:	d901      	bls.n	8006210 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800620c:	2301      	movs	r3, #1
 800620e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006210:	4b11      	ldr	r3, [pc, #68]	; (8006258 <xTaskIncrementTick+0x158>)
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	2b00      	cmp	r3, #0
 8006216:	d007      	beq.n	8006228 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 8006218:	2301      	movs	r3, #1
 800621a:	617b      	str	r3, [r7, #20]
 800621c:	e004      	b.n	8006228 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800621e:	4b0f      	ldr	r3, [pc, #60]	; (800625c <xTaskIncrementTick+0x15c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	1c5a      	adds	r2, r3, #1
 8006224:	4b0d      	ldr	r3, [pc, #52]	; (800625c <xTaskIncrementTick+0x15c>)
 8006226:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006228:	697b      	ldr	r3, [r7, #20]
}
 800622a:	0018      	movs	r0, r3
 800622c:	46bd      	mov	sp, r7
 800622e:	b006      	add	sp, #24
 8006230:	bd80      	pop	{r7, pc}
 8006232:	46c0      	nop			; (mov r8, r8)
 8006234:	20000ed0 	.word	0x20000ed0
 8006238:	20000eac 	.word	0x20000eac
 800623c:	20000e60 	.word	0x20000e60
 8006240:	20000e64 	.word	0x20000e64
 8006244:	20000ec0 	.word	0x20000ec0
 8006248:	20000ec8 	.word	0x20000ec8
 800624c:	20000eb0 	.word	0x20000eb0
 8006250:	200009d8 	.word	0x200009d8
 8006254:	200009d4 	.word	0x200009d4
 8006258:	20000ebc 	.word	0x20000ebc
 800625c:	20000eb8 	.word	0x20000eb8

08006260 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006260:	b580      	push	{r7, lr}
 8006262:	b082      	sub	sp, #8
 8006264:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006266:	4b25      	ldr	r3, [pc, #148]	; (80062fc <vTaskSwitchContext+0x9c>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800626e:	4b24      	ldr	r3, [pc, #144]	; (8006300 <vTaskSwitchContext+0xa0>)
 8006270:	2201      	movs	r2, #1
 8006272:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006274:	e03d      	b.n	80062f2 <vTaskSwitchContext+0x92>
		xYieldPending = pdFALSE;
 8006276:	4b22      	ldr	r3, [pc, #136]	; (8006300 <vTaskSwitchContext+0xa0>)
 8006278:	2200      	movs	r2, #0
 800627a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800627c:	4b21      	ldr	r3, [pc, #132]	; (8006304 <vTaskSwitchContext+0xa4>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	607b      	str	r3, [r7, #4]
 8006282:	e007      	b.n	8006294 <vTaskSwitchContext+0x34>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	2b00      	cmp	r3, #0
 8006288:	d101      	bne.n	800628e <vTaskSwitchContext+0x2e>
 800628a:	b672      	cpsid	i
 800628c:	e7fe      	b.n	800628c <vTaskSwitchContext+0x2c>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	3b01      	subs	r3, #1
 8006292:	607b      	str	r3, [r7, #4]
 8006294:	491c      	ldr	r1, [pc, #112]	; (8006308 <vTaskSwitchContext+0xa8>)
 8006296:	687a      	ldr	r2, [r7, #4]
 8006298:	0013      	movs	r3, r2
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	189b      	adds	r3, r3, r2
 800629e:	009b      	lsls	r3, r3, #2
 80062a0:	585b      	ldr	r3, [r3, r1]
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d0ee      	beq.n	8006284 <vTaskSwitchContext+0x24>
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	0013      	movs	r3, r2
 80062aa:	009b      	lsls	r3, r3, #2
 80062ac:	189b      	adds	r3, r3, r2
 80062ae:	009b      	lsls	r3, r3, #2
 80062b0:	4a15      	ldr	r2, [pc, #84]	; (8006308 <vTaskSwitchContext+0xa8>)
 80062b2:	189b      	adds	r3, r3, r2
 80062b4:	603b      	str	r3, [r7, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	685a      	ldr	r2, [r3, #4]
 80062bc:	683b      	ldr	r3, [r7, #0]
 80062be:	605a      	str	r2, [r3, #4]
 80062c0:	683b      	ldr	r3, [r7, #0]
 80062c2:	685a      	ldr	r2, [r3, #4]
 80062c4:	683b      	ldr	r3, [r7, #0]
 80062c6:	3308      	adds	r3, #8
 80062c8:	429a      	cmp	r2, r3
 80062ca:	d104      	bne.n	80062d6 <vTaskSwitchContext+0x76>
 80062cc:	683b      	ldr	r3, [r7, #0]
 80062ce:	685b      	ldr	r3, [r3, #4]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	683b      	ldr	r3, [r7, #0]
 80062d4:	605a      	str	r2, [r3, #4]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	68da      	ldr	r2, [r3, #12]
 80062dc:	4b0b      	ldr	r3, [pc, #44]	; (800630c <vTaskSwitchContext+0xac>)
 80062de:	601a      	str	r2, [r3, #0]
 80062e0:	4b08      	ldr	r3, [pc, #32]	; (8006304 <vTaskSwitchContext+0xa4>)
 80062e2:	687a      	ldr	r2, [r7, #4]
 80062e4:	601a      	str	r2, [r3, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80062e6:	4b09      	ldr	r3, [pc, #36]	; (800630c <vTaskSwitchContext+0xac>)
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	3354      	adds	r3, #84	; 0x54
 80062ec:	001a      	movs	r2, r3
 80062ee:	4b08      	ldr	r3, [pc, #32]	; (8006310 <vTaskSwitchContext+0xb0>)
 80062f0:	601a      	str	r2, [r3, #0]
}
 80062f2:	46c0      	nop			; (mov r8, r8)
 80062f4:	46bd      	mov	sp, r7
 80062f6:	b002      	add	sp, #8
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	46c0      	nop			; (mov r8, r8)
 80062fc:	20000ed0 	.word	0x20000ed0
 8006300:	20000ebc 	.word	0x20000ebc
 8006304:	20000eb0 	.word	0x20000eb0
 8006308:	200009d8 	.word	0x200009d8
 800630c:	200009d4 	.word	0x200009d4
 8006310:	2000005c 	.word	0x2000005c

08006314 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006314:	b580      	push	{r7, lr}
 8006316:	b082      	sub	sp, #8
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
 800631c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d101      	bne.n	8006328 <vTaskPlaceOnEventList+0x14>
 8006324:	b672      	cpsid	i
 8006326:	e7fe      	b.n	8006326 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006328:	4b08      	ldr	r3, [pc, #32]	; (800634c <vTaskPlaceOnEventList+0x38>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	3318      	adds	r3, #24
 800632e:	001a      	movs	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	0011      	movs	r1, r2
 8006334:	0018      	movs	r0, r3
 8006336:	f7fe ff96 	bl	8005266 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2101      	movs	r1, #1
 800633e:	0018      	movs	r0, r3
 8006340:	f000 fa3c 	bl	80067bc <prvAddCurrentTaskToDelayedList>
}
 8006344:	46c0      	nop			; (mov r8, r8)
 8006346:	46bd      	mov	sp, r7
 8006348:	b002      	add	sp, #8
 800634a:	bd80      	pop	{r7, pc}
 800634c:	200009d4 	.word	0x200009d4

08006350 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006350:	b580      	push	{r7, lr}
 8006352:	b084      	sub	sp, #16
 8006354:	af00      	add	r7, sp, #0
 8006356:	60f8      	str	r0, [r7, #12]
 8006358:	60b9      	str	r1, [r7, #8]
 800635a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800635c:	68fb      	ldr	r3, [r7, #12]
 800635e:	2b00      	cmp	r3, #0
 8006360:	d101      	bne.n	8006366 <vTaskPlaceOnEventListRestricted+0x16>
 8006362:	b672      	cpsid	i
 8006364:	e7fe      	b.n	8006364 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006366:	4b0c      	ldr	r3, [pc, #48]	; (8006398 <vTaskPlaceOnEventListRestricted+0x48>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	3318      	adds	r3, #24
 800636c:	001a      	movs	r2, r3
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	0011      	movs	r1, r2
 8006372:	0018      	movs	r0, r3
 8006374:	f7fe ff55 	bl	8005222 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d002      	beq.n	8006384 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800637e:	2301      	movs	r3, #1
 8006380:	425b      	negs	r3, r3
 8006382:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006384:	687a      	ldr	r2, [r7, #4]
 8006386:	68bb      	ldr	r3, [r7, #8]
 8006388:	0011      	movs	r1, r2
 800638a:	0018      	movs	r0, r3
 800638c:	f000 fa16 	bl	80067bc <prvAddCurrentTaskToDelayedList>
	}
 8006390:	46c0      	nop			; (mov r8, r8)
 8006392:	46bd      	mov	sp, r7
 8006394:	b004      	add	sp, #16
 8006396:	bd80      	pop	{r7, pc}
 8006398:	200009d4 	.word	0x200009d4

0800639c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800639c:	b580      	push	{r7, lr}
 800639e:	b084      	sub	sp, #16
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	68db      	ldr	r3, [r3, #12]
 80063aa:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b00      	cmp	r3, #0
 80063b0:	d101      	bne.n	80063b6 <xTaskRemoveFromEventList+0x1a>
 80063b2:	b672      	cpsid	i
 80063b4:	e7fe      	b.n	80063b4 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80063b6:	68bb      	ldr	r3, [r7, #8]
 80063b8:	3318      	adds	r3, #24
 80063ba:	0018      	movs	r0, r3
 80063bc:	f7fe ff89 	bl	80052d2 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80063c0:	4b1e      	ldr	r3, [pc, #120]	; (800643c <xTaskRemoveFromEventList+0xa0>)
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d11d      	bne.n	8006404 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	3304      	adds	r3, #4
 80063cc:	0018      	movs	r0, r3
 80063ce:	f7fe ff80 	bl	80052d2 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80063d2:	68bb      	ldr	r3, [r7, #8]
 80063d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063d6:	4b1a      	ldr	r3, [pc, #104]	; (8006440 <xTaskRemoveFromEventList+0xa4>)
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d903      	bls.n	80063e6 <xTaskRemoveFromEventList+0x4a>
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063e2:	4b17      	ldr	r3, [pc, #92]	; (8006440 <xTaskRemoveFromEventList+0xa4>)
 80063e4:	601a      	str	r2, [r3, #0]
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063ea:	0013      	movs	r3, r2
 80063ec:	009b      	lsls	r3, r3, #2
 80063ee:	189b      	adds	r3, r3, r2
 80063f0:	009b      	lsls	r3, r3, #2
 80063f2:	4a14      	ldr	r2, [pc, #80]	; (8006444 <xTaskRemoveFromEventList+0xa8>)
 80063f4:	189a      	adds	r2, r3, r2
 80063f6:	68bb      	ldr	r3, [r7, #8]
 80063f8:	3304      	adds	r3, #4
 80063fa:	0019      	movs	r1, r3
 80063fc:	0010      	movs	r0, r2
 80063fe:	f7fe ff10 	bl	8005222 <vListInsertEnd>
 8006402:	e007      	b.n	8006414 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006404:	68bb      	ldr	r3, [r7, #8]
 8006406:	3318      	adds	r3, #24
 8006408:	001a      	movs	r2, r3
 800640a:	4b0f      	ldr	r3, [pc, #60]	; (8006448 <xTaskRemoveFromEventList+0xac>)
 800640c:	0011      	movs	r1, r2
 800640e:	0018      	movs	r0, r3
 8006410:	f7fe ff07 	bl	8005222 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006414:	68bb      	ldr	r3, [r7, #8]
 8006416:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006418:	4b0c      	ldr	r3, [pc, #48]	; (800644c <xTaskRemoveFromEventList+0xb0>)
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800641e:	429a      	cmp	r2, r3
 8006420:	d905      	bls.n	800642e <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006422:	2301      	movs	r3, #1
 8006424:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006426:	4b0a      	ldr	r3, [pc, #40]	; (8006450 <xTaskRemoveFromEventList+0xb4>)
 8006428:	2201      	movs	r2, #1
 800642a:	601a      	str	r2, [r3, #0]
 800642c:	e001      	b.n	8006432 <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800642e:	2300      	movs	r3, #0
 8006430:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 8006432:	68fb      	ldr	r3, [r7, #12]
}
 8006434:	0018      	movs	r0, r3
 8006436:	46bd      	mov	sp, r7
 8006438:	b004      	add	sp, #16
 800643a:	bd80      	pop	{r7, pc}
 800643c:	20000ed0 	.word	0x20000ed0
 8006440:	20000eb0 	.word	0x20000eb0
 8006444:	200009d8 	.word	0x200009d8
 8006448:	20000e68 	.word	0x20000e68
 800644c:	200009d4 	.word	0x200009d4
 8006450:	20000ebc 	.word	0x20000ebc

08006454 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800645c:	4b05      	ldr	r3, [pc, #20]	; (8006474 <vTaskInternalSetTimeOutState+0x20>)
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006464:	4b04      	ldr	r3, [pc, #16]	; (8006478 <vTaskInternalSetTimeOutState+0x24>)
 8006466:	681a      	ldr	r2, [r3, #0]
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	605a      	str	r2, [r3, #4]
}
 800646c:	46c0      	nop			; (mov r8, r8)
 800646e:	46bd      	mov	sp, r7
 8006470:	b002      	add	sp, #8
 8006472:	bd80      	pop	{r7, pc}
 8006474:	20000ec0 	.word	0x20000ec0
 8006478:	20000eac 	.word	0x20000eac

0800647c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b086      	sub	sp, #24
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
 8006484:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d101      	bne.n	8006490 <xTaskCheckForTimeOut+0x14>
 800648c:	b672      	cpsid	i
 800648e:	e7fe      	b.n	800648e <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 8006490:	683b      	ldr	r3, [r7, #0]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d101      	bne.n	800649a <xTaskCheckForTimeOut+0x1e>
 8006496:	b672      	cpsid	i
 8006498:	e7fe      	b.n	8006498 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800649a:	f000 fd91 	bl	8006fc0 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800649e:	4b1d      	ldr	r3, [pc, #116]	; (8006514 <xTaskCheckForTimeOut+0x98>)
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	685b      	ldr	r3, [r3, #4]
 80064a8:	693a      	ldr	r2, [r7, #16]
 80064aa:	1ad3      	subs	r3, r2, r3
 80064ac:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	3301      	adds	r3, #1
 80064b4:	d102      	bne.n	80064bc <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80064b6:	2300      	movs	r3, #0
 80064b8:	617b      	str	r3, [r7, #20]
 80064ba:	e024      	b.n	8006506 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681a      	ldr	r2, [r3, #0]
 80064c0:	4b15      	ldr	r3, [pc, #84]	; (8006518 <xTaskCheckForTimeOut+0x9c>)
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	429a      	cmp	r2, r3
 80064c6:	d007      	beq.n	80064d8 <xTaskCheckForTimeOut+0x5c>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	685b      	ldr	r3, [r3, #4]
 80064cc:	693a      	ldr	r2, [r7, #16]
 80064ce:	429a      	cmp	r2, r3
 80064d0:	d302      	bcc.n	80064d8 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80064d2:	2301      	movs	r3, #1
 80064d4:	617b      	str	r3, [r7, #20]
 80064d6:	e016      	b.n	8006506 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	429a      	cmp	r2, r3
 80064e0:	d20c      	bcs.n	80064fc <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80064e2:	683b      	ldr	r3, [r7, #0]
 80064e4:	681a      	ldr	r2, [r3, #0]
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	1ad2      	subs	r2, r2, r3
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	0018      	movs	r0, r3
 80064f2:	f7ff ffaf 	bl	8006454 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80064f6:	2300      	movs	r3, #0
 80064f8:	617b      	str	r3, [r7, #20]
 80064fa:	e004      	b.n	8006506 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 80064fc:	683b      	ldr	r3, [r7, #0]
 80064fe:	2200      	movs	r2, #0
 8006500:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006502:	2301      	movs	r3, #1
 8006504:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 8006506:	f000 fd6d 	bl	8006fe4 <vPortExitCritical>

	return xReturn;
 800650a:	697b      	ldr	r3, [r7, #20]
}
 800650c:	0018      	movs	r0, r3
 800650e:	46bd      	mov	sp, r7
 8006510:	b006      	add	sp, #24
 8006512:	bd80      	pop	{r7, pc}
 8006514:	20000eac 	.word	0x20000eac
 8006518:	20000ec0 	.word	0x20000ec0

0800651c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800651c:	b580      	push	{r7, lr}
 800651e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006520:	4b02      	ldr	r3, [pc, #8]	; (800652c <vTaskMissedYield+0x10>)
 8006522:	2201      	movs	r2, #1
 8006524:	601a      	str	r2, [r3, #0]
}
 8006526:	46c0      	nop			; (mov r8, r8)
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000ebc 	.word	0x20000ebc

08006530 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006538:	f000 f84e 	bl	80065d8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800653c:	4b03      	ldr	r3, [pc, #12]	; (800654c <prvIdleTask+0x1c>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b01      	cmp	r3, #1
 8006542:	d9f9      	bls.n	8006538 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006544:	f000 fd2c 	bl	8006fa0 <vPortYield>
		prvCheckTasksWaitingTermination();
 8006548:	e7f6      	b.n	8006538 <prvIdleTask+0x8>
 800654a:	46c0      	nop			; (mov r8, r8)
 800654c:	200009d8 	.word	0x200009d8

08006550 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006556:	2300      	movs	r3, #0
 8006558:	607b      	str	r3, [r7, #4]
 800655a:	e00c      	b.n	8006576 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	0013      	movs	r3, r2
 8006560:	009b      	lsls	r3, r3, #2
 8006562:	189b      	adds	r3, r3, r2
 8006564:	009b      	lsls	r3, r3, #2
 8006566:	4a14      	ldr	r2, [pc, #80]	; (80065b8 <prvInitialiseTaskLists+0x68>)
 8006568:	189b      	adds	r3, r3, r2
 800656a:	0018      	movs	r0, r3
 800656c:	f7fe fe30 	bl	80051d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	3301      	adds	r3, #1
 8006574:	607b      	str	r3, [r7, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2b37      	cmp	r3, #55	; 0x37
 800657a:	d9ef      	bls.n	800655c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800657c:	4b0f      	ldr	r3, [pc, #60]	; (80065bc <prvInitialiseTaskLists+0x6c>)
 800657e:	0018      	movs	r0, r3
 8006580:	f7fe fe26 	bl	80051d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006584:	4b0e      	ldr	r3, [pc, #56]	; (80065c0 <prvInitialiseTaskLists+0x70>)
 8006586:	0018      	movs	r0, r3
 8006588:	f7fe fe22 	bl	80051d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800658c:	4b0d      	ldr	r3, [pc, #52]	; (80065c4 <prvInitialiseTaskLists+0x74>)
 800658e:	0018      	movs	r0, r3
 8006590:	f7fe fe1e 	bl	80051d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006594:	4b0c      	ldr	r3, [pc, #48]	; (80065c8 <prvInitialiseTaskLists+0x78>)
 8006596:	0018      	movs	r0, r3
 8006598:	f7fe fe1a 	bl	80051d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800659c:	4b0b      	ldr	r3, [pc, #44]	; (80065cc <prvInitialiseTaskLists+0x7c>)
 800659e:	0018      	movs	r0, r3
 80065a0:	f7fe fe16 	bl	80051d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80065a4:	4b0a      	ldr	r3, [pc, #40]	; (80065d0 <prvInitialiseTaskLists+0x80>)
 80065a6:	4a05      	ldr	r2, [pc, #20]	; (80065bc <prvInitialiseTaskLists+0x6c>)
 80065a8:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80065aa:	4b0a      	ldr	r3, [pc, #40]	; (80065d4 <prvInitialiseTaskLists+0x84>)
 80065ac:	4a04      	ldr	r2, [pc, #16]	; (80065c0 <prvInitialiseTaskLists+0x70>)
 80065ae:	601a      	str	r2, [r3, #0]
}
 80065b0:	46c0      	nop			; (mov r8, r8)
 80065b2:	46bd      	mov	sp, r7
 80065b4:	b002      	add	sp, #8
 80065b6:	bd80      	pop	{r7, pc}
 80065b8:	200009d8 	.word	0x200009d8
 80065bc:	20000e38 	.word	0x20000e38
 80065c0:	20000e4c 	.word	0x20000e4c
 80065c4:	20000e68 	.word	0x20000e68
 80065c8:	20000e7c 	.word	0x20000e7c
 80065cc:	20000e94 	.word	0x20000e94
 80065d0:	20000e60 	.word	0x20000e60
 80065d4:	20000e64 	.word	0x20000e64

080065d8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80065de:	e01a      	b.n	8006616 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80065e0:	f000 fcee 	bl	8006fc0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e4:	4b10      	ldr	r3, [pc, #64]	; (8006628 <prvCheckTasksWaitingTermination+0x50>)
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	3304      	adds	r3, #4
 80065f0:	0018      	movs	r0, r3
 80065f2:	f7fe fe6e 	bl	80052d2 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80065f6:	4b0d      	ldr	r3, [pc, #52]	; (800662c <prvCheckTasksWaitingTermination+0x54>)
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	1e5a      	subs	r2, r3, #1
 80065fc:	4b0b      	ldr	r3, [pc, #44]	; (800662c <prvCheckTasksWaitingTermination+0x54>)
 80065fe:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006600:	4b0b      	ldr	r3, [pc, #44]	; (8006630 <prvCheckTasksWaitingTermination+0x58>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	1e5a      	subs	r2, r3, #1
 8006606:	4b0a      	ldr	r3, [pc, #40]	; (8006630 <prvCheckTasksWaitingTermination+0x58>)
 8006608:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800660a:	f000 fceb 	bl	8006fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	0018      	movs	r0, r3
 8006612:	f000 f80f 	bl	8006634 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006616:	4b06      	ldr	r3, [pc, #24]	; (8006630 <prvCheckTasksWaitingTermination+0x58>)
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d1e0      	bne.n	80065e0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800661e:	46c0      	nop			; (mov r8, r8)
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}
 8006628:	20000e7c 	.word	0x20000e7c
 800662c:	20000ea8 	.word	0x20000ea8
 8006630:	20000e90 	.word	0x20000e90

08006634 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006634:	b580      	push	{r7, lr}
 8006636:	b082      	sub	sp, #8
 8006638:	af00      	add	r7, sp, #0
 800663a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	3354      	adds	r3, #84	; 0x54
 8006640:	0018      	movs	r0, r3
 8006642:	f000 ff0f 	bl	8007464 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	22a5      	movs	r2, #165	; 0xa5
 800664a:	5c9b      	ldrb	r3, [r3, r2]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d109      	bne.n	8006664 <prvDeleteTCB+0x30>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006654:	0018      	movs	r0, r3
 8006656:	f000 fdf7 	bl	8007248 <vPortFree>
				vPortFree( pxTCB );
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	0018      	movs	r0, r3
 800665e:	f000 fdf3 	bl	8007248 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006662:	e010      	b.n	8006686 <prvDeleteTCB+0x52>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	22a5      	movs	r2, #165	; 0xa5
 8006668:	5c9b      	ldrb	r3, [r3, r2]
 800666a:	2b01      	cmp	r3, #1
 800666c:	d104      	bne.n	8006678 <prvDeleteTCB+0x44>
				vPortFree( pxTCB );
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	0018      	movs	r0, r3
 8006672:	f000 fde9 	bl	8007248 <vPortFree>
	}
 8006676:	e006      	b.n	8006686 <prvDeleteTCB+0x52>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	22a5      	movs	r2, #165	; 0xa5
 800667c:	5c9b      	ldrb	r3, [r3, r2]
 800667e:	2b02      	cmp	r3, #2
 8006680:	d001      	beq.n	8006686 <prvDeleteTCB+0x52>
 8006682:	b672      	cpsid	i
 8006684:	e7fe      	b.n	8006684 <prvDeleteTCB+0x50>
	}
 8006686:	46c0      	nop			; (mov r8, r8)
 8006688:	46bd      	mov	sp, r7
 800668a:	b002      	add	sp, #8
 800668c:	bd80      	pop	{r7, pc}
	...

08006690 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006690:	b580      	push	{r7, lr}
 8006692:	b082      	sub	sp, #8
 8006694:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006696:	4b0b      	ldr	r3, [pc, #44]	; (80066c4 <prvResetNextTaskUnblockTime+0x34>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	2b00      	cmp	r3, #0
 800669e:	d104      	bne.n	80066aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80066a0:	4b09      	ldr	r3, [pc, #36]	; (80066c8 <prvResetNextTaskUnblockTime+0x38>)
 80066a2:	2201      	movs	r2, #1
 80066a4:	4252      	negs	r2, r2
 80066a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80066a8:	e008      	b.n	80066bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066aa:	4b06      	ldr	r3, [pc, #24]	; (80066c4 <prvResetNextTaskUnblockTime+0x34>)
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	68db      	ldr	r3, [r3, #12]
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	4b03      	ldr	r3, [pc, #12]	; (80066c8 <prvResetNextTaskUnblockTime+0x38>)
 80066ba:	601a      	str	r2, [r3, #0]
}
 80066bc:	46c0      	nop			; (mov r8, r8)
 80066be:	46bd      	mov	sp, r7
 80066c0:	b002      	add	sp, #8
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000e60 	.word	0x20000e60
 80066c8:	20000ec8 	.word	0x20000ec8

080066cc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80066cc:	b580      	push	{r7, lr}
 80066ce:	b082      	sub	sp, #8
 80066d0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80066d2:	4b0a      	ldr	r3, [pc, #40]	; (80066fc <xTaskGetSchedulerState+0x30>)
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d102      	bne.n	80066e0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80066da:	2301      	movs	r3, #1
 80066dc:	607b      	str	r3, [r7, #4]
 80066de:	e008      	b.n	80066f2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066e0:	4b07      	ldr	r3, [pc, #28]	; (8006700 <xTaskGetSchedulerState+0x34>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d102      	bne.n	80066ee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80066e8:	2302      	movs	r3, #2
 80066ea:	607b      	str	r3, [r7, #4]
 80066ec:	e001      	b.n	80066f2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80066ee:	2300      	movs	r3, #0
 80066f0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80066f2:	687b      	ldr	r3, [r7, #4]
	}
 80066f4:	0018      	movs	r0, r3
 80066f6:	46bd      	mov	sp, r7
 80066f8:	b002      	add	sp, #8
 80066fa:	bd80      	pop	{r7, pc}
 80066fc:	20000eb4 	.word	0x20000eb4
 8006700:	20000ed0 	.word	0x20000ed0

08006704 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006704:	b580      	push	{r7, lr}
 8006706:	b084      	sub	sp, #16
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006710:	2300      	movs	r3, #0
 8006712:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d044      	beq.n	80067a4 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800671a:	4b25      	ldr	r3, [pc, #148]	; (80067b0 <xTaskPriorityDisinherit+0xac>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	68ba      	ldr	r2, [r7, #8]
 8006720:	429a      	cmp	r2, r3
 8006722:	d001      	beq.n	8006728 <xTaskPriorityDisinherit+0x24>
 8006724:	b672      	cpsid	i
 8006726:	e7fe      	b.n	8006726 <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800672c:	2b00      	cmp	r3, #0
 800672e:	d101      	bne.n	8006734 <xTaskPriorityDisinherit+0x30>
 8006730:	b672      	cpsid	i
 8006732:	e7fe      	b.n	8006732 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006738:	1e5a      	subs	r2, r3, #1
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800673e:	68bb      	ldr	r3, [r7, #8]
 8006740:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006746:	429a      	cmp	r2, r3
 8006748:	d02c      	beq.n	80067a4 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800674e:	2b00      	cmp	r3, #0
 8006750:	d128      	bne.n	80067a4 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006752:	68bb      	ldr	r3, [r7, #8]
 8006754:	3304      	adds	r3, #4
 8006756:	0018      	movs	r0, r3
 8006758:	f7fe fdbb 	bl	80052d2 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006764:	68bb      	ldr	r3, [r7, #8]
 8006766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006768:	2238      	movs	r2, #56	; 0x38
 800676a:	1ad2      	subs	r2, r2, r3
 800676c:	68bb      	ldr	r3, [r7, #8]
 800676e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006770:	68bb      	ldr	r3, [r7, #8]
 8006772:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006774:	4b0f      	ldr	r3, [pc, #60]	; (80067b4 <xTaskPriorityDisinherit+0xb0>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	429a      	cmp	r2, r3
 800677a:	d903      	bls.n	8006784 <xTaskPriorityDisinherit+0x80>
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006780:	4b0c      	ldr	r3, [pc, #48]	; (80067b4 <xTaskPriorityDisinherit+0xb0>)
 8006782:	601a      	str	r2, [r3, #0]
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006788:	0013      	movs	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	189b      	adds	r3, r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	4a09      	ldr	r2, [pc, #36]	; (80067b8 <xTaskPriorityDisinherit+0xb4>)
 8006792:	189a      	adds	r2, r3, r2
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	3304      	adds	r3, #4
 8006798:	0019      	movs	r1, r3
 800679a:	0010      	movs	r0, r2
 800679c:	f7fe fd41 	bl	8005222 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80067a0:	2301      	movs	r3, #1
 80067a2:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80067a4:	68fb      	ldr	r3, [r7, #12]
	}
 80067a6:	0018      	movs	r0, r3
 80067a8:	46bd      	mov	sp, r7
 80067aa:	b004      	add	sp, #16
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	46c0      	nop			; (mov r8, r8)
 80067b0:	200009d4 	.word	0x200009d4
 80067b4:	20000eb0 	.word	0x20000eb0
 80067b8:	200009d8 	.word	0x200009d8

080067bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b084      	sub	sp, #16
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
 80067c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80067c6:	4b21      	ldr	r3, [pc, #132]	; (800684c <prvAddCurrentTaskToDelayedList+0x90>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80067cc:	4b20      	ldr	r3, [pc, #128]	; (8006850 <prvAddCurrentTaskToDelayedList+0x94>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	3304      	adds	r3, #4
 80067d2:	0018      	movs	r0, r3
 80067d4:	f7fe fd7d 	bl	80052d2 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3301      	adds	r3, #1
 80067dc:	d10b      	bne.n	80067f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d008      	beq.n	80067f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067e4:	4b1a      	ldr	r3, [pc, #104]	; (8006850 <prvAddCurrentTaskToDelayedList+0x94>)
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	4b1a      	ldr	r3, [pc, #104]	; (8006854 <prvAddCurrentTaskToDelayedList+0x98>)
 80067ec:	0011      	movs	r1, r2
 80067ee:	0018      	movs	r0, r3
 80067f0:	f7fe fd17 	bl	8005222 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067f4:	e026      	b.n	8006844 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	18d3      	adds	r3, r2, r3
 80067fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067fe:	4b14      	ldr	r3, [pc, #80]	; (8006850 <prvAddCurrentTaskToDelayedList+0x94>)
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	68ba      	ldr	r2, [r7, #8]
 8006804:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006806:	68ba      	ldr	r2, [r7, #8]
 8006808:	68fb      	ldr	r3, [r7, #12]
 800680a:	429a      	cmp	r2, r3
 800680c:	d209      	bcs.n	8006822 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800680e:	4b12      	ldr	r3, [pc, #72]	; (8006858 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	4b0f      	ldr	r3, [pc, #60]	; (8006850 <prvAddCurrentTaskToDelayedList+0x94>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	3304      	adds	r3, #4
 8006818:	0019      	movs	r1, r3
 800681a:	0010      	movs	r0, r2
 800681c:	f7fe fd23 	bl	8005266 <vListInsert>
}
 8006820:	e010      	b.n	8006844 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <prvAddCurrentTaskToDelayedList+0xa0>)
 8006824:	681a      	ldr	r2, [r3, #0]
 8006826:	4b0a      	ldr	r3, [pc, #40]	; (8006850 <prvAddCurrentTaskToDelayedList+0x94>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	3304      	adds	r3, #4
 800682c:	0019      	movs	r1, r3
 800682e:	0010      	movs	r0, r2
 8006830:	f7fe fd19 	bl	8005266 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006834:	4b0a      	ldr	r3, [pc, #40]	; (8006860 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	429a      	cmp	r2, r3
 800683c:	d202      	bcs.n	8006844 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800683e:	4b08      	ldr	r3, [pc, #32]	; (8006860 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006840:	68ba      	ldr	r2, [r7, #8]
 8006842:	601a      	str	r2, [r3, #0]
}
 8006844:	46c0      	nop			; (mov r8, r8)
 8006846:	46bd      	mov	sp, r7
 8006848:	b004      	add	sp, #16
 800684a:	bd80      	pop	{r7, pc}
 800684c:	20000eac 	.word	0x20000eac
 8006850:	200009d4 	.word	0x200009d4
 8006854:	20000e94 	.word	0x20000e94
 8006858:	20000e64 	.word	0x20000e64
 800685c:	20000e60 	.word	0x20000e60
 8006860:	20000ec8 	.word	0x20000ec8

08006864 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006864:	b590      	push	{r4, r7, lr}
 8006866:	b089      	sub	sp, #36	; 0x24
 8006868:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800686a:	2300      	movs	r3, #0
 800686c:	60fb      	str	r3, [r7, #12]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800686e:	f000 fac9 	bl	8006e04 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006872:	4b17      	ldr	r3, [pc, #92]	; (80068d0 <xTimerCreateTimerTask+0x6c>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	2b00      	cmp	r3, #0
 8006878:	d020      	beq.n	80068bc <xTimerCreateTimerTask+0x58>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800687a:	2300      	movs	r3, #0
 800687c:	60bb      	str	r3, [r7, #8]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800687e:	2300      	movs	r3, #0
 8006880:	607b      	str	r3, [r7, #4]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006882:	003a      	movs	r2, r7
 8006884:	1d39      	adds	r1, r7, #4
 8006886:	2308      	movs	r3, #8
 8006888:	18fb      	adds	r3, r7, r3
 800688a:	0018      	movs	r0, r3
 800688c:	f7fe fc88 	bl	80051a0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006890:	683c      	ldr	r4, [r7, #0]
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	68ba      	ldr	r2, [r7, #8]
 8006896:	490f      	ldr	r1, [pc, #60]	; (80068d4 <xTimerCreateTimerTask+0x70>)
 8006898:	480f      	ldr	r0, [pc, #60]	; (80068d8 <xTimerCreateTimerTask+0x74>)
 800689a:	9202      	str	r2, [sp, #8]
 800689c:	9301      	str	r3, [sp, #4]
 800689e:	2302      	movs	r3, #2
 80068a0:	9300      	str	r3, [sp, #0]
 80068a2:	2300      	movs	r3, #0
 80068a4:	0022      	movs	r2, r4
 80068a6:	f7ff f968 	bl	8005b7a <xTaskCreateStatic>
 80068aa:	0002      	movs	r2, r0
 80068ac:	4b0b      	ldr	r3, [pc, #44]	; (80068dc <xTimerCreateTimerTask+0x78>)
 80068ae:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80068b0:	4b0a      	ldr	r3, [pc, #40]	; (80068dc <xTimerCreateTimerTask+0x78>)
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d001      	beq.n	80068bc <xTimerCreateTimerTask+0x58>
			{
				xReturn = pdPASS;
 80068b8:	2301      	movs	r3, #1
 80068ba:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d101      	bne.n	80068c6 <xTimerCreateTimerTask+0x62>
 80068c2:	b672      	cpsid	i
 80068c4:	e7fe      	b.n	80068c4 <xTimerCreateTimerTask+0x60>
	return xReturn;
 80068c6:	68fb      	ldr	r3, [r7, #12]
}
 80068c8:	0018      	movs	r0, r3
 80068ca:	46bd      	mov	sp, r7
 80068cc:	b005      	add	sp, #20
 80068ce:	bd90      	pop	{r4, r7, pc}
 80068d0:	20000f04 	.word	0x20000f04
 80068d4:	0800766c 	.word	0x0800766c
 80068d8:	080069fd 	.word	0x080069fd
 80068dc:	20000f08 	.word	0x20000f08

080068e0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068e0:	b590      	push	{r4, r7, lr}
 80068e2:	b08b      	sub	sp, #44	; 0x2c
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	60f8      	str	r0, [r7, #12]
 80068e8:	60b9      	str	r1, [r7, #8]
 80068ea:	607a      	str	r2, [r7, #4]
 80068ec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068ee:	2300      	movs	r3, #0
 80068f0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d101      	bne.n	80068fc <xTimerGenericCommand+0x1c>
 80068f8:	b672      	cpsid	i
 80068fa:	e7fe      	b.n	80068fa <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068fc:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <xTimerGenericCommand+0x90>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d030      	beq.n	8006966 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006904:	2414      	movs	r4, #20
 8006906:	193b      	adds	r3, r7, r4
 8006908:	68ba      	ldr	r2, [r7, #8]
 800690a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800690c:	193b      	adds	r3, r7, r4
 800690e:	687a      	ldr	r2, [r7, #4]
 8006910:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006912:	193b      	adds	r3, r7, r4
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	2b05      	cmp	r3, #5
 800691c:	dc19      	bgt.n	8006952 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800691e:	f7ff fed5 	bl	80066cc <xTaskGetSchedulerState>
 8006922:	0003      	movs	r3, r0
 8006924:	2b02      	cmp	r3, #2
 8006926:	d109      	bne.n	800693c <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <xTimerGenericCommand+0x90>)
 800692a:	6818      	ldr	r0, [r3, #0]
 800692c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800692e:	1939      	adds	r1, r7, r4
 8006930:	2300      	movs	r3, #0
 8006932:	f7fe fdbd 	bl	80054b0 <xQueueGenericSend>
 8006936:	0003      	movs	r3, r0
 8006938:	627b      	str	r3, [r7, #36]	; 0x24
 800693a:	e014      	b.n	8006966 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800693c:	4b0c      	ldr	r3, [pc, #48]	; (8006970 <xTimerGenericCommand+0x90>)
 800693e:	6818      	ldr	r0, [r3, #0]
 8006940:	2314      	movs	r3, #20
 8006942:	18f9      	adds	r1, r7, r3
 8006944:	2300      	movs	r3, #0
 8006946:	2200      	movs	r2, #0
 8006948:	f7fe fdb2 	bl	80054b0 <xQueueGenericSend>
 800694c:	0003      	movs	r3, r0
 800694e:	627b      	str	r3, [r7, #36]	; 0x24
 8006950:	e009      	b.n	8006966 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006952:	4b07      	ldr	r3, [pc, #28]	; (8006970 <xTimerGenericCommand+0x90>)
 8006954:	6818      	ldr	r0, [r3, #0]
 8006956:	683a      	ldr	r2, [r7, #0]
 8006958:	2314      	movs	r3, #20
 800695a:	18f9      	adds	r1, r7, r3
 800695c:	2300      	movs	r3, #0
 800695e:	f7fe fe6b 	bl	8005638 <xQueueGenericSendFromISR>
 8006962:	0003      	movs	r3, r0
 8006964:	627b      	str	r3, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006968:	0018      	movs	r0, r3
 800696a:	46bd      	mov	sp, r7
 800696c:	b00b      	add	sp, #44	; 0x2c
 800696e:	bd90      	pop	{r4, r7, pc}
 8006970:	20000f04 	.word	0x20000f04

08006974 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b086      	sub	sp, #24
 8006978:	af02      	add	r7, sp, #8
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800697e:	4b1e      	ldr	r3, [pc, #120]	; (80069f8 <prvProcessExpiredTimer+0x84>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006988:	68fb      	ldr	r3, [r7, #12]
 800698a:	3304      	adds	r3, #4
 800698c:	0018      	movs	r0, r3
 800698e:	f7fe fca0 	bl	80052d2 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	2228      	movs	r2, #40	; 0x28
 8006996:	5c9b      	ldrb	r3, [r3, r2]
 8006998:	001a      	movs	r2, r3
 800699a:	2304      	movs	r3, #4
 800699c:	4013      	ands	r3, r2
 800699e:	d019      	beq.n	80069d4 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80069a0:	68fb      	ldr	r3, [r7, #12]
 80069a2:	699a      	ldr	r2, [r3, #24]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	18d1      	adds	r1, r2, r3
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	683a      	ldr	r2, [r7, #0]
 80069ac:	68f8      	ldr	r0, [r7, #12]
 80069ae:	f000 f8c3 	bl	8006b38 <prvInsertTimerInActiveList>
 80069b2:	1e03      	subs	r3, r0, #0
 80069b4:	d017      	beq.n	80069e6 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80069b6:	687a      	ldr	r2, [r7, #4]
 80069b8:	68f8      	ldr	r0, [r7, #12]
 80069ba:	2300      	movs	r3, #0
 80069bc:	9300      	str	r3, [sp, #0]
 80069be:	2300      	movs	r3, #0
 80069c0:	2100      	movs	r1, #0
 80069c2:	f7ff ff8d 	bl	80068e0 <xTimerGenericCommand>
 80069c6:	0003      	movs	r3, r0
 80069c8:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d10a      	bne.n	80069e6 <prvProcessExpiredTimer+0x72>
 80069d0:	b672      	cpsid	i
 80069d2:	e7fe      	b.n	80069d2 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2228      	movs	r2, #40	; 0x28
 80069d8:	5c9b      	ldrb	r3, [r3, r2]
 80069da:	2201      	movs	r2, #1
 80069dc:	4393      	bics	r3, r2
 80069de:	b2d9      	uxtb	r1, r3
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	2228      	movs	r2, #40	; 0x28
 80069e4:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	6a1b      	ldr	r3, [r3, #32]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	0010      	movs	r0, r2
 80069ee:	4798      	blx	r3
}
 80069f0:	46c0      	nop			; (mov r8, r8)
 80069f2:	46bd      	mov	sp, r7
 80069f4:	b004      	add	sp, #16
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000efc 	.word	0x20000efc

080069fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b084      	sub	sp, #16
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a04:	2308      	movs	r3, #8
 8006a06:	18fb      	adds	r3, r7, r3
 8006a08:	0018      	movs	r0, r3
 8006a0a:	f000 f853 	bl	8006ab4 <prvGetNextExpireTime>
 8006a0e:	0003      	movs	r3, r0
 8006a10:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006a12:	68ba      	ldr	r2, [r7, #8]
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	0011      	movs	r1, r2
 8006a18:	0018      	movs	r0, r3
 8006a1a:	f000 f803 	bl	8006a24 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a1e:	f000 f8cd 	bl	8006bbc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a22:	e7ef      	b.n	8006a04 <prvTimerTask+0x8>

08006a24 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a2e:	f7ff fac1 	bl	8005fb4 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a32:	2308      	movs	r3, #8
 8006a34:	18fb      	adds	r3, r7, r3
 8006a36:	0018      	movs	r0, r3
 8006a38:	f000 f85e 	bl	8006af8 <prvSampleTimeNow>
 8006a3c:	0003      	movs	r3, r0
 8006a3e:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d12b      	bne.n	8006a9e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a46:	683b      	ldr	r3, [r7, #0]
 8006a48:	2b00      	cmp	r3, #0
 8006a4a:	d10c      	bne.n	8006a66 <prvProcessTimerOrBlockTask+0x42>
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d808      	bhi.n	8006a66 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 8006a54:	f7ff faba 	bl	8005fcc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a58:	68fa      	ldr	r2, [r7, #12]
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	0011      	movs	r1, r2
 8006a5e:	0018      	movs	r0, r3
 8006a60:	f7ff ff88 	bl	8006974 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a64:	e01d      	b.n	8006aa2 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d008      	beq.n	8006a7e <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a6c:	4b0f      	ldr	r3, [pc, #60]	; (8006aac <prvProcessTimerOrBlockTask+0x88>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d101      	bne.n	8006a7a <prvProcessTimerOrBlockTask+0x56>
 8006a76:	2301      	movs	r3, #1
 8006a78:	e000      	b.n	8006a7c <prvProcessTimerOrBlockTask+0x58>
 8006a7a:	2300      	movs	r3, #0
 8006a7c:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a7e:	4b0c      	ldr	r3, [pc, #48]	; (8006ab0 <prvProcessTimerOrBlockTask+0x8c>)
 8006a80:	6818      	ldr	r0, [r3, #0]
 8006a82:	687a      	ldr	r2, [r7, #4]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	1ad3      	subs	r3, r2, r3
 8006a88:	683a      	ldr	r2, [r7, #0]
 8006a8a:	0019      	movs	r1, r3
 8006a8c:	f7ff f842 	bl	8005b14 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a90:	f7ff fa9c 	bl	8005fcc <xTaskResumeAll>
 8006a94:	1e03      	subs	r3, r0, #0
 8006a96:	d104      	bne.n	8006aa2 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 8006a98:	f000 fa82 	bl	8006fa0 <vPortYield>
}
 8006a9c:	e001      	b.n	8006aa2 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 8006a9e:	f7ff fa95 	bl	8005fcc <xTaskResumeAll>
}
 8006aa2:	46c0      	nop			; (mov r8, r8)
 8006aa4:	46bd      	mov	sp, r7
 8006aa6:	b004      	add	sp, #16
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	46c0      	nop			; (mov r8, r8)
 8006aac:	20000f00 	.word	0x20000f00
 8006ab0:	20000f04 	.word	0x20000f04

08006ab4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006ab4:	b580      	push	{r7, lr}
 8006ab6:	b084      	sub	sp, #16
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006abc:	4b0d      	ldr	r3, [pc, #52]	; (8006af4 <prvGetNextExpireTime+0x40>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d101      	bne.n	8006aca <prvGetNextExpireTime+0x16>
 8006ac6:	2201      	movs	r2, #1
 8006ac8:	e000      	b.n	8006acc <prvGetNextExpireTime+0x18>
 8006aca:	2200      	movs	r2, #0
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d105      	bne.n	8006ae4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ad8:	4b06      	ldr	r3, [pc, #24]	; (8006af4 <prvGetNextExpireTime+0x40>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	68db      	ldr	r3, [r3, #12]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	60fb      	str	r3, [r7, #12]
 8006ae2:	e001      	b.n	8006ae8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ae8:	68fb      	ldr	r3, [r7, #12]
}
 8006aea:	0018      	movs	r0, r3
 8006aec:	46bd      	mov	sp, r7
 8006aee:	b004      	add	sp, #16
 8006af0:	bd80      	pop	{r7, pc}
 8006af2:	46c0      	nop			; (mov r8, r8)
 8006af4:	20000efc 	.word	0x20000efc

08006af8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006b00:	f7ff faf0 	bl	80060e4 <xTaskGetTickCount>
 8006b04:	0003      	movs	r3, r0
 8006b06:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 8006b08:	4b0a      	ldr	r3, [pc, #40]	; (8006b34 <prvSampleTimeNow+0x3c>)
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	429a      	cmp	r2, r3
 8006b10:	d205      	bcs.n	8006b1e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 8006b12:	f000 f919 	bl	8006d48 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2201      	movs	r2, #1
 8006b1a:	601a      	str	r2, [r3, #0]
 8006b1c:	e002      	b.n	8006b24 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	2200      	movs	r2, #0
 8006b22:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b24:	4b03      	ldr	r3, [pc, #12]	; (8006b34 <prvSampleTimeNow+0x3c>)
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
}
 8006b2c:	0018      	movs	r0, r3
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	b004      	add	sp, #16
 8006b32:	bd80      	pop	{r7, pc}
 8006b34:	20000f0c 	.word	0x20000f0c

08006b38 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b086      	sub	sp, #24
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	607a      	str	r2, [r7, #4]
 8006b44:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b46:	2300      	movs	r3, #0
 8006b48:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	68ba      	ldr	r2, [r7, #8]
 8006b4e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	68fa      	ldr	r2, [r7, #12]
 8006b54:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d812      	bhi.n	8006b84 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	1ad2      	subs	r2, r2, r3
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	699b      	ldr	r3, [r3, #24]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d302      	bcc.n	8006b72 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b6c:	2301      	movs	r3, #1
 8006b6e:	617b      	str	r3, [r7, #20]
 8006b70:	e01b      	b.n	8006baa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b72:	4b10      	ldr	r3, [pc, #64]	; (8006bb4 <prvInsertTimerInActiveList+0x7c>)
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	3304      	adds	r3, #4
 8006b7a:	0019      	movs	r1, r3
 8006b7c:	0010      	movs	r0, r2
 8006b7e:	f7fe fb72 	bl	8005266 <vListInsert>
 8006b82:	e012      	b.n	8006baa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b84:	687a      	ldr	r2, [r7, #4]
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	429a      	cmp	r2, r3
 8006b8a:	d206      	bcs.n	8006b9a <prvInsertTimerInActiveList+0x62>
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d302      	bcc.n	8006b9a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b94:	2301      	movs	r3, #1
 8006b96:	617b      	str	r3, [r7, #20]
 8006b98:	e007      	b.n	8006baa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b9a:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <prvInsertTimerInActiveList+0x80>)
 8006b9c:	681a      	ldr	r2, [r3, #0]
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	3304      	adds	r3, #4
 8006ba2:	0019      	movs	r1, r3
 8006ba4:	0010      	movs	r0, r2
 8006ba6:	f7fe fb5e 	bl	8005266 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006baa:	697b      	ldr	r3, [r7, #20]
}
 8006bac:	0018      	movs	r0, r3
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	b006      	add	sp, #24
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	20000f00 	.word	0x20000f00
 8006bb8:	20000efc 	.word	0x20000efc

08006bbc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bbc:	b590      	push	{r4, r7, lr}
 8006bbe:	b08d      	sub	sp, #52	; 0x34
 8006bc0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bc2:	e0ac      	b.n	8006d1e <prvProcessReceivedCommands+0x162>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bc4:	2208      	movs	r2, #8
 8006bc6:	18bb      	adds	r3, r7, r2
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	da0f      	bge.n	8006bee <prvProcessReceivedCommands+0x32>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bce:	18bb      	adds	r3, r7, r2
 8006bd0:	3304      	adds	r3, #4
 8006bd2:	627b      	str	r3, [r7, #36]	; 0x24

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <prvProcessReceivedCommands+0x22>
 8006bda:	b672      	cpsid	i
 8006bdc:	e7fe      	b.n	8006bdc <prvProcessReceivedCommands+0x20>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be0:	681a      	ldr	r2, [r3, #0]
 8006be2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be4:	6858      	ldr	r0, [r3, #4]
 8006be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006be8:	689b      	ldr	r3, [r3, #8]
 8006bea:	0019      	movs	r1, r3
 8006bec:	4790      	blx	r2
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bee:	2208      	movs	r2, #8
 8006bf0:	18bb      	adds	r3, r7, r2
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	da00      	bge.n	8006bfa <prvProcessReceivedCommands+0x3e>
 8006bf8:	e091      	b.n	8006d1e <prvProcessReceivedCommands+0x162>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bfa:	18bb      	adds	r3, r7, r2
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	623b      	str	r3, [r7, #32]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006c00:	6a3b      	ldr	r3, [r7, #32]
 8006c02:	695b      	ldr	r3, [r3, #20]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d004      	beq.n	8006c12 <prvProcessReceivedCommands+0x56>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c08:	6a3b      	ldr	r3, [r7, #32]
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	0018      	movs	r0, r3
 8006c0e:	f7fe fb60 	bl	80052d2 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c12:	1d3b      	adds	r3, r7, #4
 8006c14:	0018      	movs	r0, r3
 8006c16:	f7ff ff6f 	bl	8006af8 <prvSampleTimeNow>
 8006c1a:	0003      	movs	r3, r0
 8006c1c:	61fb      	str	r3, [r7, #28]

			switch( xMessage.xMessageID )
 8006c1e:	2308      	movs	r3, #8
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2b09      	cmp	r3, #9
 8006c26:	d900      	bls.n	8006c2a <prvProcessReceivedCommands+0x6e>
 8006c28:	e078      	b.n	8006d1c <prvProcessReceivedCommands+0x160>
 8006c2a:	009a      	lsls	r2, r3, #2
 8006c2c:	4b44      	ldr	r3, [pc, #272]	; (8006d40 <prvProcessReceivedCommands+0x184>)
 8006c2e:	18d3      	adds	r3, r2, r3
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c34:	6a3b      	ldr	r3, [r7, #32]
 8006c36:	2228      	movs	r2, #40	; 0x28
 8006c38:	5c9b      	ldrb	r3, [r3, r2]
 8006c3a:	2201      	movs	r2, #1
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	b2d9      	uxtb	r1, r3
 8006c40:	6a3b      	ldr	r3, [r7, #32]
 8006c42:	2228      	movs	r2, #40	; 0x28
 8006c44:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c46:	2408      	movs	r4, #8
 8006c48:	193b      	adds	r3, r7, r4
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	6a3b      	ldr	r3, [r7, #32]
 8006c4e:	699b      	ldr	r3, [r3, #24]
 8006c50:	18d1      	adds	r1, r2, r3
 8006c52:	193b      	adds	r3, r7, r4
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	69fa      	ldr	r2, [r7, #28]
 8006c58:	6a38      	ldr	r0, [r7, #32]
 8006c5a:	f7ff ff6d 	bl	8006b38 <prvInsertTimerInActiveList>
 8006c5e:	1e03      	subs	r3, r0, #0
 8006c60:	d05d      	beq.n	8006d1e <prvProcessReceivedCommands+0x162>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c62:	6a3b      	ldr	r3, [r7, #32]
 8006c64:	6a1b      	ldr	r3, [r3, #32]
 8006c66:	6a3a      	ldr	r2, [r7, #32]
 8006c68:	0010      	movs	r0, r2
 8006c6a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6c:	6a3b      	ldr	r3, [r7, #32]
 8006c6e:	2228      	movs	r2, #40	; 0x28
 8006c70:	5c9b      	ldrb	r3, [r3, r2]
 8006c72:	001a      	movs	r2, r3
 8006c74:	2304      	movs	r3, #4
 8006c76:	4013      	ands	r3, r2
 8006c78:	d051      	beq.n	8006d1e <prvProcessReceivedCommands+0x162>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c7a:	193b      	adds	r3, r7, r4
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	6a3b      	ldr	r3, [r7, #32]
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	18d2      	adds	r2, r2, r3
 8006c84:	6a38      	ldr	r0, [r7, #32]
 8006c86:	2300      	movs	r3, #0
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	2100      	movs	r1, #0
 8006c8e:	f7ff fe27 	bl	80068e0 <xTimerGenericCommand>
 8006c92:	0003      	movs	r3, r0
 8006c94:	61bb      	str	r3, [r7, #24]
							configASSERT( xResult );
 8006c96:	69bb      	ldr	r3, [r7, #24]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d140      	bne.n	8006d1e <prvProcessReceivedCommands+0x162>
 8006c9c:	b672      	cpsid	i
 8006c9e:	e7fe      	b.n	8006c9e <prvProcessReceivedCommands+0xe2>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ca0:	6a3b      	ldr	r3, [r7, #32]
 8006ca2:	2228      	movs	r2, #40	; 0x28
 8006ca4:	5c9b      	ldrb	r3, [r3, r2]
 8006ca6:	2201      	movs	r2, #1
 8006ca8:	4393      	bics	r3, r2
 8006caa:	b2d9      	uxtb	r1, r3
 8006cac:	6a3b      	ldr	r3, [r7, #32]
 8006cae:	2228      	movs	r2, #40	; 0x28
 8006cb0:	5499      	strb	r1, [r3, r2]
					break;
 8006cb2:	e034      	b.n	8006d1e <prvProcessReceivedCommands+0x162>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cb4:	6a3b      	ldr	r3, [r7, #32]
 8006cb6:	2228      	movs	r2, #40	; 0x28
 8006cb8:	5c9b      	ldrb	r3, [r3, r2]
 8006cba:	2201      	movs	r2, #1
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	b2d9      	uxtb	r1, r3
 8006cc0:	6a3b      	ldr	r3, [r7, #32]
 8006cc2:	2228      	movs	r2, #40	; 0x28
 8006cc4:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cc6:	2308      	movs	r3, #8
 8006cc8:	18fb      	adds	r3, r7, r3
 8006cca:	685a      	ldr	r2, [r3, #4]
 8006ccc:	6a3b      	ldr	r3, [r7, #32]
 8006cce:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	699b      	ldr	r3, [r3, #24]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <prvProcessReceivedCommands+0x120>
 8006cd8:	b672      	cpsid	i
 8006cda:	e7fe      	b.n	8006cda <prvProcessReceivedCommands+0x11e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cdc:	6a3b      	ldr	r3, [r7, #32]
 8006cde:	699a      	ldr	r2, [r3, #24]
 8006ce0:	69fb      	ldr	r3, [r7, #28]
 8006ce2:	18d1      	adds	r1, r2, r3
 8006ce4:	69fb      	ldr	r3, [r7, #28]
 8006ce6:	69fa      	ldr	r2, [r7, #28]
 8006ce8:	6a38      	ldr	r0, [r7, #32]
 8006cea:	f7ff ff25 	bl	8006b38 <prvInsertTimerInActiveList>
					break;
 8006cee:	e016      	b.n	8006d1e <prvProcessReceivedCommands+0x162>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cf0:	6a3b      	ldr	r3, [r7, #32]
 8006cf2:	2228      	movs	r2, #40	; 0x28
 8006cf4:	5c9b      	ldrb	r3, [r3, r2]
 8006cf6:	001a      	movs	r2, r3
 8006cf8:	2302      	movs	r3, #2
 8006cfa:	4013      	ands	r3, r2
 8006cfc:	d104      	bne.n	8006d08 <prvProcessReceivedCommands+0x14c>
						{
							vPortFree( pxTimer );
 8006cfe:	6a3b      	ldr	r3, [r7, #32]
 8006d00:	0018      	movs	r0, r3
 8006d02:	f000 faa1 	bl	8007248 <vPortFree>
 8006d06:	e00a      	b.n	8006d1e <prvProcessReceivedCommands+0x162>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d08:	6a3b      	ldr	r3, [r7, #32]
 8006d0a:	2228      	movs	r2, #40	; 0x28
 8006d0c:	5c9b      	ldrb	r3, [r3, r2]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	4393      	bics	r3, r2
 8006d12:	b2d9      	uxtb	r1, r3
 8006d14:	6a3b      	ldr	r3, [r7, #32]
 8006d16:	2228      	movs	r2, #40	; 0x28
 8006d18:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d1a:	e000      	b.n	8006d1e <prvProcessReceivedCommands+0x162>

				default	:
					/* Don't expect to get here. */
					break;
 8006d1c:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d1e:	4b09      	ldr	r3, [pc, #36]	; (8006d44 <prvProcessReceivedCommands+0x188>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2208      	movs	r2, #8
 8006d24:	18b9      	adds	r1, r7, r2
 8006d26:	2200      	movs	r2, #0
 8006d28:	0018      	movs	r0, r3
 8006d2a:	f7fe fcf9 	bl	8005720 <xQueueReceive>
 8006d2e:	1e03      	subs	r3, r0, #0
 8006d30:	d000      	beq.n	8006d34 <prvProcessReceivedCommands+0x178>
 8006d32:	e747      	b.n	8006bc4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d34:	46c0      	nop			; (mov r8, r8)
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	b00b      	add	sp, #44	; 0x2c
 8006d3c:	bd90      	pop	{r4, r7, pc}
 8006d3e:	46c0      	nop			; (mov r8, r8)
 8006d40:	08007764 	.word	0x08007764
 8006d44:	20000f04 	.word	0x20000f04

08006d48 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b088      	sub	sp, #32
 8006d4c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d4e:	e041      	b.n	8006dd4 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d50:	4b2a      	ldr	r3, [pc, #168]	; (8006dfc <prvSwitchTimerLists+0xb4>)
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	68db      	ldr	r3, [r3, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d5a:	4b28      	ldr	r3, [pc, #160]	; (8006dfc <prvSwitchTimerLists+0xb4>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	68db      	ldr	r3, [r3, #12]
 8006d60:	68db      	ldr	r3, [r3, #12]
 8006d62:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	3304      	adds	r3, #4
 8006d68:	0018      	movs	r0, r3
 8006d6a:	f7fe fab2 	bl	80052d2 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	68fa      	ldr	r2, [r7, #12]
 8006d74:	0010      	movs	r0, r2
 8006d76:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	2228      	movs	r2, #40	; 0x28
 8006d7c:	5c9b      	ldrb	r3, [r3, r2]
 8006d7e:	001a      	movs	r2, r3
 8006d80:	2304      	movs	r3, #4
 8006d82:	4013      	ands	r3, r2
 8006d84:	d026      	beq.n	8006dd4 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	18d3      	adds	r3, r2, r3
 8006d8e:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d90:	68ba      	ldr	r2, [r7, #8]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d90e      	bls.n	8006db6 <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68ba      	ldr	r2, [r7, #8]
 8006d9c:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	68fa      	ldr	r2, [r7, #12]
 8006da2:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006da4:	4b15      	ldr	r3, [pc, #84]	; (8006dfc <prvSwitchTimerLists+0xb4>)
 8006da6:	681a      	ldr	r2, [r3, #0]
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	3304      	adds	r3, #4
 8006dac:	0019      	movs	r1, r3
 8006dae:	0010      	movs	r0, r2
 8006db0:	f7fe fa59 	bl	8005266 <vListInsert>
 8006db4:	e00e      	b.n	8006dd4 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006db6:	693a      	ldr	r2, [r7, #16]
 8006db8:	68f8      	ldr	r0, [r7, #12]
 8006dba:	2300      	movs	r3, #0
 8006dbc:	9300      	str	r3, [sp, #0]
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	2100      	movs	r1, #0
 8006dc2:	f7ff fd8d 	bl	80068e0 <xTimerGenericCommand>
 8006dc6:	0003      	movs	r3, r0
 8006dc8:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d101      	bne.n	8006dd4 <prvSwitchTimerLists+0x8c>
 8006dd0:	b672      	cpsid	i
 8006dd2:	e7fe      	b.n	8006dd2 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dd4:	4b09      	ldr	r3, [pc, #36]	; (8006dfc <prvSwitchTimerLists+0xb4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d1b8      	bne.n	8006d50 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dde:	4b07      	ldr	r3, [pc, #28]	; (8006dfc <prvSwitchTimerLists+0xb4>)
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006de4:	4b06      	ldr	r3, [pc, #24]	; (8006e00 <prvSwitchTimerLists+0xb8>)
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4b04      	ldr	r3, [pc, #16]	; (8006dfc <prvSwitchTimerLists+0xb4>)
 8006dea:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 8006dec:	4b04      	ldr	r3, [pc, #16]	; (8006e00 <prvSwitchTimerLists+0xb8>)
 8006dee:	697a      	ldr	r2, [r7, #20]
 8006df0:	601a      	str	r2, [r3, #0]
}
 8006df2:	46c0      	nop			; (mov r8, r8)
 8006df4:	46bd      	mov	sp, r7
 8006df6:	b006      	add	sp, #24
 8006df8:	bd80      	pop	{r7, pc}
 8006dfa:	46c0      	nop			; (mov r8, r8)
 8006dfc:	20000efc 	.word	0x20000efc
 8006e00:	20000f00 	.word	0x20000f00

08006e04 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b082      	sub	sp, #8
 8006e08:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e0a:	f000 f8d9 	bl	8006fc0 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e0e:	4b16      	ldr	r3, [pc, #88]	; (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d123      	bne.n	8006e5e <prvCheckForValidListAndQueue+0x5a>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e16:	4b15      	ldr	r3, [pc, #84]	; (8006e6c <prvCheckForValidListAndQueue+0x68>)
 8006e18:	0018      	movs	r0, r3
 8006e1a:	f7fe f9d9 	bl	80051d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e1e:	4b14      	ldr	r3, [pc, #80]	; (8006e70 <prvCheckForValidListAndQueue+0x6c>)
 8006e20:	0018      	movs	r0, r3
 8006e22:	f7fe f9d5 	bl	80051d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e26:	4b13      	ldr	r3, [pc, #76]	; (8006e74 <prvCheckForValidListAndQueue+0x70>)
 8006e28:	4a10      	ldr	r2, [pc, #64]	; (8006e6c <prvCheckForValidListAndQueue+0x68>)
 8006e2a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e2c:	4b12      	ldr	r3, [pc, #72]	; (8006e78 <prvCheckForValidListAndQueue+0x74>)
 8006e2e:	4a10      	ldr	r2, [pc, #64]	; (8006e70 <prvCheckForValidListAndQueue+0x6c>)
 8006e30:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e32:	4b12      	ldr	r3, [pc, #72]	; (8006e7c <prvCheckForValidListAndQueue+0x78>)
 8006e34:	4a12      	ldr	r2, [pc, #72]	; (8006e80 <prvCheckForValidListAndQueue+0x7c>)
 8006e36:	2100      	movs	r1, #0
 8006e38:	9100      	str	r1, [sp, #0]
 8006e3a:	2110      	movs	r1, #16
 8006e3c:	200a      	movs	r0, #10
 8006e3e:	f7fe fac4 	bl	80053ca <xQueueGenericCreateStatic>
 8006e42:	0002      	movs	r2, r0
 8006e44:	4b08      	ldr	r3, [pc, #32]	; (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e46:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e48:	4b07      	ldr	r3, [pc, #28]	; (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d006      	beq.n	8006e5e <prvCheckForValidListAndQueue+0x5a>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e50:	4b05      	ldr	r3, [pc, #20]	; (8006e68 <prvCheckForValidListAndQueue+0x64>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	4a0b      	ldr	r2, [pc, #44]	; (8006e84 <prvCheckForValidListAndQueue+0x80>)
 8006e56:	0011      	movs	r1, r2
 8006e58:	0018      	movs	r0, r3
 8006e5a:	f7fe fe33 	bl	8005ac4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e5e:	f000 f8c1 	bl	8006fe4 <vPortExitCritical>
}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	46bd      	mov	sp, r7
 8006e66:	bd80      	pop	{r7, pc}
 8006e68:	20000f04 	.word	0x20000f04
 8006e6c:	20000ed4 	.word	0x20000ed4
 8006e70:	20000ee8 	.word	0x20000ee8
 8006e74:	20000efc 	.word	0x20000efc
 8006e78:	20000f00 	.word	0x20000f00
 8006e7c:	20000fb0 	.word	0x20000fb0
 8006e80:	20000f10 	.word	0x20000f10
 8006e84:	08007674 	.word	0x08007674

08006e88 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e88:	b580      	push	{r7, lr}
 8006e8a:	b084      	sub	sp, #16
 8006e8c:	af00      	add	r7, sp, #0
 8006e8e:	60f8      	str	r0, [r7, #12]
 8006e90:	60b9      	str	r1, [r7, #8]
 8006e92:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	3b04      	subs	r3, #4
 8006e98:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	2280      	movs	r2, #128	; 0x80
 8006e9e:	0452      	lsls	r2, r2, #17
 8006ea0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	3b04      	subs	r3, #4
 8006ea6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8006ea8:	68ba      	ldr	r2, [r7, #8]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	3b04      	subs	r3, #4
 8006eb2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb4:	4a08      	ldr	r2, [pc, #32]	; (8006ed8 <pxPortInitialiseStack+0x50>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	3b14      	subs	r3, #20
 8006ebe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ec0:	687a      	ldr	r2, [r7, #4]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	3b20      	subs	r3, #32
 8006eca:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
}
 8006ece:	0018      	movs	r0, r3
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	b004      	add	sp, #16
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	08006edd 	.word	0x08006edd

08006edc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006edc:	b580      	push	{r7, lr}
 8006ede:	b082      	sub	sp, #8
 8006ee0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006ee2:	2300      	movs	r3, #0
 8006ee4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ee6:	4b08      	ldr	r3, [pc, #32]	; (8006f08 <prvTaskExitError+0x2c>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	3301      	adds	r3, #1
 8006eec:	d001      	beq.n	8006ef2 <prvTaskExitError+0x16>
 8006eee:	b672      	cpsid	i
 8006ef0:	e7fe      	b.n	8006ef0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 8006ef2:	b672      	cpsid	i
	while( ulDummy == 0 )
 8006ef4:	46c0      	nop			; (mov r8, r8)
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d0fc      	beq.n	8006ef6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006efc:	46c0      	nop			; (mov r8, r8)
 8006efe:	46c0      	nop			; (mov r8, r8)
 8006f00:	46bd      	mov	sp, r7
 8006f02:	b002      	add	sp, #8
 8006f04:	bd80      	pop	{r7, pc}
 8006f06:	46c0      	nop			; (mov r8, r8)
 8006f08:	2000000c 	.word	0x2000000c

08006f0c <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8006f10:	46c0      	nop			; (mov r8, r8)
 8006f12:	46bd      	mov	sp, r7
 8006f14:	bd80      	pop	{r7, pc}
	...

08006f20 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8006f20:	4a0b      	ldr	r2, [pc, #44]	; (8006f50 <pxCurrentTCBConst2>)
 8006f22:	6813      	ldr	r3, [r2, #0]
 8006f24:	6818      	ldr	r0, [r3, #0]
 8006f26:	3020      	adds	r0, #32
 8006f28:	f380 8809 	msr	PSP, r0
 8006f2c:	2002      	movs	r0, #2
 8006f2e:	f380 8814 	msr	CONTROL, r0
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8006f38:	46ae      	mov	lr, r5
 8006f3a:	bc08      	pop	{r3}
 8006f3c:	bc04      	pop	{r2}
 8006f3e:	b662      	cpsie	i
 8006f40:	4718      	bx	r3
 8006f42:	46c0      	nop			; (mov r8, r8)
 8006f44:	46c0      	nop			; (mov r8, r8)
 8006f46:	46c0      	nop			; (mov r8, r8)
 8006f48:	46c0      	nop			; (mov r8, r8)
 8006f4a:	46c0      	nop			; (mov r8, r8)
 8006f4c:	46c0      	nop			; (mov r8, r8)
 8006f4e:	46c0      	nop			; (mov r8, r8)

08006f50 <pxCurrentTCBConst2>:
 8006f50:	200009d4 	.word	0x200009d4
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8006f54:	46c0      	nop			; (mov r8, r8)
 8006f56:	46c0      	nop			; (mov r8, r8)

08006f58 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006f58:	b580      	push	{r7, lr}
 8006f5a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f5c:	4b0e      	ldr	r3, [pc, #56]	; (8006f98 <xPortStartScheduler+0x40>)
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	4b0d      	ldr	r3, [pc, #52]	; (8006f98 <xPortStartScheduler+0x40>)
 8006f62:	21ff      	movs	r1, #255	; 0xff
 8006f64:	0409      	lsls	r1, r1, #16
 8006f66:	430a      	orrs	r2, r1
 8006f68:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006f6a:	4b0b      	ldr	r3, [pc, #44]	; (8006f98 <xPortStartScheduler+0x40>)
 8006f6c:	681a      	ldr	r2, [r3, #0]
 8006f6e:	4b0a      	ldr	r3, [pc, #40]	; (8006f98 <xPortStartScheduler+0x40>)
 8006f70:	21ff      	movs	r1, #255	; 0xff
 8006f72:	0609      	lsls	r1, r1, #24
 8006f74:	430a      	orrs	r2, r1
 8006f76:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006f78:	f000 f898 	bl	80070ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006f7c:	4b07      	ldr	r3, [pc, #28]	; (8006f9c <xPortStartScheduler+0x44>)
 8006f7e:	2200      	movs	r2, #0
 8006f80:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8006f82:	f7ff ffcd 	bl	8006f20 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006f86:	f7ff f96b 	bl	8006260 <vTaskSwitchContext>
	prvTaskExitError();
 8006f8a:	f7ff ffa7 	bl	8006edc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006f8e:	2300      	movs	r3, #0
}
 8006f90:	0018      	movs	r0, r3
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	46c0      	nop			; (mov r8, r8)
 8006f98:	e000ed20 	.word	0xe000ed20
 8006f9c:	2000000c 	.word	0x2000000c

08006fa0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006fa4:	4b05      	ldr	r3, [pc, #20]	; (8006fbc <vPortYield+0x1c>)
 8006fa6:	2280      	movs	r2, #128	; 0x80
 8006fa8:	0552      	lsls	r2, r2, #21
 8006faa:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8006fac:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006fb0:	f3bf 8f6f 	isb	sy
}
 8006fb4:	46c0      	nop			; (mov r8, r8)
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	46c0      	nop			; (mov r8, r8)
 8006fbc:	e000ed04 	.word	0xe000ed04

08006fc0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8006fc4:	b672      	cpsid	i
	uxCriticalNesting++;
 8006fc6:	4b06      	ldr	r3, [pc, #24]	; (8006fe0 <vPortEnterCritical+0x20>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	1c5a      	adds	r2, r3, #1
 8006fcc:	4b04      	ldr	r3, [pc, #16]	; (8006fe0 <vPortEnterCritical+0x20>)
 8006fce:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8006fd0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8006fd4:	f3bf 8f6f 	isb	sy
}
 8006fd8:	46c0      	nop			; (mov r8, r8)
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	46c0      	nop			; (mov r8, r8)
 8006fe0:	2000000c 	.word	0x2000000c

08006fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006fe4:	b580      	push	{r7, lr}
 8006fe6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8006fe8:	4b09      	ldr	r3, [pc, #36]	; (8007010 <vPortExitCritical+0x2c>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d101      	bne.n	8006ff4 <vPortExitCritical+0x10>
 8006ff0:	b672      	cpsid	i
 8006ff2:	e7fe      	b.n	8006ff2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8006ff4:	4b06      	ldr	r3, [pc, #24]	; (8007010 <vPortExitCritical+0x2c>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	1e5a      	subs	r2, r3, #1
 8006ffa:	4b05      	ldr	r3, [pc, #20]	; (8007010 <vPortExitCritical+0x2c>)
 8006ffc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8006ffe:	4b04      	ldr	r3, [pc, #16]	; (8007010 <vPortExitCritical+0x2c>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d100      	bne.n	8007008 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8007006:	b662      	cpsie	i
	}
}
 8007008:	46c0      	nop			; (mov r8, r8)
 800700a:	46bd      	mov	sp, r7
 800700c:	bd80      	pop	{r7, pc}
 800700e:	46c0      	nop			; (mov r8, r8)
 8007010:	2000000c 	.word	0x2000000c

08007014 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8007014:	f3ef 8010 	mrs	r0, PRIMASK
 8007018:	b672      	cpsid	i
 800701a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800701c:	46c0      	nop			; (mov r8, r8)
 800701e:	0018      	movs	r0, r3

08007020 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8007020:	f380 8810 	msr	PRIMASK, r0
 8007024:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8007026:	46c0      	nop			; (mov r8, r8)
	...

08007030 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007030:	f3ef 8009 	mrs	r0, PSP
 8007034:	4b0e      	ldr	r3, [pc, #56]	; (8007070 <pxCurrentTCBConst>)
 8007036:	681a      	ldr	r2, [r3, #0]
 8007038:	3820      	subs	r0, #32
 800703a:	6010      	str	r0, [r2, #0]
 800703c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800703e:	4644      	mov	r4, r8
 8007040:	464d      	mov	r5, r9
 8007042:	4656      	mov	r6, sl
 8007044:	465f      	mov	r7, fp
 8007046:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8007048:	b508      	push	{r3, lr}
 800704a:	b672      	cpsid	i
 800704c:	f7ff f908 	bl	8006260 <vTaskSwitchContext>
 8007050:	b662      	cpsie	i
 8007052:	bc0c      	pop	{r2, r3}
 8007054:	6811      	ldr	r1, [r2, #0]
 8007056:	6808      	ldr	r0, [r1, #0]
 8007058:	3010      	adds	r0, #16
 800705a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800705c:	46a0      	mov	r8, r4
 800705e:	46a9      	mov	r9, r5
 8007060:	46b2      	mov	sl, r6
 8007062:	46bb      	mov	fp, r7
 8007064:	f380 8809 	msr	PSP, r0
 8007068:	3820      	subs	r0, #32
 800706a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800706c:	4718      	bx	r3
 800706e:	46c0      	nop			; (mov r8, r8)

08007070 <pxCurrentTCBConst>:
 8007070:	200009d4 	.word	0x200009d4
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8007074:	46c0      	nop			; (mov r8, r8)
 8007076:	46c0      	nop			; (mov r8, r8)

08007078 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007078:	b580      	push	{r7, lr}
 800707a:	b082      	sub	sp, #8
 800707c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800707e:	f7ff ffc9 	bl	8007014 <ulSetInterruptMaskFromISR>
 8007082:	0003      	movs	r3, r0
 8007084:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007086:	f7ff f83b 	bl	8006100 <xTaskIncrementTick>
 800708a:	1e03      	subs	r3, r0, #0
 800708c:	d003      	beq.n	8007096 <xPortSysTickHandler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800708e:	4b06      	ldr	r3, [pc, #24]	; (80070a8 <xPortSysTickHandler+0x30>)
 8007090:	2280      	movs	r2, #128	; 0x80
 8007092:	0552      	lsls	r2, r2, #21
 8007094:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	0018      	movs	r0, r3
 800709a:	f7ff ffc1 	bl	8007020 <vClearInterruptMaskFromISR>
}
 800709e:	46c0      	nop			; (mov r8, r8)
 80070a0:	46bd      	mov	sp, r7
 80070a2:	b002      	add	sp, #8
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	46c0      	nop			; (mov r8, r8)
 80070a8:	e000ed04 	.word	0xe000ed04

080070ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80070b0:	4b0b      	ldr	r3, [pc, #44]	; (80070e0 <vPortSetupTimerInterrupt+0x34>)
 80070b2:	2200      	movs	r2, #0
 80070b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80070b6:	4b0b      	ldr	r3, [pc, #44]	; (80070e4 <vPortSetupTimerInterrupt+0x38>)
 80070b8:	2200      	movs	r2, #0
 80070ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80070bc:	4b0a      	ldr	r3, [pc, #40]	; (80070e8 <vPortSetupTimerInterrupt+0x3c>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	22fa      	movs	r2, #250	; 0xfa
 80070c2:	0091      	lsls	r1, r2, #2
 80070c4:	0018      	movs	r0, r3
 80070c6:	f7f9 f81f 	bl	8000108 <__udivsi3>
 80070ca:	0003      	movs	r3, r0
 80070cc:	001a      	movs	r2, r3
 80070ce:	4b07      	ldr	r3, [pc, #28]	; (80070ec <vPortSetupTimerInterrupt+0x40>)
 80070d0:	3a01      	subs	r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80070d4:	4b02      	ldr	r3, [pc, #8]	; (80070e0 <vPortSetupTimerInterrupt+0x34>)
 80070d6:	2207      	movs	r2, #7
 80070d8:	601a      	str	r2, [r3, #0]
}
 80070da:	46c0      	nop			; (mov r8, r8)
 80070dc:	46bd      	mov	sp, r7
 80070de:	bd80      	pop	{r7, pc}
 80070e0:	e000e010 	.word	0xe000e010
 80070e4:	e000e018 	.word	0xe000e018
 80070e8:	20000000 	.word	0x20000000
 80070ec:	e000e014 	.word	0xe000e014

080070f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	b086      	sub	sp, #24
 80070f4:	af00      	add	r7, sp, #0
 80070f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80070fc:	f7fe ff5a 	bl	8005fb4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007100:	4b4b      	ldr	r3, [pc, #300]	; (8007230 <pvPortMalloc+0x140>)
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d101      	bne.n	800710c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007108:	f000 f8ec 	bl	80072e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800710c:	4b49      	ldr	r3, [pc, #292]	; (8007234 <pvPortMalloc+0x144>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	687a      	ldr	r2, [r7, #4]
 8007112:	4013      	ands	r3, r2
 8007114:	d000      	beq.n	8007118 <pvPortMalloc+0x28>
 8007116:	e07e      	b.n	8007216 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d012      	beq.n	8007144 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800711e:	2208      	movs	r2, #8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	189b      	adds	r3, r3, r2
 8007124:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2207      	movs	r2, #7
 800712a:	4013      	ands	r3, r2
 800712c:	d00a      	beq.n	8007144 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2207      	movs	r2, #7
 8007132:	4393      	bics	r3, r2
 8007134:	3308      	adds	r3, #8
 8007136:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2207      	movs	r2, #7
 800713c:	4013      	ands	r3, r2
 800713e:	d001      	beq.n	8007144 <pvPortMalloc+0x54>
 8007140:	b672      	cpsid	i
 8007142:	e7fe      	b.n	8007142 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d065      	beq.n	8007216 <pvPortMalloc+0x126>
 800714a:	4b3b      	ldr	r3, [pc, #236]	; (8007238 <pvPortMalloc+0x148>)
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	687a      	ldr	r2, [r7, #4]
 8007150:	429a      	cmp	r2, r3
 8007152:	d860      	bhi.n	8007216 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007154:	4b39      	ldr	r3, [pc, #228]	; (800723c <pvPortMalloc+0x14c>)
 8007156:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8007158:	4b38      	ldr	r3, [pc, #224]	; (800723c <pvPortMalloc+0x14c>)
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800715e:	e004      	b.n	800716a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8007160:	697b      	ldr	r3, [r7, #20]
 8007162:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007164:	697b      	ldr	r3, [r7, #20]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	685b      	ldr	r3, [r3, #4]
 800716e:	687a      	ldr	r2, [r7, #4]
 8007170:	429a      	cmp	r2, r3
 8007172:	d903      	bls.n	800717c <pvPortMalloc+0x8c>
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1f1      	bne.n	8007160 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800717c:	4b2c      	ldr	r3, [pc, #176]	; (8007230 <pvPortMalloc+0x140>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	429a      	cmp	r2, r3
 8007184:	d047      	beq.n	8007216 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007186:	693b      	ldr	r3, [r7, #16]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	2208      	movs	r2, #8
 800718c:	189b      	adds	r3, r3, r2
 800718e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	681a      	ldr	r2, [r3, #0]
 8007194:	693b      	ldr	r3, [r7, #16]
 8007196:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	685a      	ldr	r2, [r3, #4]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	1ad2      	subs	r2, r2, r3
 80071a0:	2308      	movs	r3, #8
 80071a2:	005b      	lsls	r3, r3, #1
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d916      	bls.n	80071d6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80071a8:	697a      	ldr	r2, [r7, #20]
 80071aa:	687b      	ldr	r3, [r7, #4]
 80071ac:	18d3      	adds	r3, r2, r3
 80071ae:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2207      	movs	r2, #7
 80071b4:	4013      	ands	r3, r2
 80071b6:	d001      	beq.n	80071bc <pvPortMalloc+0xcc>
 80071b8:	b672      	cpsid	i
 80071ba:	e7fe      	b.n	80071ba <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	1ad2      	subs	r2, r2, r3
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	687a      	ldr	r2, [r7, #4]
 80071cc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80071ce:	68bb      	ldr	r3, [r7, #8]
 80071d0:	0018      	movs	r0, r3
 80071d2:	f000 f8e7 	bl	80073a4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80071d6:	4b18      	ldr	r3, [pc, #96]	; (8007238 <pvPortMalloc+0x148>)
 80071d8:	681a      	ldr	r2, [r3, #0]
 80071da:	697b      	ldr	r3, [r7, #20]
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	1ad2      	subs	r2, r2, r3
 80071e0:	4b15      	ldr	r3, [pc, #84]	; (8007238 <pvPortMalloc+0x148>)
 80071e2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80071e4:	4b14      	ldr	r3, [pc, #80]	; (8007238 <pvPortMalloc+0x148>)
 80071e6:	681a      	ldr	r2, [r3, #0]
 80071e8:	4b15      	ldr	r3, [pc, #84]	; (8007240 <pvPortMalloc+0x150>)
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	429a      	cmp	r2, r3
 80071ee:	d203      	bcs.n	80071f8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80071f0:	4b11      	ldr	r3, [pc, #68]	; (8007238 <pvPortMalloc+0x148>)
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	4b12      	ldr	r3, [pc, #72]	; (8007240 <pvPortMalloc+0x150>)
 80071f6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	685a      	ldr	r2, [r3, #4]
 80071fc:	4b0d      	ldr	r3, [pc, #52]	; (8007234 <pvPortMalloc+0x144>)
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	431a      	orrs	r2, r3
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	2200      	movs	r2, #0
 800720a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800720c:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <pvPortMalloc+0x154>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	1c5a      	adds	r2, r3, #1
 8007212:	4b0c      	ldr	r3, [pc, #48]	; (8007244 <pvPortMalloc+0x154>)
 8007214:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007216:	f7fe fed9 	bl	8005fcc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	2207      	movs	r2, #7
 800721e:	4013      	ands	r3, r2
 8007220:	d001      	beq.n	8007226 <pvPortMalloc+0x136>
 8007222:	b672      	cpsid	i
 8007224:	e7fe      	b.n	8007224 <pvPortMalloc+0x134>
	return pvReturn;
 8007226:	68fb      	ldr	r3, [r7, #12]
}
 8007228:	0018      	movs	r0, r3
 800722a:	46bd      	mov	sp, r7
 800722c:	b006      	add	sp, #24
 800722e:	bd80      	pop	{r7, pc}
 8007230:	20001c08 	.word	0x20001c08
 8007234:	20001c1c 	.word	0x20001c1c
 8007238:	20001c0c 	.word	0x20001c0c
 800723c:	20001c00 	.word	0x20001c00
 8007240:	20001c10 	.word	0x20001c10
 8007244:	20001c14 	.word	0x20001c14

08007248 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b084      	sub	sp, #16
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d03a      	beq.n	80072d0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800725a:	2308      	movs	r3, #8
 800725c:	425b      	negs	r3, r3
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	18d3      	adds	r3, r2, r3
 8007262:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	685a      	ldr	r2, [r3, #4]
 800726c:	4b1a      	ldr	r3, [pc, #104]	; (80072d8 <vPortFree+0x90>)
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	4013      	ands	r3, r2
 8007272:	d101      	bne.n	8007278 <vPortFree+0x30>
 8007274:	b672      	cpsid	i
 8007276:	e7fe      	b.n	8007276 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007278:	68bb      	ldr	r3, [r7, #8]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <vPortFree+0x3c>
 8007280:	b672      	cpsid	i
 8007282:	e7fe      	b.n	8007282 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	685a      	ldr	r2, [r3, #4]
 8007288:	4b13      	ldr	r3, [pc, #76]	; (80072d8 <vPortFree+0x90>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	4013      	ands	r3, r2
 800728e:	d01f      	beq.n	80072d0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007290:	68bb      	ldr	r3, [r7, #8]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	2b00      	cmp	r3, #0
 8007296:	d11b      	bne.n	80072d0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	685a      	ldr	r2, [r3, #4]
 800729c:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <vPortFree+0x90>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	43db      	mvns	r3, r3
 80072a2:	401a      	ands	r2, r3
 80072a4:	68bb      	ldr	r3, [r7, #8]
 80072a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80072a8:	f7fe fe84 	bl	8005fb4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80072ac:	68bb      	ldr	r3, [r7, #8]
 80072ae:	685a      	ldr	r2, [r3, #4]
 80072b0:	4b0a      	ldr	r3, [pc, #40]	; (80072dc <vPortFree+0x94>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	18d2      	adds	r2, r2, r3
 80072b6:	4b09      	ldr	r3, [pc, #36]	; (80072dc <vPortFree+0x94>)
 80072b8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80072ba:	68bb      	ldr	r3, [r7, #8]
 80072bc:	0018      	movs	r0, r3
 80072be:	f000 f871 	bl	80073a4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80072c2:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <vPortFree+0x98>)
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	1c5a      	adds	r2, r3, #1
 80072c8:	4b05      	ldr	r3, [pc, #20]	; (80072e0 <vPortFree+0x98>)
 80072ca:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 80072cc:	f7fe fe7e 	bl	8005fcc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80072d0:	46c0      	nop			; (mov r8, r8)
 80072d2:	46bd      	mov	sp, r7
 80072d4:	b004      	add	sp, #16
 80072d6:	bd80      	pop	{r7, pc}
 80072d8:	20001c1c 	.word	0x20001c1c
 80072dc:	20001c0c 	.word	0x20001c0c
 80072e0:	20001c18 	.word	0x20001c18

080072e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80072e4:	b580      	push	{r7, lr}
 80072e6:	b084      	sub	sp, #16
 80072e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80072ea:	23c0      	movs	r3, #192	; 0xc0
 80072ec:	011b      	lsls	r3, r3, #4
 80072ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80072f0:	4b26      	ldr	r3, [pc, #152]	; (800738c <prvHeapInit+0xa8>)
 80072f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	2207      	movs	r2, #7
 80072f8:	4013      	ands	r3, r2
 80072fa:	d00c      	beq.n	8007316 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3307      	adds	r3, #7
 8007300:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	2207      	movs	r2, #7
 8007306:	4393      	bics	r3, r2
 8007308:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800730a:	68ba      	ldr	r2, [r7, #8]
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	4b1e      	ldr	r3, [pc, #120]	; (800738c <prvHeapInit+0xa8>)
 8007312:	18d3      	adds	r3, r2, r3
 8007314:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800731a:	4b1d      	ldr	r3, [pc, #116]	; (8007390 <prvHeapInit+0xac>)
 800731c:	687a      	ldr	r2, [r7, #4]
 800731e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007320:	4b1b      	ldr	r3, [pc, #108]	; (8007390 <prvHeapInit+0xac>)
 8007322:	2200      	movs	r2, #0
 8007324:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	68ba      	ldr	r2, [r7, #8]
 800732a:	18d3      	adds	r3, r2, r3
 800732c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800732e:	2208      	movs	r2, #8
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	1a9b      	subs	r3, r3, r2
 8007334:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2207      	movs	r2, #7
 800733a:	4393      	bics	r3, r2
 800733c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800733e:	68fa      	ldr	r2, [r7, #12]
 8007340:	4b14      	ldr	r3, [pc, #80]	; (8007394 <prvHeapInit+0xb0>)
 8007342:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8007344:	4b13      	ldr	r3, [pc, #76]	; (8007394 <prvHeapInit+0xb0>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	2200      	movs	r2, #0
 800734a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800734c:	4b11      	ldr	r3, [pc, #68]	; (8007394 <prvHeapInit+0xb0>)
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2200      	movs	r2, #0
 8007352:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	68fa      	ldr	r2, [r7, #12]
 800735c:	1ad2      	subs	r2, r2, r3
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007362:	4b0c      	ldr	r3, [pc, #48]	; (8007394 <prvHeapInit+0xb0>)
 8007364:	681a      	ldr	r2, [r3, #0]
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800736a:	683b      	ldr	r3, [r7, #0]
 800736c:	685a      	ldr	r2, [r3, #4]
 800736e:	4b0a      	ldr	r3, [pc, #40]	; (8007398 <prvHeapInit+0xb4>)
 8007370:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007372:	683b      	ldr	r3, [r7, #0]
 8007374:	685a      	ldr	r2, [r3, #4]
 8007376:	4b09      	ldr	r3, [pc, #36]	; (800739c <prvHeapInit+0xb8>)
 8007378:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800737a:	4b09      	ldr	r3, [pc, #36]	; (80073a0 <prvHeapInit+0xbc>)
 800737c:	2280      	movs	r2, #128	; 0x80
 800737e:	0612      	lsls	r2, r2, #24
 8007380:	601a      	str	r2, [r3, #0]
}
 8007382:	46c0      	nop			; (mov r8, r8)
 8007384:	46bd      	mov	sp, r7
 8007386:	b004      	add	sp, #16
 8007388:	bd80      	pop	{r7, pc}
 800738a:	46c0      	nop			; (mov r8, r8)
 800738c:	20001000 	.word	0x20001000
 8007390:	20001c00 	.word	0x20001c00
 8007394:	20001c08 	.word	0x20001c08
 8007398:	20001c10 	.word	0x20001c10
 800739c:	20001c0c 	.word	0x20001c0c
 80073a0:	20001c1c 	.word	0x20001c1c

080073a4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80073a4:	b580      	push	{r7, lr}
 80073a6:	b084      	sub	sp, #16
 80073a8:	af00      	add	r7, sp, #0
 80073aa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80073ac:	4b27      	ldr	r3, [pc, #156]	; (800744c <prvInsertBlockIntoFreeList+0xa8>)
 80073ae:	60fb      	str	r3, [r7, #12]
 80073b0:	e002      	b.n	80073b8 <prvInsertBlockIntoFreeList+0x14>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	60fb      	str	r3, [r7, #12]
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	429a      	cmp	r2, r3
 80073c0:	d8f7      	bhi.n	80073b2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	685b      	ldr	r3, [r3, #4]
 80073ca:	68ba      	ldr	r2, [r7, #8]
 80073cc:	18d3      	adds	r3, r2, r3
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d108      	bne.n	80073e6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	685a      	ldr	r2, [r3, #4]
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	18d2      	adds	r2, r2, r3
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	68ba      	ldr	r2, [r7, #8]
 80073f0:	18d2      	adds	r2, r2, r3
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	429a      	cmp	r2, r3
 80073f8:	d118      	bne.n	800742c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	681a      	ldr	r2, [r3, #0]
 80073fe:	4b14      	ldr	r3, [pc, #80]	; (8007450 <prvInsertBlockIntoFreeList+0xac>)
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	429a      	cmp	r2, r3
 8007404:	d00d      	beq.n	8007422 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	685a      	ldr	r2, [r3, #4]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	685b      	ldr	r3, [r3, #4]
 8007410:	18d2      	adds	r2, r2, r3
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007416:	68fb      	ldr	r3, [r7, #12]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	601a      	str	r2, [r3, #0]
 8007420:	e008      	b.n	8007434 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007422:	4b0b      	ldr	r3, [pc, #44]	; (8007450 <prvInsertBlockIntoFreeList+0xac>)
 8007424:	681a      	ldr	r2, [r3, #0]
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	601a      	str	r2, [r3, #0]
 800742a:	e003      	b.n	8007434 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	681a      	ldr	r2, [r3, #0]
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007434:	68fa      	ldr	r2, [r7, #12]
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	429a      	cmp	r2, r3
 800743a:	d002      	beq.n	8007442 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	687a      	ldr	r2, [r7, #4]
 8007440:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007442:	46c0      	nop			; (mov r8, r8)
 8007444:	46bd      	mov	sp, r7
 8007446:	b004      	add	sp, #16
 8007448:	bd80      	pop	{r7, pc}
 800744a:	46c0      	nop			; (mov r8, r8)
 800744c:	20001c00 	.word	0x20001c00
 8007450:	20001c08 	.word	0x20001c08

08007454 <memset>:
 8007454:	0003      	movs	r3, r0
 8007456:	1882      	adds	r2, r0, r2
 8007458:	4293      	cmp	r3, r2
 800745a:	d100      	bne.n	800745e <memset+0xa>
 800745c:	4770      	bx	lr
 800745e:	7019      	strb	r1, [r3, #0]
 8007460:	3301      	adds	r3, #1
 8007462:	e7f9      	b.n	8007458 <memset+0x4>

08007464 <_reclaim_reent>:
 8007464:	4b2d      	ldr	r3, [pc, #180]	; (800751c <_reclaim_reent+0xb8>)
 8007466:	b570      	push	{r4, r5, r6, lr}
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	0004      	movs	r4, r0
 800746c:	4283      	cmp	r3, r0
 800746e:	d042      	beq.n	80074f6 <_reclaim_reent+0x92>
 8007470:	69c3      	ldr	r3, [r0, #28]
 8007472:	2b00      	cmp	r3, #0
 8007474:	d00a      	beq.n	800748c <_reclaim_reent+0x28>
 8007476:	2500      	movs	r5, #0
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	42ab      	cmp	r3, r5
 800747c:	d140      	bne.n	8007500 <_reclaim_reent+0x9c>
 800747e:	69e3      	ldr	r3, [r4, #28]
 8007480:	6819      	ldr	r1, [r3, #0]
 8007482:	2900      	cmp	r1, #0
 8007484:	d002      	beq.n	800748c <_reclaim_reent+0x28>
 8007486:	0020      	movs	r0, r4
 8007488:	f000 f87a 	bl	8007580 <_free_r>
 800748c:	6961      	ldr	r1, [r4, #20]
 800748e:	2900      	cmp	r1, #0
 8007490:	d002      	beq.n	8007498 <_reclaim_reent+0x34>
 8007492:	0020      	movs	r0, r4
 8007494:	f000 f874 	bl	8007580 <_free_r>
 8007498:	69e1      	ldr	r1, [r4, #28]
 800749a:	2900      	cmp	r1, #0
 800749c:	d002      	beq.n	80074a4 <_reclaim_reent+0x40>
 800749e:	0020      	movs	r0, r4
 80074a0:	f000 f86e 	bl	8007580 <_free_r>
 80074a4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80074a6:	2900      	cmp	r1, #0
 80074a8:	d002      	beq.n	80074b0 <_reclaim_reent+0x4c>
 80074aa:	0020      	movs	r0, r4
 80074ac:	f000 f868 	bl	8007580 <_free_r>
 80074b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80074b2:	2900      	cmp	r1, #0
 80074b4:	d002      	beq.n	80074bc <_reclaim_reent+0x58>
 80074b6:	0020      	movs	r0, r4
 80074b8:	f000 f862 	bl	8007580 <_free_r>
 80074bc:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80074be:	2900      	cmp	r1, #0
 80074c0:	d002      	beq.n	80074c8 <_reclaim_reent+0x64>
 80074c2:	0020      	movs	r0, r4
 80074c4:	f000 f85c 	bl	8007580 <_free_r>
 80074c8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80074ca:	2900      	cmp	r1, #0
 80074cc:	d002      	beq.n	80074d4 <_reclaim_reent+0x70>
 80074ce:	0020      	movs	r0, r4
 80074d0:	f000 f856 	bl	8007580 <_free_r>
 80074d4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80074d6:	2900      	cmp	r1, #0
 80074d8:	d002      	beq.n	80074e0 <_reclaim_reent+0x7c>
 80074da:	0020      	movs	r0, r4
 80074dc:	f000 f850 	bl	8007580 <_free_r>
 80074e0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80074e2:	2900      	cmp	r1, #0
 80074e4:	d002      	beq.n	80074ec <_reclaim_reent+0x88>
 80074e6:	0020      	movs	r0, r4
 80074e8:	f000 f84a 	bl	8007580 <_free_r>
 80074ec:	6a23      	ldr	r3, [r4, #32]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d001      	beq.n	80074f6 <_reclaim_reent+0x92>
 80074f2:	0020      	movs	r0, r4
 80074f4:	4798      	blx	r3
 80074f6:	bd70      	pop	{r4, r5, r6, pc}
 80074f8:	5949      	ldr	r1, [r1, r5]
 80074fa:	2900      	cmp	r1, #0
 80074fc:	d108      	bne.n	8007510 <_reclaim_reent+0xac>
 80074fe:	3504      	adds	r5, #4
 8007500:	69e3      	ldr	r3, [r4, #28]
 8007502:	68d9      	ldr	r1, [r3, #12]
 8007504:	2d80      	cmp	r5, #128	; 0x80
 8007506:	d1f7      	bne.n	80074f8 <_reclaim_reent+0x94>
 8007508:	0020      	movs	r0, r4
 800750a:	f000 f839 	bl	8007580 <_free_r>
 800750e:	e7b6      	b.n	800747e <_reclaim_reent+0x1a>
 8007510:	680e      	ldr	r6, [r1, #0]
 8007512:	0020      	movs	r0, r4
 8007514:	f000 f834 	bl	8007580 <_free_r>
 8007518:	0031      	movs	r1, r6
 800751a:	e7ee      	b.n	80074fa <_reclaim_reent+0x96>
 800751c:	2000005c 	.word	0x2000005c

08007520 <__libc_init_array>:
 8007520:	b570      	push	{r4, r5, r6, lr}
 8007522:	2600      	movs	r6, #0
 8007524:	4c0c      	ldr	r4, [pc, #48]	; (8007558 <__libc_init_array+0x38>)
 8007526:	4d0d      	ldr	r5, [pc, #52]	; (800755c <__libc_init_array+0x3c>)
 8007528:	1b64      	subs	r4, r4, r5
 800752a:	10a4      	asrs	r4, r4, #2
 800752c:	42a6      	cmp	r6, r4
 800752e:	d109      	bne.n	8007544 <__libc_init_array+0x24>
 8007530:	2600      	movs	r6, #0
 8007532:	f000 f87f 	bl	8007634 <_init>
 8007536:	4c0a      	ldr	r4, [pc, #40]	; (8007560 <__libc_init_array+0x40>)
 8007538:	4d0a      	ldr	r5, [pc, #40]	; (8007564 <__libc_init_array+0x44>)
 800753a:	1b64      	subs	r4, r4, r5
 800753c:	10a4      	asrs	r4, r4, #2
 800753e:	42a6      	cmp	r6, r4
 8007540:	d105      	bne.n	800754e <__libc_init_array+0x2e>
 8007542:	bd70      	pop	{r4, r5, r6, pc}
 8007544:	00b3      	lsls	r3, r6, #2
 8007546:	58eb      	ldr	r3, [r5, r3]
 8007548:	4798      	blx	r3
 800754a:	3601      	adds	r6, #1
 800754c:	e7ee      	b.n	800752c <__libc_init_array+0xc>
 800754e:	00b3      	lsls	r3, r6, #2
 8007550:	58eb      	ldr	r3, [r5, r3]
 8007552:	4798      	blx	r3
 8007554:	3601      	adds	r6, #1
 8007556:	e7f2      	b.n	800753e <__libc_init_array+0x1e>
 8007558:	08007794 	.word	0x08007794
 800755c:	08007794 	.word	0x08007794
 8007560:	08007798 	.word	0x08007798
 8007564:	08007794 	.word	0x08007794

08007568 <__retarget_lock_acquire_recursive>:
 8007568:	4770      	bx	lr

0800756a <__retarget_lock_release_recursive>:
 800756a:	4770      	bx	lr

0800756c <memcpy>:
 800756c:	2300      	movs	r3, #0
 800756e:	b510      	push	{r4, lr}
 8007570:	429a      	cmp	r2, r3
 8007572:	d100      	bne.n	8007576 <memcpy+0xa>
 8007574:	bd10      	pop	{r4, pc}
 8007576:	5ccc      	ldrb	r4, [r1, r3]
 8007578:	54c4      	strb	r4, [r0, r3]
 800757a:	3301      	adds	r3, #1
 800757c:	e7f8      	b.n	8007570 <memcpy+0x4>
	...

08007580 <_free_r>:
 8007580:	b570      	push	{r4, r5, r6, lr}
 8007582:	0005      	movs	r5, r0
 8007584:	2900      	cmp	r1, #0
 8007586:	d010      	beq.n	80075aa <_free_r+0x2a>
 8007588:	1f0c      	subs	r4, r1, #4
 800758a:	6823      	ldr	r3, [r4, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	da00      	bge.n	8007592 <_free_r+0x12>
 8007590:	18e4      	adds	r4, r4, r3
 8007592:	0028      	movs	r0, r5
 8007594:	f000 f83e 	bl	8007614 <__malloc_lock>
 8007598:	4a1d      	ldr	r2, [pc, #116]	; (8007610 <_free_r+0x90>)
 800759a:	6813      	ldr	r3, [r2, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d105      	bne.n	80075ac <_free_r+0x2c>
 80075a0:	6063      	str	r3, [r4, #4]
 80075a2:	6014      	str	r4, [r2, #0]
 80075a4:	0028      	movs	r0, r5
 80075a6:	f000 f83d 	bl	8007624 <__malloc_unlock>
 80075aa:	bd70      	pop	{r4, r5, r6, pc}
 80075ac:	42a3      	cmp	r3, r4
 80075ae:	d908      	bls.n	80075c2 <_free_r+0x42>
 80075b0:	6820      	ldr	r0, [r4, #0]
 80075b2:	1821      	adds	r1, r4, r0
 80075b4:	428b      	cmp	r3, r1
 80075b6:	d1f3      	bne.n	80075a0 <_free_r+0x20>
 80075b8:	6819      	ldr	r1, [r3, #0]
 80075ba:	685b      	ldr	r3, [r3, #4]
 80075bc:	1809      	adds	r1, r1, r0
 80075be:	6021      	str	r1, [r4, #0]
 80075c0:	e7ee      	b.n	80075a0 <_free_r+0x20>
 80075c2:	001a      	movs	r2, r3
 80075c4:	685b      	ldr	r3, [r3, #4]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d001      	beq.n	80075ce <_free_r+0x4e>
 80075ca:	42a3      	cmp	r3, r4
 80075cc:	d9f9      	bls.n	80075c2 <_free_r+0x42>
 80075ce:	6811      	ldr	r1, [r2, #0]
 80075d0:	1850      	adds	r0, r2, r1
 80075d2:	42a0      	cmp	r0, r4
 80075d4:	d10b      	bne.n	80075ee <_free_r+0x6e>
 80075d6:	6820      	ldr	r0, [r4, #0]
 80075d8:	1809      	adds	r1, r1, r0
 80075da:	1850      	adds	r0, r2, r1
 80075dc:	6011      	str	r1, [r2, #0]
 80075de:	4283      	cmp	r3, r0
 80075e0:	d1e0      	bne.n	80075a4 <_free_r+0x24>
 80075e2:	6818      	ldr	r0, [r3, #0]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	1841      	adds	r1, r0, r1
 80075e8:	6011      	str	r1, [r2, #0]
 80075ea:	6053      	str	r3, [r2, #4]
 80075ec:	e7da      	b.n	80075a4 <_free_r+0x24>
 80075ee:	42a0      	cmp	r0, r4
 80075f0:	d902      	bls.n	80075f8 <_free_r+0x78>
 80075f2:	230c      	movs	r3, #12
 80075f4:	602b      	str	r3, [r5, #0]
 80075f6:	e7d5      	b.n	80075a4 <_free_r+0x24>
 80075f8:	6820      	ldr	r0, [r4, #0]
 80075fa:	1821      	adds	r1, r4, r0
 80075fc:	428b      	cmp	r3, r1
 80075fe:	d103      	bne.n	8007608 <_free_r+0x88>
 8007600:	6819      	ldr	r1, [r3, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	1809      	adds	r1, r1, r0
 8007606:	6021      	str	r1, [r4, #0]
 8007608:	6063      	str	r3, [r4, #4]
 800760a:	6054      	str	r4, [r2, #4]
 800760c:	e7ca      	b.n	80075a4 <_free_r+0x24>
 800760e:	46c0      	nop			; (mov r8, r8)
 8007610:	20001d5c 	.word	0x20001d5c

08007614 <__malloc_lock>:
 8007614:	b510      	push	{r4, lr}
 8007616:	4802      	ldr	r0, [pc, #8]	; (8007620 <__malloc_lock+0xc>)
 8007618:	f7ff ffa6 	bl	8007568 <__retarget_lock_acquire_recursive>
 800761c:	bd10      	pop	{r4, pc}
 800761e:	46c0      	nop			; (mov r8, r8)
 8007620:	20001d58 	.word	0x20001d58

08007624 <__malloc_unlock>:
 8007624:	b510      	push	{r4, lr}
 8007626:	4802      	ldr	r0, [pc, #8]	; (8007630 <__malloc_unlock+0xc>)
 8007628:	f7ff ff9f 	bl	800756a <__retarget_lock_release_recursive>
 800762c:	bd10      	pop	{r4, pc}
 800762e:	46c0      	nop			; (mov r8, r8)
 8007630:	20001d58 	.word	0x20001d58

08007634 <_init>:
 8007634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007636:	46c0      	nop			; (mov r8, r8)
 8007638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800763a:	bc08      	pop	{r3}
 800763c:	469e      	mov	lr, r3
 800763e:	4770      	bx	lr

08007640 <_fini>:
 8007640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007642:	46c0      	nop			; (mov r8, r8)
 8007644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007646:	bc08      	pop	{r3}
 8007648:	469e      	mov	lr, r3
 800764a:	4770      	bx	lr
