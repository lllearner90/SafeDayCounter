#!/bin/bash

service=gtest_test_env
gitRootPath=$(git rev-parse --show-toplevel)
echo "${gitRootPath}"
compose_file=$gitRootPath/setup/docker-compose.yaml

# Usage(){
#     echo "Usage: setup_env [Options] [command]"
#     echo "Options:"
#     echo "          -p ports Set the port map which is to be exposed"
#     echo "example: 'setup_env -p 5000:5000'"
#     exit 1
# }

# while getopts "p" Option
# do
#     case $Option in
#     p) port_map="$port_map - p $OPTARG";;
#     *) Usage ;;
#     esac
# done

shift $((OPTIND-1))

docker_cmd=$*

case "$(uname -s)" in
    MSYS*|MINGW*)
        WIN_TTY=winpty
        ;;
    CYGWIN*|LINUX|Linux)
        WIN_TTY=''
        ;;
    *)
        echo "unsupported bash interpreter $(uname -s)"
        exit 1
        ;;
esac

# create an empty cinfig, if it doesnot exist
[ ! -f ~/.ssh/config ] && {
    echo "Warning: ~/.ssh/config doesnot exist"
    touch ~/.ssh/config
}

[ ! -f ~/.gitconfig ] && {
    echo "Error: ~/.gitconfig doesnot exist"
}

[ ! -f ~/.docker_bash_history ] && {
    echo "Warning: ~/.docker_bash_history doesnot exist, file created automatically"
    touch ~/.docker_bash_history
}

[ ! -f ~/.docker_bashrc ] && {
    echo "Warning: ~/.docker_bashrc doesnot exist, file created automatically"
    touch ~/.docker_bashrc
}
# echo "docker-compose -f $compose_file run --rm $service $docker_cmd"
$WIN_TTY docker compose -f $compose_file run --rm $service $docker_cmd
